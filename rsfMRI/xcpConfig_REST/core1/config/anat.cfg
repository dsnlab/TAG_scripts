#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################


###################################################################
# Р Ћ 2017
###################################################################
<< CONFIG_UI

 config_ui provides a minimal user interface for multimodal
 pipeline configuration. This is the single-modal configuration
 script for anatomical processing.

CONFIG_UI
###################################################################
declare  -A anat
source   ${XCPEDIR}/core/constants
source   ${XCPEDIR}/core/functions/library.sh
source   ${XCPEDIR}/core/functions/cluster_submit

source   ${XCPEDIR}/core/config/common.cfg
source   ${XCPEDIR}/core/config/space.cfg










###################################################################
# On script open
###################################################################
open() {

config_common
string_setup
anat[stream]=ANTsCT
anat[space]="OASIS"
echo -e "${TEXT_RETURN}"

}










###################################################################
# On script close
###################################################################
close() {

echo -e "${TEXT_HEAD}${TEXT_CLOSE}${TEXT_TAIL}"

}










###################################################################
# Main menu
###################################################################
refresh_menu() {
   options=(
      
      [1]="Processing stream                 ${anat[stream]}"
      [2]="Standard space                    ${anat[space]}"
      [3]="Finalise pipeline"
      
   )
}
menu() {

   local REPLY
   local options
   
   local response=(
      
      [1]="${TEXT_HEAD}${TEXT_SELECT_PROCESS}${TEXT_TAIL}"
      [2]="${TEXT_HEAD}${TEXT_SELECT_SPACE}${TEXT_TAIL}"
      [3]=""
      [0]="${TEXT_RETURN}"
     [99]="Exiting"
      
   )
   
   local cmd=(
   
      [1]="menu_process"
      [2]="menu_space anat[space]"
      [3]="anat_design_build"
     [99]="exit"
   
   )
   
   while true
   
   do refresh_menu
   select option in "${options[@]}" "Exit without saving"
   
   do case $REPLY in
   
   1 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; break;;
   2 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; break;;
   3 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   4 ) echo -e "${response[99]}";    eval ${cmd[99]};;
   * ) echo -e "${response[0]}";     eval ${cmd[0]};;
   
   esac; done; done

}










###################################################################
# Confound model selection
###################################################################
menu_process() {

   local REPLY
   local options=(
   
      [1]="Minimal"
      [2]="Minimal+"
      [3]="ANTsCT"
      [4]="Complete"
      [5]="Complete+"
      [6]="Experimental"
      [7]="Registration"
   
   )
   
   local response=(
   
      [1]="${TEXT_HEAD}${TEXT_SELECT_PROCESS_MINIMAL}${TEXT_TAIL}${TEXT_RETURN}"
      [2]="${TEXT_HEAD}${TEXT_SELECT_PROCESS_MINIMALP}${TEXT_TAIL}${TEXT_RETURN}"
      [3]="${TEXT_HEAD}${TEXT_SELECT_PROCESS_ANTSCT}${TEXT_TAIL}${TEXT_RETURN}"
      [4]="${TEXT_HEAD}${TEXT_SELECT_PROCESS_COMPLETE}${TEXT_TAIL}${TEXT_RETURN}"
      [5]="${TEXT_HEAD}${TEXT_SELECT_PROCESS_COMPLETEP}${TEXT_TAIL}${TEXT_RETURN}"
      [6]="${TEXT_HEAD}${TEXT_SELECT_PROCESS_EXPERIMENTAL}${TEXT_TAIL}${TEXT_RETURN}"
      [7]="${TEXT_HEAD}${TEXT_SELECT_PROCESS_REGONLY}${TEXT_TAIL}${TEXT_RETURN}"
      [0]="${TEXT_HEAD}${TEXT_INFO_PROCESS}${TEXT_TAIL}${TEXT_HEAD}${TEXT_SELECT_CONFOUND}${TEXT_TAIL}"
   
   )
   
   local cmd=(
   
      [1]="anat[stream]=${options[1]}"
      [2]="anat[stream]=${options[2]}"
      [3]="anat[stream]=${options[3]}"
      [4]="anat[stream]=${options[4]}"
      [5]="anat[stream]=${options[5]}"
      [6]="anat[stream]=${options[6]}"
      [7]="anat[stream]=${options[7]}"
   
   )
   
   while true
   
   do select option in "${options[@]}"
   
   do case $REPLY in
   
   1 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   2 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   3 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   4 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   5 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   6 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   7 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   * ) echo -e "${response[0]}";     eval ${cmd[0]};     break;;
   
   esac; done; done

}










###################################################################
# Build the design file.
###################################################################
anat_design_build() {

   local design_new=anat-${anat[stream]}_$(date +%Y%m%d%H%M).dsn
   local design
   local anat_design
   local space
   local l
   local line
   local exp
   local REPLY
   local response
   
   local prepstream1
   local prepstream2=-DMT

   case ${anat[stream]} in

   Minimal)
      design=${XCPEDIR}/designs/anat-minimal.dsn
      ;;
   Minimal+)
      design=${XCPEDIR}/designs/anat-minimal+.dsn
      ;;
   ANTsCT)
      design=${XCPEDIR}/designs/anat-antsct.dsn
      ;;
   Complete)
      design=${XCPEDIR}/designs/anat-complete.dsn
      ;;
   Complete+)
      design=${XCPEDIR}/designs/anat-complete+.dsn
      ;;
   Experimental)
      design=${XCPEDIR}/designs/anat-experimental.dsn
      ;;
   Registration)
      design=${XCPEDIR}/designs/anat-regonly.dsn
      ;;

   esac
   
   ################################################################
   # Translate variables: anat[space]
   ################################################################
   translate_space anat[space]

   ################################################################
   # Rebuild the design with the correct variables.
   ################################################################
   mapfile anat_design < ${design}

   for l in ${!anat_design[@]}
      do
      line="${anat_design[l]}"
      [[ -z $(echo ${line}) ]]   && continue

      chk_SPC=( "${line}"           '^standard='            )
      
      contains "${chk_SPC[@]}"                              \
               && exp=$(strslice ${anat_design[l]} 1 =)     \
               && anat_design[l]="${exp}=${anat[space]}\n"  \
               && continue

   done

   ################################################################
   # Write the design file.
   ################################################################
   response=(
   
      [0]="${TEXT_HEAD}${TEXT_SELECT_DESIGN}${TEXT_TAIL}"
   
   )
   while true
      do echo    -e   "${response[0]}"
      read -p "" -e -i ${design_new} REPLY
      touch    ${REPLY} 2>/dev/null
      if [[ -f ${REPLY} ]]
         then
         design_new=$(abspath ${REPLY})
         config_common
         response=(
         
            [1]="${TEXT_HEAD}${TEXT_SELECT_DESIGN_FILE}${TEXT_TAIL}"
         
         )
         echo -e "${response[1]}"
         break
      fi
   done
   printf      '%b' "${anat_design[@]}"           >  ${design_new}
   
   return

}









###################################################################
# Define text
# string_response and string_info are NOT used at this time.
###################################################################
string_setup() {

   string_setup_space

   TEXT_SELECT_PROCESS=\
"Select a processing stream."
   
   TEXT_SELECT_PROCESS_MINIMAL=\
"${CYA}Minimal processing stream selected.${RCL}

Includes bias field correction, brain extraction, nonlinear 
registration to a template, and 3-class segmentation."
   
   TEXT_SELECT_PROCESS_MINIMALP=\
"${CYA}Minimal+ processing stream selected.${RCL}

Includes bias field correction, brain extraction, nonlinear 
registration to a template, and 6-class prior-driven segmentation."
   
   TEXT_SELECT_PROCESS_ANTSCT=\
"${CYA}ANTs Cortical Thickness processing stream selected.${RCL}

Includes the standard ANTs Cortical Thickness pipeline, which 
integrates bias field correction, brain extraction, nonlinear 
registration to a template, 6-class prior-driven segmentation, and 
an estimate of cortical thickness."
   
   TEXT_SELECT_PROCESS_COMPLETE=\
"${CYA}Complete processing stream selected.${RCL}

Includes the complete ANTsCT pipeline as well as grey matter 
density estimation, and regional quantification. ${CYA}If you are 
not sure what option to select, this is appropriate for most needs."
   
   TEXT_SELECT_PROCESS_COMPLETEP=\
"${CYA}Complete+ processing stream selected.${RCL}

Includes the complete ANTsCT pipeline, estimation of grey matter 
density, generation of a subject-specific structural atlas via 
ANTs Joint Label Fusion, and regional quantification. Joint Label 
Fusion is a computationally intensive process and is not 
recommended without extensive computational resources."
   
   TEXT_SELECT_PROCESS_EXPERIMENTAL=\
"${CYA}Experimental processing stream selected.${RCL}

Includes the entire anatomical data processing stream: ANTsCT, grey 
matter density, JLF, and regional quantification. Also includes a 
number of experimental metrics: cortical contrast and sulcal depth."
   
   TEXT_SELECT_PROCESS_REGONLY=\
"${CYA}Registration-only processing stream selected.${RCL}

Only computes registration using ANTs. Assumes that other
anatomical processing has been completed in another program."

   TEXT_INFO_MAIN=\
"   Modality: ${CYA}anatomical${RCL}.
   Select a menu item by entering the associated numeral, or 
   finalise your pipeline."

   TEXT_INFO_PROCESS=\
"Select an option by entering the associated numeral.

${CYA}PROCESSING STREAM${LGR}
A number of anatomical processing streams are available for 
different research needs. If you are processing anatomical data 
exclusively to obtain references for functional processing, then 
minimal processing streams will produce all required references.
Otherwise, more extensive processing streams will produce regional 
and voxelwise anatomical measurements.

${CYA}Minimal${LGR}
Includes bias field correction, brain extraction, nonlinear 
registration to a template, and 3-class segmentation.

${CYA}Minimal+${LGR}
Includes bias field correction, brain extraction, nonlinear 
registration to a template, and 6-class prior-driven segmentation.

${CYA}ANTsCT${LGR}
Includes the standard ANTs Cortical Thickness pipeline, which 
integrates bias field correction, brain extraction, nonlinear 
registration to a template, 6-class prior-driven segmentation, and 
an estimate of cortical thickness.

${CYA}Complete${LGR}
Includes the complete ANTsCT pipeline as well as grey matter 
density estimation, and regional quantification. ${CYA}If you are 
not sure what option to select, this is appropriate for most needs.

${CYA}Complete+${LGR}
Includes the complete ANTsCT pipeline, estimation of grey matter 
density, generation of a subject-specific structural atlas via 
ANTs Joint Label Fusion, and regional quantification. Joint Label 
Fusion is a computationally intensive process and is not 
recommended without extensive computational resources.

${CYA}Experimental${LGR}
Includes the entire anatomical data processing stream: ANTsCT, grey 
matter density, JLF, and regional quantification. Also includes a 
number of experimental metrics: cortical contrast and sulcal depth.${RCL}

${CYA}Registration only${LGR}
Only computes registration using ANTs. Assumes that other
anatomical processing has been completed in another program.${RCL}"

   TEXT_CLOSE="Design configuration complete: ${CYA}anatomical${RCL}"
   
   TEXT_RETURN="${TEXT_HEAD}${TEXT_INFO_MAIN}${TEXT_TAIL}"
}










###################################################################
# Execute
###################################################################
main() {
   open
   menu
   close
}

main
