#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################


###################################################################
# Р Ћ 2017
###################################################################
<< CONFIG_UI

 config_ui provides a minimal user interface for multimodal
 pipeline configuration. This is the single-modal configuration
 script for functional connectivity processing.

CONFIG_UI
###################################################################
declare  -A fc
source   ${XCPEDIR}/core/constants
source   ${XCPEDIR}/core/functions/library.sh
source   ${XCPEDIR}/core/functions/cluster_submit

source   ${XCPEDIR}/core/config/common.cfg
source   ${XCPEDIR}/core/config/space.cfg










###################################################################
# On script open
###################################################################
open() {

config_common
string_setup
fc[confound]=36P
fc[censor]=Despike
fc[filter_hp]=0.01
fc[filter_lp]=0.08
fc[smooth]=6
fc[seed]=None
fc[coreg]=Mean
fc[regress]=BP-REG
fc[remask]=False
fc[space]="MNI via OASIS"
echo -e "${TEXT_RETURN}"

}










###################################################################
# On script close
###################################################################
close() {

echo -e "${TEXT_HEAD}${TEXT_CLOSE}${TEXT_TAIL}"

}










###################################################################
# Main menu
###################################################################
refresh_menu() {
   options=(
      
      [1]="Denoising stream                  ${fc[confound]} model"
      [2]="Censor                            ${fc[censor]}"
      [3]="Temporal filter                   ${fc[filter_hp]}-${fc[filter_lp]} Hz"
      [4]="Spatial filter                    ${fc[smooth]} mm FWHM"
      [5]="Seed-based analysis               ${fc[seed]}"
      [6]="Coregistration source             ${fc[coreg]} image"
      [7]="Regression/filtering order        ${fc[regress]}"
      [8]="Remask                            ${fc[remask]}"
      [9]="Standard space                    ${fc[space]}"
     [10]="Finalise pipeline"
      
   )
}
menu() {

   local REPLY
   local options
   
   local response=(
      
      [1]="${TEXT_HEAD}${TEXT_SELECT_CONFOUND}${TEXT_TAIL}"
      [2]="${TEXT_HEAD}${TEXT_SELECT_CENSOR}${TEXT_TAIL}"
      [3]="${TEXT_HEAD}${TEXT_SELECT_FILTER}${TEXT_TAIL}"
      [4]="${TEXT_HEAD}${TEXT_SELECT_SMOOTH}${TEXT_TAIL}"
      [5]="${TEXT_HEAD}${TEXT_SELECT_SEED}${TEXT_TAIL}"
      [6]="${TEXT_HEAD}${TEXT_SELECT_COREG}${TEXT_TAIL}"
      [7]="${TEXT_HEAD}${TEXT_SELECT_REGRESS}${TEXT_TAIL}"
      [8]="${TEXT_HEAD}${TEXT_SELECT_REMASK}${TEXT_TAIL}"
      [9]="${TEXT_HEAD}${TEXT_SELECT_SPACE}${TEXT_TAIL}"
     [10]=""
      [0]="${TEXT_RETURN}"
     [99]="Exiting"
      
   )
   
   local cmd=(
   
      [1]="menu_confound"
      [2]="menu_censor"
      [3]="menu_filter"
      [4]="menu_smooth"
      [5]="menu_seed"
      [6]="menu_coreg"
      [7]="menu_regress"
      [8]="menu_remask"
      [9]="menu_space fc[space]"
     [10]="fc_design_build"
     [99]="exit"
   
   )
   
   while true
   
   do refresh_menu
   select option in "${options[@]}" "Exit without saving"
   
   do case $REPLY in
   
   1 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; break;;
   2 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; break;;
   3 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; break;;
   4 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; break;;
   5 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; break;;
   6 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; break;;
   7 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; break;;
   8 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; break;;
   9 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; break;;
   10) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   11) echo -e "${response[99]}";    eval ${cmd[99]};;
   * ) echo -e "${response[0]}";     eval ${cmd[0]};;
   
   esac; done; done

}










###################################################################
# Confound model selection
###################################################################
menu_confound() {

   local REPLY
   local options=(
   
      [1]="36P"
      [2]="24P"
      [3]="ICA-AROMA"
      [4]="ICA-AROMA+GSR"
      [5]="aCompCor50"
      [6]="aCompCor50+GSR"
   
   )
   
   local response=(
   
      [1]="${TEXT_HEAD}${TEXT_SELECT_CONFOUND_36P}${TEXT_TAIL}${TEXT_RETURN}"
      [2]="${TEXT_HEAD}${TEXT_SELECT_CONFOUND_24P}${TEXT_TAIL}${TEXT_RETURN}"
      [3]="${TEXT_HEAD}${TEXT_SELECT_CONFOUND_AROMA}${TEXT_TAIL}${TEXT_RETURN}"
      [4]="${TEXT_HEAD}${TEXT_SELECT_CONFOUND_AROMA_GSR}${TEXT_TAIL}${TEXT_RETURN}"
      [5]="${TEXT_HEAD}${TEXT_SELECT_CONFOUND_ACOMPCOR}${TEXT_TAIL}${TEXT_RETURN}"
      [6]="${TEXT_HEAD}${TEXT_SELECT_CONFOUND_ACOMPCOR_GSR}${TEXT_TAIL}${TEXT_RETURN}"
      [0]="${TEXT_HEAD}${TEXT_INFO_CONFOUND}${TEXT_TAIL}${TEXT_HEAD}${TEXT_SELECT_CONFOUND}${TEXT_TAIL}"
   
   )
   
   local cmd=(
   
      [1]="fc[confound]=${options[1]}"
      [2]="fc[confound]=${options[2]}"
      [3]="fc[confound]=${options[3]}"
      [4]="fc[confound]=${options[4]}"
      [5]="fc[confound]=${options[5]}"
      [6]="fc[confound]=${options[6]}"
   
   )
   
   while true
   
   do select option in "${options[@]}"
   
   do case $REPLY in
   
   1 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   2 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   3 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   4 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   5 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   6 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   * ) echo -e "${response[0]}";     eval ${cmd[0]};     break;;
   
   esac; done; done

}










###################################################################
# Framewise censoring
###################################################################
menu_censor() {

   local REPLY
   local options=(
      
      [1]="None"
      [2]="Despike"
      [3]="Censor"
      
   )
   
   local response=(
      
      [1]="${TEXT_HEAD}${TEXT_SELECT_CENSOR_NONE}${TEXT_TAIL}${TEXT_RETURN}"
      [2]="${TEXT_HEAD}${TEXT_SELECT_CENSOR_DESPIKE}${TEXT_TAIL}${TEXT_RETURN}"
      [3]="${TEXT_HEAD}${TEXT_SELECT_CENSOR_SCRUB}${TEXT_TAIL}${TEXT_RETURN}"
      [0]="${TEXT_HEAD}${TEXT_INFO_CENSOR}${TEXT_TAIL}${TEXT_HEAD}${TEXT_SELECT_CENSOR}${TEXT_TAIL}"
      
   )
   
   local cmd=(
   
      [1]="fc[censor]=${options[1]}"
      [2]="fc[censor]=${options[2]}"
      [3]="fc[censor]=${options[3]}"
   
   )
   
   while true
   
   do select option in "${options[@]}"
   
   do case $REPLY in
   
   1 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   2 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   3 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   * ) echo -e "${response[0]}";     eval ${cmd[0]};     break;;
   
   esac; done; done

}










###################################################################
# Filtering
###################################################################
refresh_menu_filter() {
   string_setup
   options=(
   
      [1]="High-pass frequency         ${fc[filter_hp]} Hz"
      [2]="Low-pass frequency          ${fc[filter_lp]} Hz"
      [3]="Accept filter settings"
   
   )
   response=(
   
      [1]="${TEXT_HEAD}${TEXT_SELECT_FILTER_HP}${TEXT_TAIL}"
      [2]="${TEXT_HEAD}${TEXT_SELECT_FILTER_LP}${TEXT_TAIL}"
      [3]="${TEXT_HEAD}${TEXT_SELECT_FILTER_RETURN}${TEXT_TAIL}${TEXT_RETURN}"
      [0]="${TEXT_HEAD}${TEXT_INFO_FILTER}${TEXT_TAIL}${TEXT_HEAD}${TEXT_SELECT_FILTER}${TEXT_TAIL}"
   
   )
}
refresh_menu_filter_hp() {
   string_setup
   response=(
      [0]="${TEXT_HEAD}${TEXT_INFO_FILTER_HP}${TEXT_TAIL}${TEXT_HEAD}${TEXT_SELECT_FILTER_HP}${TEXT_TAIL}"
      [1]="${TEXT_HEAD}${TEXT_SELECT_FILTER_HP_NUMERIC}${TEXT_TAIL}${TEXT_HEAD}${TEXT_SELECT_FILTER}${TEXT_TAIL}"
   )
}
refresh_menu_filter_lp() {
   string_setup
   response=(
      [0]="${TEXT_HEAD}${TEXT_INFO_FILTER_LP}${TEXT_TAIL}${TEXT_HEAD}${TEXT_SELECT_FILTER_LP}${TEXT_TAIL}"
      [1]="${TEXT_HEAD}${TEXT_SELECT_FILTER_LP_NUMERIC}${TEXT_TAIL}${TEXT_HEAD}${TEXT_SELECT_FILTER}${TEXT_TAIL}"
      [2]="${TEXT_HEAD}${TEXT_SELECT_FILTER_LP_NYQUIST}${TEXT_TAIL}${TEXT_HEAD}${TEXT_SELECT_FILTER}${TEXT_TAIL}"
   )
}
menu_filter_hp() {

   local REPLY
   local response
   refresh_menu_filter_hp
   
   while true
      do
      read -p "" -e -i ${fc[filter_hp]} REPLY
      
      if is+numeric ${REPLY}
         then
         fc[filter_hp]=${REPLY}
         refresh_menu_filter_hp
         echo -e "${response[1]}"
         return
         
      else
         echo -e "${response[0]}"
      fi
      
   done
   
}
menu_filter_lp() {

   local REPLY
   local response
   refresh_menu_filter_lp
   
   while true
      do
      read -p "" -e -i ${fc[filter_lp]} REPLY
      
      if is+numeric ${REPLY}
         then
         fc[filter_lp]=${REPLY}
         refresh_menu_filter_lp
         echo -e "${response[1]}"
         return
         
      elif [[ ${REPLY} == nyquist ]] \
      ||   [[ ${REPLY} == Nyquist ]] \
      ||   [[ ${REPLY} == n       ]] \
      ||   [[ ${REPLY} == N       ]]
         then
         fc[filter_lp]=Nyquist
         refresh_menu_filter_lp
         echo -e "${response[2]}"
         return
         
      else
         echo -e "${response[0]}"
      fi
      
   done
   
}
menu_filter() {

   local REPLY
   local options
   local response
   
   local cmd=(
   
      [1]="menu_filter_hp"
      [2]="menu_filter_lp"
      [3]="return"
   
   )
   
   while true
   
   do refresh_menu_filter
   select option in "${options[@]}"
   
   do case $REPLY in
   
   1 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; break;;
   2 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; break;;
   3 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; break;;
   * ) echo -e "${response[0]}";     eval ${cmd[0]};     break;;
   
   esac; done; done

}










###################################################################
# Spatial smoothing
###################################################################
refresh_menu_smooth() {
   string_setup
   response=(
      [0]="${TEXT_HEAD}${TEXT_INFO_SMOOTH}${TEXT_TAIL}${TEXT_HEAD}${TEXT_SELECT_SMOOTH}${TEXT_TAIL}"
      [1]="${TEXT_HEAD}${TEXT_SELECT_SMOOTH_NUMERIC}${TEXT_TAIL}${TEXT_RETURN}"
   )
}
menu_smooth() {

   local REPLY
   local response
   refresh_menu_smooth
   
   while true
      do
      read -p "" -e -i ${fc[smooth]} REPLY
      if is+numeric ${REPLY}
         then
         fc[smooth]=${REPLY}
         refresh_menu_smooth
         echo -e "${response[1]}"
         return
      else
         echo -e "${response[0]}"
      fi
   done
   
}










###################################################################
# Seed-based correlation analysis
###################################################################
refresh_menu_seed() {
   string_setup
   response=(
      [0]="${TEXT_HEAD}${TEXT_INFO_SEED}${TEXT_TAIL}${TEXT_HEAD}${TEXT_SELECT_SEED}${TEXT_TAIL}"
      [1]="${TEXT_HEAD}${TEXT_SELECT_SEED_FILE}${TEXT_TAIL}${TEXT_RETURN}"
      [2]="${TEXT_HEAD}${TEXT_SELECT_SEED_NONE}${TEXT_TAIL}${TEXT_RETURN}"
   )
}
menu_seed() {

   local REPLY
   local response
   refresh_menu_seed
   
   while true
      do
      read -p "" -e -i ${fc[seed]} REPLY
      if [[ -s ${REPLY} ]]
         then
         fc[seed]=${REPLY}
         refresh_menu_seed
         echo -e "${response[1]}"
         return
      elif [[ ${REPLY} == None ]] \
      ||   [[ ${REPLY} == none ]] \
      ||   [[ ${REPLY} == N    ]] \
      ||   [[ ${REPLY} == n    ]] \
      ||   (( ${REPLY} == 0    ))
         then
         fc[seed]=None
         refresh_menu_seed
         echo -e "${response[2]}"
         return
      else
         echo -e "${response[0]}"
      fi
   done

}










###################################################################
# Coregistration source
###################################################################
menu_coreg() {

   local REPLY
   local options=(
      
      [1]="Mean"
      [2]="Exemplar"
      
   )
   
   local response=(
      
      [1]="${TEXT_HEAD}${TEXT_SELECT_COREG_MEAN}${TEXT_TAIL}${TEXT_RETURN}"
      [2]="${TEXT_HEAD}${TEXT_SELECT_COREG_EXEMPLAR}${TEXT_TAIL}${TEXT_RETURN}"
      [0]="${TEXT_HEAD}${TEXT_INFO_COREG}${TEXT_TAIL}${TEXT_HEAD}${TEXT_SELECT_COREG}${TEXT_TAIL}"
      
   )
   
   local cmd=(
   
      [1]="fc[coreg]=${options[1]}"
      [2]="fc[coreg]=${options[2]}"
   
   )
   
   while true
   
   do select option in "${options[@]}"
   
   do case $REPLY in
   
   1 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   2 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   * ) echo -e "${response[0]}";     eval ${cmd[0]};     break;;
   
   esac; done; done

}










###################################################################
# Regression / filtering order
###################################################################
menu_regress() {

   local REPLY
   local options=(
      
      [1]="BP-REG"
      [2]="REG-BP"
      
   )
   
   local response=(
      
      [1]="${TEXT_HEAD}${TEXT_SELECT_REGRESS_BPREG}${TEXT_TAIL}${TEXT_RETURN}"
      [2]="${TEXT_HEAD}${TEXT_SELECT_REGRESS_REGBP}${TEXT_TAIL}${TEXT_RETURN}"
      [0]="${TEXT_HEAD}${TEXT_INFO_REGRESS}${TEXT_TAIL}${TEXT_HEAD}${TEXT_SELECT_REGRESS}${TEXT_TAIL}"
      
   )
   
   local cmd=(
   
      [1]="fc[regress]=${options[1]}"
      [2]="fc[regress]=${options[2]}"
   
   )
   
   while true
   
   do select option in "${options[@]}"
   
   do case $REPLY in
   
   1 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   2 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   * ) echo -e "${response[0]}";     eval ${cmd[0]};     break;;
   
   esac; done; done

}










###################################################################
# Remask
###################################################################
menu_remask() {

   local REPLY
   local options=(
      
      [1]="True"
      [2]="False"
      
   )
   
   local response=(
      
      [1]="${TEXT_HEAD}${TEXT_SELECT_REMASK_TRUE}${TEXT_TAIL}${TEXT_RETURN}"
      [2]="${TEXT_HEAD}${TEXT_SELECT_REMASK_FALSE}${TEXT_TAIL}${TEXT_RETURN}"
      [0]="${TEXT_HEAD}${TEXT_INFO_REMASK}${TEXT_TAIL}${TEXT_HEAD}${TEXT_SELECT_REMASK}${TEXT_TAIL}"
      
   )
   
   local cmd=(
   
      [1]="fc[remask]=${options[1]}"
      [2]="fc[remask]=${options[2]}"
   
   )
   
   while true
   
   do select option in "${options[@]}"
   
   do case $REPLY in
   
   1 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   2 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   * ) echo -e "${response[0]}";     eval ${cmd[0]};     break;;
   
   esac; done; done

}










###################################################################
# Build the design file.
###################################################################
fc_design_build() {

   local design_new=fc-${fc[confound]}_$(date +%Y%m%d%H%M).dsn
   local design
   local fc_design
   local space
   local l
   local line
   local exp
   local REPLY
   local response
   
   local prepstream1=DVO-MPR-STM-MCO-BXT
   local prepstream2=-DMT

   case ${fc[confound]} in

   36P)
      design=${XCPEDIR}/designs/fc-36P.dsn
      ;;
   24P)
      design=${XCPEDIR}/designs/fc-24P.dsn
      ;;
   ICA-AROMA)
      design=${XCPEDIR}/designs/fc-aroma.dsn
      unset prepstream2
      ;;
   ICA-AROMA+GSR)
      design=${XCPEDIR}/designs/fc-aroma+gsr.dsn
      unset prepstream2
      ;;
   aCompCor50)
      design=${XCPEDIR}/designs/fc-acompcor50.dsn
      ;;
   aCompCor50+GSR)
      design=${XCPEDIR}/designs/fc-acompcor50+gsr.dsn
      ;;

   esac
   
   ################################################################
   # Translate variables: fc[censor]
   ################################################################
   case ${fc[censor]} in
   
   None)
      fc[censor]=0
      fc[despike]=${prepstream1}${prepstream2}
      ;;
   Despike)
      fc[censor]=0
      fc[despike]=${prepstream1}-DSP${prepstream2}
      ;;
   Censor)
      fc[censor]=1
      fc[despike]=${prepstream1}${prepstream2}
      ;;
   
   esac
   
   ################################################################
   # Translate variables: fc[seed]
   ################################################################
   [[ ${fc[seed]} == None ]] && fc[seed]=''
   
   ################################################################
   # Translate variables: fc[coreg]
   ################################################################
   fc[coreg]=${fc[coreg],,}
   
   ################################################################
   # Translate variables: fc[regress]
   ################################################################
   case ${fc[regress]} in
   
   BP-REG)
      fc[regress]=TMP-REG
      ;;
   REG-BP)
      fc[regress]=REG-TMP
      ;;
   
   esac
   
   ################################################################
   # Translate variables: fc[remask]
   ################################################################
   case ${fc[remask]} in
   
   True )
      fc[remask]=1
      ;;
   False)
      fc[remask]=0
      ;;
   
   esac
   
   ################################################################
   # Translate variables: fc[space]
   ################################################################
   translate_space fc[space]

   ################################################################
   # Rebuild the design with the correct variables.
   ################################################################
   mapfile fc_design < ${design}

   for l in ${!fc_design[@]}
      do
      line="${fc_design[l]}"
      [[ -z $(echo ${line}) ]]   && continue

      chk_CMT=( "${line}"           '^#'                    )
      chk_CEN=( "${line}"           '^prestats_censor\['    )
      chk_DSP=( "${line}"           '^prestats_process\['   )
      chk_FHP=( "${line}"           '^regress_hipass\['     )
      chk_FLP=( "${line}"           '^regress_lopass\['     )
      chk_AHP=( "${line}"           '^alff_hipass\['        )
      chk_ALP=( "${line}"           '^alff_lopass\['        )
      chk_SMO=( "${line}"           '^regress_smo\['        )
      chk_SMR=( "${line}"           '^reho_smo\['           )
      chk_SMA=( "${line}"           '^alff_smo\['           )
      chk_SMS=( "${line}"           '^seed_smo\['           )
      chk_SCA=( "${line}"           '^seed_lib\['           )
      chk_COR=( "${line}"           '^coreg_reference\['    )
      chk_REG=( "${line}"           '^regress_process\['    )
      chk_MSK=( "${line}"           '^coreg_mask\['         )
      chk_SPC=( "${line}"           '^standard='            )
      
      contains "${chk_CMT[@]}"                              \
               && continue
      contains "${chk_CEN[@]}"                              \
               && exp=$(strslice ${fc_design[l]} 1 =)       \
               && fc_design[l]="${exp}=${fc[censor]}\n"     \
               && continue
      contains "${chk_DSP[@]}"                              \
               && exp=$(strslice ${fc_design[l]} 1 =)       \
               && fc_design[l]="${exp}=${fc[despike]}\n"    \
               && continue
      contains "${chk_FHP[@]}"                              \
               && exp=$(strslice ${fc_design[l]} 1 =)       \
               && fc_design[l]="${exp}=${fc[filter_hp]}\n"  \
               && continue
      contains "${chk_FLP[@]}"                              \
               && exp=$(strslice ${fc_design[l]} 1 =)       \
               && fc_design[l]="${exp}=${fc[filter_lp]}\n"  \
               && continue
      contains "${chk_AHP[@]}"                              \
               && exp=$(strslice ${fc_design[l]} 1 =)       \
               && fc_design[l]="${exp}=${fc[filter_hp]}\n"  \
               && continue
      contains "${chk_ALP[@]}"                              \
               && exp=$(strslice ${fc_design[l]} 1 =)       \
               && fc_design[l]="${exp}=${fc[filter_lp]}\n"  \
               && continue
      contains "${chk_SMO[@]}"                              \
               && exp=$(strslice ${fc_design[l]} 1 =)       \
               && fc_design[l]="${exp}=${fc[smooth]}\n"     \
               && continue
      contains "${chk_SMR[@]}"                              \
               && exp=$(strslice ${fc_design[l]} 1 =)       \
               && fc_design[l]="${exp}=${fc[smooth]}\n"     \
               && continue
      contains "${chk_SMA[@]}"                              \
               && exp=$(strslice ${fc_design[l]} 1 =)       \
               && fc_design[l]="${exp}=${fc[smooth]}\n"     \
               && continue
      contains "${chk_SMS[@]}"                              \
               && exp=$(strslice ${fc_design[l]} 1 =)       \
               && fc_design[l]="${exp}=${fc[smooth]}\n"     \
               && continue
      contains "${chk_SCA[@]}"                              \
               && exp=$(strslice ${fc_design[l]} 1 =)       \
               && fc_design[l]="${exp}=${fc[seed]}\n"       \
               && continue
      contains "${chk_COR[@]}"                              \
               && exp=$(strslice ${fc_design[l]} 1 =)       \
               && fc_design[l]="${exp}=${fc[coreg]}\n"      \
               && continue
      contains "${chk_REG[@]}"                              \
               && exp=$(strslice ${fc_design[l]} 1 =)       \
               && fc_design[l]="${exp}=${fc[regress]}\n"    \
               && continue
      contains "${chk_MSK[@]}"                              \
               && exp=$(strslice ${fc_design[l]} 1 =)       \
               && fc_design[l]="${exp}=${fc[remask]}\n"     \
               && continue
      contains "${chk_SPC[@]}"                              \
               && exp=$(strslice ${fc_design[l]} 1 =)       \
               && fc_design[l]="${exp}=${fc[space]}\n"      \
               && continue

   done

   ################################################################
   # Write the design file.
   ################################################################
   response=(
   
      [0]="${TEXT_HEAD}${TEXT_SELECT_DESIGN}${TEXT_TAIL}"
   
   )
   while true
      do echo    -e   "${response[0]}"
      read -p "" -e -i ${design_new} REPLY
      touch    ${REPLY} 2>/dev/null
      if [[ -f ${REPLY} ]]
         then
         design_new=$(abspath ${REPLY})
         config_common
         response=(
         
            [1]="${TEXT_HEAD}${TEXT_SELECT_DESIGN_FILE}${TEXT_TAIL}"
         
         )
         echo -e "${response[1]}"
         break
      fi
   done
   printf      '%b' "${fc_design[@]}"             >  ${design_new}
   
   return

}









###################################################################
# Define text
# string_response and string_info are NOT used at this time.
###################################################################
string_setup() {

   string_setup_space

   TEXT_SELECT_CONFOUND=\
"Select a denoising stream."
   
   TEXT_SELECT_CONFOUND_36P=\
"${CYA}36-parameter model selected.${RCL}

Includes 6 head motion parameters, mean white matter and CSF signal,
mean global signal, 9 temporal derivatives, and 18 quadratic terms."
   
   TEXT_SELECT_CONFOUND_24P=\
"${CYA}24-parameter model selected.${RCL}

Includes 6 head motion parameters, 6 temporal derivatives, and 12 
quadratic terms.

${RED}WARNING: Current evidence indicates that the 24-parameter 
model is ineffective and insufficient for denoising purposes. Its 
use is advised against.${RCL}"
   
   TEXT_SELECT_CONFOUND_AROMA=\
"${CYA}ICA-AROMA model selected.${RCL}

Includes IC signals classified as noise and mean signal from white 
matter and CSF."
   
   TEXT_SELECT_CONFOUND_AROMA_GSR=\
"${CYA}ICA-AROMA+GSR model selected.${RCL}

Includes IC signals classified as noise, mean white matter and CSF 
signal, and mean global signal."
   
   TEXT_SELECT_CONFOUND_ACOMPCOR=\
"${CYA}aCompCor50 model selected.${RCL}

Includes 6 head motion parameters and principal component signals 
from white matter and CSF sufficient to explain 50 percent of 
compartment variance."
   
   TEXT_SELECT_CONFOUND_ACOMPCOR_GSR=\
"${CYA}aCompCor50+GSR model selected.${RCL}

Includes 6 head motion parameters, mean global signal, and 
principal component signals from white matter and CSF sufficient to 
explain 50 percent of compartment variance."
   
   TEXT_SELECT_CENSOR=\
"Select a censor setting."
   
   TEXT_SELECT_CENSOR_NONE=\
"${CYA}Censoring disabled.${RCL}

No censoring or interpolation will be performed."
   
   TEXT_SELECT_CENSOR_SCRUB=\
"${CYA}Censoring enabled.${RCL}

Framewise censoring identifies volumes that are likely to be
contaminated by artefact -- for instance, those with high subject
movement -- and removes those volumes from the data."
   
   TEXT_SELECT_CENSOR_DESPIKE=\
"${CYA}Despiking enabled.${RCL}

Despiking is a spatially adaptive framewise censoring strategy
that identifies signal outliers in voxelwise data and interpolates
over those outlying values."

   TEXT_SELECT_FILTER=\
"Specify the passband for the temporal filter."

   TEXT_SELECT_FILTER_HP=\
"Specify the high-pass frequency cutoff for the temporal filter."

   TEXT_SELECT_FILTER_LP=\
"Specify the low-pass frequency cutoff for the temporal filter."
   
   TEXT_SELECT_FILTER_HP_NUMERIC=\
"${CYA}High-pass cutoff: ${fc[filter_hp]} Hz${RCL}"
   
   TEXT_SELECT_FILTER_LP_NUMERIC=\
"${CYA}Low-pass cutoff: ${fc[filter_lp]} Hz${RCL}"
   
   TEXT_SELECT_FILTER_LP_NYQUIST=\
"${CYA}Low-pass cutoff: Nyquist frequency${RCL}

Low-pass filtering has been disabled."
   
   TEXT_SELECT_FILTER_RETURN=\
"${CYA}Filter pass-band: ${fc[filter_hp]} - ${fc[filter_lp]} Hz${RCL}"   
   
   TEXT_SELECT_SMOOTH=\
"Specify the kernel FWHM for spatial smoothing."

   TEXT_SELECT_SMOOTH_NUMERIC=\
"${CYA}Smoothing kernel: ${fc[smooth]} mm FWHM${RCL}"

   TEXT_SELECT_SEED=\
"Add a spatial coordinates library for seed-based correlation
analysis."

   TEXT_SELECT_SEED_FILE=\
"${CYA}Spatial library loaded: ${fc[seed]}${RCL}"

   TEXT_SELECT_SEED_NONE=\
"${CYA}Seed-based correlation analysis disabled.${RCL}"

   TEXT_SELECT_COREG=\
"Specify the functional image that should be coregistered to the
anatomical reference."

   TEXT_SELECT_COREG_MEAN=\
"${CYA}Coregistering mean functional image${RCL}"

   TEXT_SELECT_COREG_EXEMPLAR=\
"${CYA}Coregistering representative functional image${RCL}"

   TEXT_SELECT_REGRESS=\
"Specify whether filtering or regression should be performed first."

   TEXT_SELECT_REGRESS_BPREG=\
"${CYA}Band-pass filtering image and confounds before confound 
regression.${RCL}"

   TEXT_SELECT_REGRESS_REGBP=\
"${CYA}Performing confound regression before band-pass filtering 
residuals.${RCL}"

   TEXT_SELECT_REMASK=\
"Specify whether the anatomical image should be used to refine the
image mask after coregistration."

   TEXT_SELECT_REMASK_TRUE=\
"${CYA}Remasking functional image using anatomical envelope.${RCL}"

   TEXT_SELECT_REMASK_FALSE=\
"${CYA}Retaining original functional mask.${RCL}"

   TEXT_INFO_MAIN=\
"   Modality: ${CYA}functional connectivity${RCL}.
   Select a menu item by entering the associated numeral, or 
   finalise your pipeline."

   TEXT_INFO_CONFOUND=\
"Select an option by entering the associated numeral.

${CYA}DENOISING STREAM${LGR}
Subject movement introduces a substantial amount of spurious 
variance into the BOLD signal; if data processing fails to account
for the influence of motion-related variance, then artefact may
subsequently be misconstrued as effect of interest. Accordingly,
a number of high-performing processing streams for removing
motion artefact are made available:

${CYA}36-parameter model${LGR}
Includes 6 head motion parameters, mean white matter and CSF signal,
mean global signal, 9 temporal derivatives, and 18 quadratic terms.

${CYA}24-parameter model${LGR}
Includes 6 head motion parameters, 6 temporal derivatives, and 12 
quadratic terms. ${RED}Use of the 24-parameter model is strongly 
discouraged, as it has been shown to perform poorly.

${CYA}ICA-AROMA${LGR}
Includes IC signals classified as noise and mean signal from white 
matter and CSF.

${CYA}ICA-AROMA+GSR${LGR}
Includes IC signals classified as noise, mean white matter and CSF 
signal, and mean global signal.

${CYA}aCompCor50${LGR}
Includes 6 head motion parameters and principal component signals 
from white matter and CSF sufficient to explain 50 percent of 
compartment variance.

${CYA}aCompCor50+GSR${LGR}
Includes 6 head motion parameters, mean global signal, and 
principal component signals from white matter and CSF sufficient to 
explain 50 percent of compartment variance.${RCL}"

   TEXT_INFO_CENSOR=\
"Select an option by entering the associated numeral.

${CYA}CENSOR${LGR}
Artefactual variance can contaminate time points to such an extent
that they become dominated by noise, and the overall signal-to-
noise ratio of the data can be improved by interpolating over those 
time points or discarding them altogether. Two options for
'censoring' data in this way are made available.

${CYA}Censoring${LGR}
Framewise censoring identifies volumes that are likely to be
contaminated by artefact -- for instance, those with high subject
movement -- and removes those volumes from the data. 

We implement censoring using an iterative approach: a temporal mask 
is used to exclude motion-contaminated volumes at every stage of 
the analysis, including detrending and temporal filtering. At the 
filtering stage, we generate surrogate data with the same spectral 
character as the unflagged data. Finally, we include spike 
regressors in the final confound regression step and discard all 
flagged volumes.

Censoring settings will flag any volumes that exceed either of 
the following thresholds:
Relative RMS displacement              > 0.05 mm / s
Standardised DVARS                     > 1.5

${CYA}Despiking${LGR}
Despiking is a spatially adaptive framewise censoring strategy
that identifies signal outliers in voxelwise data and interpolates
over those outlying values. Despiking is implemented as in AFNI's
3dDespike.

${RED}Note that framewise censoring can disrupt the autocorrelation
structure inherent in the data. Thus, it may not be suitable for
applications where autocorrelation structure is important, such as
dynamic assessments of functional connectivity.${RCL}"

   TEXT_INFO_FILTER=\
"${CYA}TEMPORAL BAND-PASS FILTER${LGR}

The temporal filter removes or retains signal in the data on the 
basis of its frequency. Because both high-frequency and very-low-
frequency bands are susceptible to artefact, a band-pass filter
is often applied in analyses of functional connectivity. A band-
pass filter retains a specified frequency band: frequencies that 
are both above the high-pass cutoff and below the low-pass cutoff
frequency are retained, while others are discarded.

${CYA}Low-pass frequency cutoff${LGR}
Functional connectivity between regions of interest is typically 
determined on the basis of synchrony in low-frequency fluctuations 
(Biswal et al., 1995); therefore, removing such frequencies may 
effectively remove noise from the timeseries while retaining 
signal of interest. For a contrasting view, see Boubela et al. 
(2013).

${CYA}High-pass frequency cutoff${LGR}
High-pass filters can be used to remove very-low-frequency drift 
from an acquisition; this drift is typically attributable to 
scanner noise.

${RED}If you are computing connectivity using a wavelet coherence
approach, it is then possible that you will want to retain all
frequencies of signal.${LGR} In this case, disable the temporal filter
by setting the high-pass cutoff to 0 and the low-pass cutoff to
the Nyquist frequency.${RCL}"

   TEXT_INFO_FILTER_HP=\
"${CYA}HIGH-PASS FREQUENCY CUTOFF${LGR}
High-pass filters can be used to remove very-low-frequency drift 
from an acquisition; this drift is typically attributable to 
scanner noise.

To disable high-pass filtering, set the frequency cutoff to 0. This
will permit all low frequencies to pass. To permit all frequencies
to pass, disable both high-pass and low-pass filtering.${RCL}"

   TEXT_INFO_FILTER_LP=\
"${CYA}Low-pass frequency cutoff${LGR}
Functional connectivity between regions of interest is typically 
determined on the basis of synchrony in low-frequency fluctuations 
(Biswal et al., 1995); therefore, removing such frequencies may 
effectively remove noise from the timeseries while retaining 
signal of interest. For a contrasting view, see Boubela et al. 
(2013).

To disable high-pass filtering, set the frequency cutoff to 
Nyquist ${RED}(n)${LGR}. This will permit all low frequencies to pass. To permit 
all frequencies to pass, disable both high-pass and low-pass 
filtering.${RCL}"
   
   TEXT_INFO_SMOOTH=\
"Enter a non-negative number. Enter 0 for no filter.

${CYA}SPATIAL SMOOTHING${LGR}
Endemic noise, for instance due to physiological signals or scanner 
activity, can introduce spurious or artefactual results in single 
voxels. The effects of noise-related artefacts can be mitigated by 
spatially filtering the data, thus dramatically increasing the 
signal-to-noise ratio. However, spatial smoothing is not without 
its costs: it effectively reduces volumetric resolution by blurring 
signals from adjacent voxels.

Filtering is implemented using the SUSAN algorithm to minimise
blurring across tissue boundaries. The smoothing kernel is 
Gaussian-weighted and expressed in units of mm full-width at half
maximum.

If smoothing is performed, the smoothed image does not replace the
primary image. Instead, the processing stream generates a smoothed 
derivative of the primary image and only uses it when appropriate. 
For instance, the smoothed image will not be used to extract time 
series or to compute regional homogeneity maps, but will be used to 
compute correlation maps.${RCL}"
   
   TEXT_INFO_SEED=\
"Enter a path to a spatial coordinates library (.sclib) file. To 
disable seed-based correlation analysis, enter '0' or 'None'.

${CYA}SEED-BASED CORRELATION ANALYSIS${LGR}
Seed-based correlation analysis is a hypothesis-driven approach to
functional connectivity, wherein we compute the voxelwise 
connectivity to an a priori defined seed region or set of seed 
regions. For each seed region, which may be provided either as a 3D 
volume or as coordinates in a library file, the pipeline aligns the 
seed coordinates into subject space and then computes the pairwise 
connectivity between each voxel and the seed region, for instance 
using the Pearson correlation coefficient between timeseries.

The processing stream currently organises seed-based correlation 
analyses using sclib files, in which each row corresponds to a 
different seed. Spherical seeds can be dynamically generated from 
coordinates if they are specified as follows:

#seed_name#seed_x_coor,seed_y_coor,seed_z_coor#sphere_radius

Alternatively, static seeds can be registered to the image if they 
are specified as follows:

#seed_name#path_to_NIfTI_containing_seed#name_of_seed_space 
(e.g., MNI)${RCL}

To disable seed-based correlation analysis, enter '0' or 'None'."
   
   TEXT_INFO_COREG=\
"Select an option by entering the associated numeral.

${CYA}COREGISTRATION SOURCE${LGR}
Coregistration is the mapping of a transform between the subject's 
functional image and a high-resolution image of the same subject's 
brain, for instance a T1 or T2 anatomical scan. Because a 
functional acquisition includes a time series of scans of the same 
brain, a single image representative of the time series is used to 
compute this map.

${CYA}Mean volume${LGR}
The mean volume is generated by aligning all of the subject's 
functional volumes and then computing the average over all of them. 
When the contrast between white and grey matter is poor, as it 
often is in multiband acquisitions, coregistration to a mean 
volume may improve outcome in comparison with registration to a
single representative volume.

${CYA}Exemplar / representative volume${LGR}
A single exemplar volume is selected by computing the framewise 
movement of the subject and then selecting the scan acquired 
when the measured movement is at a minimum.${RCL}"

   TEXT_INFO_REGRESS=\
"Select an option by entering the associated numeral.

${CYA}REGRESSION / FILTERING ORDER${LGR}
Band-pass filtering the analyte time series but not nuisance 
regressors re-introduces noise-related variance at removed 
frequencies when the time series is residualised with respect to 
the regressors via linear fit. (Our pipeline is designed so as to 
make this involuntary reintroduction of noise impossible.) Instead, 
the recommended approach is either filtering both the time series 
and the nuisance regressors immediately prior to fitting and 
residualisation ${CYA}(BP-REG, recommended)${LGR} or performing confound 
regression before applying a band-pass filter ${CYA}(REG-BP)${LGR}.${RCL}"

   TEXT_INFO_REMASK=\
"Select an option by entering the associated numeral.

${CYA}REMASK IMAGE${LGR}
It is possible to obtain a tighter fitting and more accurate brain 
mask by using the coregistered anatomical mask to remove non-brain 
voxels from the functional scan. The outcome will, however, only be 
as good as the coregistration. For the case of functional 
acquisitions that have not been corrected for distortion, use this 
option at your own peril, as there is no guarantee that the 
structural mask will correctly envelop the functional image.${RCL}"

   TEXT_CLOSE="Design configuration complete: ${CYA}functional connectivity${RCL}"
   
   TEXT_RETURN="${TEXT_HEAD}${TEXT_INFO_MAIN}${TEXT_TAIL}"
}










###################################################################
# Execute
###################################################################
main() {
   open
   menu
   close
}

main
