#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################

###################################################################
# Defines a new standard space. Wraps spaceMetadata
###################################################################

###################################################################
# Constants
###################################################################
source ${XCPEDIR}/core/constants
source ${XCPEDIR}/core/functions/library.sh
mni1='${BRAINSPACE}'/MNI/MNI-1x1x1.nii.gz
mni2='${BRAINSPACE}'/MNI/MNI-2x2x2.nii.gz
if [[ ! -s ${JQ_PATH} ]]
   then
   if [[ $(arch) == x86_64 ]]
      then
      JQ_PATH=${XCPEDIR}/thirdparty/jq/jq-linux64
   else
      JQ_PATH=${XCPEDIR}/thirdparty/jq/jq-linux32
   fi
fi

###################################################################
# Usage function
###################################################################
Usage(){
cat << endstream
___________________________________________________________________


Usage: standardSpace -s <newStandardSpace:newStandardMap> \\
                     -p <priors>                          \\
                     -x <transforms:standardToMNI>        \\
                     -i <transforms:MNIToStandard>        \\
                     <options>

Compulsory arguments:
 -s : New standard space
      The standard space to be defined. The argument should be 
      provided in the format:
      
                     spaceName:pathToImage
                              e.g.,
      MNI:${FSLDIR}/data/standard/MNI152_T1_2mm_brain.nii.gz
      
      Multiple -s arguments may be provided, in which case each 
      will be treated as a different resolution of the new standard
      space.
      
      Additional attributes may be passed to each -s argument as
      follows:
      
      spaceName:pathToImage,Mask=pathToMask,DilatedMask=pathToDilated
      
      If no attribute is specified, the attribute 'Map' will be
      assigned, denoting the map of the named space.

 -x : A comma-separated index of paths to transforms from
      the new standard space into MNI space. The transforms
      should be indexed in the order that they are applied.

 -i : A comma-separated index of paths to transforms from
      MNI space into the new standard space. The transforms
      should be indexed in the order that they are applied.
      
 -p : Priors
      A comma-separated list of prior names and anatomical priors.
      If no names are provided, then it will be assumed that priors
      are CSF,GM,WM if 3 priors are provided and CSF,GMCortical,
      WMCortical,GMDeep,Brainstem,Cerebellum if 6 priors are
      provided. Otherwise, all priors will not be marked with
      names. Priors should be passed as follows for custom naming:
      priorName1:pathToPrior1,priorName2,pathToPrior2, . . .

Optional arguments
 -c : Sample characteristics
      A csv or tab-delimited file denoting the characteristics or
      demographics of the sample used to define the standard
      space.

 -r : Reference/citation
      DOI or list of DOIs for a citation for the standard space.

 -l : License
      Path to a license for use of the standard atlas.

 -t : Trace
      If this flag is set, then any commands called by the
      standardSpace routine will be explicitly printed to the
      console or log.


endstream
}


###################################################################
# Parse arguments
###################################################################
unset        sourceSpace
declare -A   sourceSpace
arg2source() {
   sourceSpace=()
   for i in ${1//,/ }
      do
      i=( ${i//\=/ } )
      if [[ -z ${i[1]} ]]
         then
         i[1]=${i[0]}
         i[0]=Map
      fi
      sourceSpace[${i[0]}]=${i[1]}
   done
}
while getopts "s:x:i:p:c:r:t" OPTION
   do
   case $OPTION in
   s)
      template=( ${template[@]} ${OPTARG//:/ } )
      (( ${#template[@]} == 2 )) \
      && arg2source ${template[1]}
      ;;
   x)
      transforms=${OPTARG}
      ;;
   i)
      itransforms=${OPTARG}
      ;;
   p)
      priors=( ${OPTARG//,/ } )
      ;;
   r)
      ref=${OPTARG}
      ;;
   c)
      cohort=${OPTARG}
      ;;
   l)
      license=${OPTARG}
      ;;
   t)
      set -x
      ;;
   *)
      echo "Option not recognised: ${OPTARG}"
      Usage
      exit
   esac
done
###################################################################
# Ensure that all compulsory arguments have been defined
###################################################################
[[ -z ${template}    ]]          && Usage && exit 1
[[ -z ${transforms}  ]]          && Usage && exit 2
[[ -z ${itransforms} ]]          && Usage && exit 3
[[ -z ${priors}      ]]          && Usage && exit 4
! is_image ${sourceSpace[Map]}   && Usage && exit 5





###################################################################
# Helper function:
# dim_format parses the dimensions of the new template images and
# reformats them to be used in the file name of the imported image
# by removing trailing zeros and decimal points.
###################################################################
dim_format() {
   local dim
   local image=${1}
   ################################################################
   # Obtain image dimensions
   ################################################################
   dim[0]=$(echo $(exec_fsl fslval ${image} pixdim1))
   dim[1]=$(echo $(exec_fsl fslval ${image} pixdim2))
   dim[2]=$(echo $(exec_fsl fslval ${image} pixdim3))
   ################################################################
   # Remove leading and trailing zeros, decimal points from
   # dimensions to include them in the template name.
   ################################################################
   dim[0]=${dim[0]//\./}
   dim[1]=${dim[1]//\./}
   dim[2]=${dim[2]//\./}
   while contains ${dim[0]} '0$'; do dim[0]=${dim[0]%0}; done
   while contains ${dim[1]} '0$'; do dim[1]=${dim[1]%0}; done
   while contains ${dim[2]} '0$'; do dim[2]=${dim[2]%0}; done
   while contains ${dim[0]} '^0'; do dim[0]=${dim[0]#0}; done
   while contains ${dim[1]} '^0'; do dim[1]=${dim[1]#0}; done
   while contains ${dim[2]} '^0'; do dim[2]=${dim[2]#0}; done
   dims=${dim[0]}x${dim[1]}x${dim[2]}
}





###################################################################
# STANDARD SPACE DEFINITION
#------------------------------------------------------------------
# Build the spatial metadata file into a standard space.
###################################################################
subroutine                    @u.1
name=${template[0]//\%*}
dims=${template[0]//*\%}
[[ ${name} == ${dims} ]]      &&    unset dims
stddir=${BRAINSPACE}/${name}
mkdir -p ${stddir}/${name}_priors
mkdir -p ${stddir}/${name}_transforms
###################################################################
# Obtain image dimensions
###################################################################
subroutine                    @u.2
[[ -z ${dims} ]] && dim_format ${sourceSpace[Map]}
###################################################################
# Import the template to the application directory.
###################################################################
for i in ${!sourceSpace[@]}
   do
   subroutine                 @u.3
   i_path=${i//Map/}
   exec_fsl imcp ${sourceSpace[$i]} \
            ${stddir}/${name}-${dims}${i_path}.nii.gz
   spaceMetadataArgs=( "${spaceMetadataArgs[@]}" ${i}'=${BRAINSPACE}'/${name}/${name}-${dims}${i_path}.nii.gz )
done
spaceMetadataArgs=$(join_by ',' ${spaceMetadataArgs[@]})





###################################################################
# Import priors.
#------------------------------------------------------------------
# First define default names for the cases of 3 and 6 priors.
###################################################################
subroutine                    @u.4
p3=(
   [1]=CSF
   [2]=GM
   [3]=WM
)
p6=(
   [1]=CSF
   [2]=GMCortical
   [3]=WMCortical
   [4]=GMDeep
   [5]=Brainstem
   [6]=Cerebellum
)
###################################################################
# Next, iterate through all priors and import each to the standard
# space's application directory.
###################################################################
for i in ${!priors[@]}
   do
   subroutine                 @u.4.${i}
   ################################################################
   # Set the working prior and increment to begin indexing at 1.
   ################################################################
   p=${priors[i]}
   (( i++ ))
   ################################################################
   # Pad the prior index with leading zeros.
   ################################################################
   i=$(printf '%03d' ${i})
   ################################################################
   # Parse the prior name and path.
   ################################################################
   p_name=$(strslice ${p} 1 :)
   p_path=$(strslice ${p} 2 :)
   ################################################################
   # If the name is undefined, then
   # (1) use the default name if either 3 or 6 priors are provided;
   # (2) use only the prior index otherwise
   ################################################################
   [[ ${p_name} == ${p_path} ]] \
      && unset p_name \
      || p_name=-${p_name}
   if [[ -z ${p_name} ]]
      then
      (( ${#priors[@]} == 3 )) && p_name=-${p3[i]}
      (( ${#priors[@]} == 6 )) && p_name=-${p6[i]}
   fi
   p_base=${name}-priors-${i}${p_name}.nii.gz
   p_targ=${stddir}/${name}_priors/${p_base}
   p_nonm=${stddir}/${name}_priors/${name}-priors-${i}.nii.gz
   p_form='${BRAINSPACE}'/${name}/${name}_priors/${name}-priors-'%03d'.nii.gz
   exec_fsl imcp     ${p_path} \
                     ${p_targ}
   pushd ${stddir}/${name}_priors   >/dev/null
   exec_sys rln      ${p_base} \
                     ${p_nonm}
   popd                             >/dev/null
   spaceMetadataArgs=${spaceMetadataArgs},Priors'='${p_form}
done





###################################################################
# Import transforms
###################################################################
subroutine                    @u.5
tx=( ${transforms//,/ }  )
ix=( ${itransforms//,/ } )
unset transforms itransforms
for i in ${!tx[@]}
   do
   subroutine                 @u.5.1.${i}
   if is_image ${tx[i]}
      then
      transforms[i]=${stddir}/${name}_transforms/${name}-MNI_${i}Warp.nii.gz
      exec_fsl imcp  ${tx[i]} ${transforms[i]}
   else
      transforms[i]=${stddir}/${name}_transforms/${name}-MNI_${i}Affine.mat
      exec_sys cp    ${tx[i]} ${transforms[i]}
   fi
done
for i in ${!ix[@]}
   do
   subroutine                 @u.5.2.${i}
   if is_image ${ix[i]}
      then
      itransforms[i]=${stddir}/${name}_transforms/MNI-${name}_${i}Warp.nii.gz
      exec_fsl imcp  ${ix[i]} ${itransforms[i]}
   else
      itransforms[i]=${stddir}/${name}_transforms/MNI-${name}_${i}Affine.mat
      exec_sys cp    ${ix[i]} ${itransforms[i]}
   fi
done
transforms=$( echo ${transforms[@]} )
itransforms=$(echo ${itransforms[@]})
transforms=${transforms// /,}
itransforms=${itransforms// /,}





###################################################################
# Wrap up with a call to spaceMetadata
###################################################################
subroutine                    @u.6
space_path=${stddir}/${name}_space.json
space_name=${template[0]}'%'${dims}
exec_xcp spaceMetadata                                      \
   -m    ${space_name}:${spaceMetadataArgs}                 \
   -f    MNI%1x1x1:${mni1}                                  \
   -x    ${transforms//${stddir}/'${BRAINSPACE}'\/${name}}  \
   -i    ${itransforms//${stddir}/'${BRAINSPACE}'\/${name}} \
   -o    ${space_path}
###################################################################
# Add 2mm iso MNI
###################################################################
space_set  ${space_path} 'MNI%2x2x2' Map ${mni2}
###################################################################
# Add any other resolutions.
###################################################################
subroutine                    @u.7
i=2
unset idx
while (( i < ${#template[@]} ))
   do
   idx="${idx} ${i}"
   i=$(( i+2 ))
done
for i in ${idx}
   do
   unset dims
   dims=${template[i]//*\%}
   template[i]=${template[i]//\%*}
   [[ ${template[i]} == ${dims} ]]     &&    unset dims
   arg2source ${template[i+1]}
   [[ -z ${dims} ]] &&  dim_format     ${sourceSpace[Map]}=
   for i in ${!sourceSpace[@]}
      do
      i_path=${i//Map/}
      exec_fsl imcp ${sourceSpace[$i]} \
               ${stddir}/${name}-${dims}${i_path}.nii.gz
      sourceSpace[$i]='${BRAINSPACE}'/${name}/${name}-${dims}${i_path}.nii.gz
      space_set  ${space_path} ${template[i]}'%'${dims} ${i} ${sourceSpace[$i]}
   done
done





###################################################################
# Import cohort, citation, and license
###################################################################
if [[ -n ${cohort} ]]
   then
   subroutine                 @u.8
   exec_sys rm -f ${stddir}/${name}_sample.csv
   cp ${cohort} ${stddir}/${name}_sample.csv
   cohort='${BRAINSPACE}'/${name}/${name}_sample.csv
   space_set ${space_path} ${space_name} Sample ${cohort}
fi
if [[ -n ${ref} ]]
   then
   subroutine                 @u.9
   exec_sys rm -f ${stddir}/${name}_reference.bib
   doi2bib ${ref//,/ } >> ${stddir}/${name}_reference.bib
   ref='${BRAINSPACE}'/${name}/${name}_reference.bib
   space_set ${space_path} ${space_name} Citation ${ref}
fi
if [[ -n ${license} ]]
   then
   exec_sys rm -f ${stddir}/LICENSE.txt
   subroutine                 @u.10
   cp ${license} ${stddir}/LICENSE.txt
fi
exec_sys chmod -R 755 ${stddir}
