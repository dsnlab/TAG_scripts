#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################

###################################################################
# A wrapper for 3dDespike that converts an input 1D timeseries
# into an image so that it can be despiked.
#
# There has to be a better way than this.
###################################################################

###################################################################
# Constants
###################################################################
source ${XCPEDIR}/core/constants
source ${XCPEDIR}/core/functions/library.sh

###################################################################
# Usage function
###################################################################
Usage(){
cat << endstream
___________________________________________________________________


Usage: 1dDespike -i <input> -o <output> <options>

Compulsory arguments:
 -i : Input timeseries
      The 1D (or 2D) timeseries to be despiked

Optional arguments (copied from 3dDespike):

 -o : Prefix of despiked output [default 'despike']
 
 -x : Output path for temporary or intermediate files.

 -b : Despike using 3dBandpass rather than 3dDespike. 
      This is a simpler procedure that will not handle 
      drift or activation as well. All extraneous inputs 
      will be ignored if this is enabled.

 -r : Repetition time of timeseries [default 1]

 -l : Ignore leading points [default 0]
      Ignore the first t points in the timeseries: 
      these values will be copied to the output 
      dataset without modification.

 -f : Curve fit order [default nvol/30]
      Set the curve fit order to L:
      the curve that is fit to voxel data v(t) is

                            k=L [        (2*PI*k*t)          (2*PI*k*t) ]
      f(t) = a+b*t+c*t*t + SUM  [ d * sin(--------) + e * cos(--------) ]
                            k=1 [  k     (    T   )    k     (    T   ) ]

      where T = duration of time series;
      the a,b,c,d,e parameters are chosen to minimize
      the sum over t of |v(t)-f(t)| (L1 regression);
      this type of fitting is is insensitive to large
      spikes in the data.

 -c : Spike cut values [default 2.5,4.0]

 -s : Output path for an index of the number of spikes in 
      each column of the input timeseries

 -q : Toggle quiet processing: omit informational messages

 -n : Use the 'NEW' method for despiking. This will 
      markedly accelerate the despiking procedure for 
      timeseries with more volumes.

 -t : Trace"
      If this flag is set, then any commands called by the
      1dDespike routine will be explicitly printed to the
      console or log.


endstream
}





###################################################################
# Define defaults
###################################################################
out=despike.1D
outpfx=~TEMP~
ignore=""
corder=""
cut=""
ssave=""
quiet=""
new=""
bpopt=0
t_rep=1
###################################################################
# Parse arguments
###################################################################
while getopts "i:o:x:r:l:f:c:s:bnqt" OPTION
   do
   case $OPTION in
   i)
      ts=${OPTARG}
      [[ ! -e ${ts} ]] && Usage && exit
      ;;
   o)
      out=${OPTARG}
      ;;
   x)
      intermediate=${OPTARG}-1dDespike
      ;;
   r)
      is+numeric ${OPTARG} && t_rep=${OPTARG}
      ;;
   l)
      if is+integer ${OPTARG}
         then
         ignore="-ignore ${OPTARG}"
      else
         echo "Number of leading points to ignore must be a positive integer."
         Usage
         exit
      fi
      ;;
   f)
      corder=${OPTARG}
      ;;
   c)
      scut1=$(echo ${OPTARG}|cut -d',' -f1)
      scut2=$(echo ${OPTARG}|cut -d',' -f2)
      ! is+numeric ${scut1} \
         && Usage \
         && exit
      ! is+numeric ${scut2} \
         && Usage \
         && exit
      scut="-cut ${scut1} ${scut2}"
      ;;
   s)
      ssave=${OPTARG}
      ;;
   b)
      bpopt=1
      ;;
   n)
      new=-NEW
      ;;
   q)
      quiet=-quiet
      ;;
   t)
      set -x
      ;;
   *)
      echo "Option not recognised: ${OPTARG}"
      Usage
      exit
   esac
done
shift $((OPTIND-1))





###################################################################
# Ensure that an input timeseries has been provided.
###################################################################
[[ -z ${ts} ]] && Usage && exit 1
[[ -z ${intermediate} ]] && intermediate=./~TEMP~





subroutine                 @u.1
###################################################################
# Convert the input timeseries to an image
# * Determine the number of timeseries in the 1D timeseries
#   file by dividing the total number of words in the file
#   by the number of time points (volumes).
###################################################################
nfld=( $(exec_sys wc ${ts}) )
nvol=${nfld[0]}
nfld=$(arithmetic ${nfld[1]}/${nfld[0]})
###################################################################
# * Through trial and error, we have found that the desired
#   result is obtained only if the timeseries is transposed
#   first.
###################################################################
subroutine                 @u.2
exec_afni 1dtranspose ${ts} ${intermediate}_tp.1D
###################################################################
# * Next, convert it to a NIfTI timeseries.
###################################################################
exec_fsl fslascii2img ${intermediate}_tp.1D \
   ${nfld} 1 1 \
   ${nvol} 1 1 1 \
   ${t_rep} \
   ${intermediate}.nii.gz
###################################################################
# And then convert it back to a .1D file, but with a 3D header.
# I certainly hope that there is a better way of doing this, but
# for now, it appears that this approach works.
###################################################################
subroutine                 @u.3
exec_afni 3dcopy ${intermediate}.nii.gz \
   ${intermediate}





###################################################################
# Despike the input timeseries
# * Note that the file extension is hard-coded here.
###################################################################
if (( ${bpopt} == 1 ))
   then
   subroutine              @u.4
   exec_afni 3dBandpass \
      -despike \
      -prefix ${intermediate}_despike \
      ${intermediate}.1D \
      2> /dev/null
else
   subroutine              @u.5
   exec_afni 3dDespike \
      ${ignore} \
      ${corder} \
      ${scut} \
      ${ssave} \
      ${new} \
      ${quiet} \
      -nomask \
      -prefix ${intermediate}_despike \
      ${intermediate}.1D \
      2> /dev/null
fi





###################################################################
# And now strip the AFNI header information from the 1D file.
###################################################################
subroutine                 @u.6
data_dsp_nohd=$(cat ${intermediate}_despike.1D|grep -v '#')
exec_sys rm -f ${intermediate}_despike.1D
echo "${data_dsp_nohd}" >> ${intermediate}_despike.1D
###################################################################
# Finally, transpose it back.
###################################################################
subroutine                 @u.7
exec_afni 1dtranspose ${intermediate}_despike.1D ${out}





###################################################################
# Clean up intermediate files.
###################################################################
exec_sys rm -rf ${intermediate}_despike.1D \
   ${intermediate}.1D \
   ${intermediate}.nii.gz \
   ${intermediate}_tp.1D
