#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################

###################################################################
# This utility script uses ANTs routines to create a sample-
# specific template.
#
# As of 3 May 2017, this is a cluster-only utility.
###################################################################
source ${XCPEDIR}/core/global
source ${XCPEDIR}/core/constants
source ${XCPEDIR}/core/functions/library.sh
mod_head=${XCPEDIR}/core/CONSOLE_MODULE_RC

###################################################################
# Usage function
###################################################################
Usage(){
cat << endstream
___________________________________________________________________


Usage: `basename $0` -c <cohort> -o <output> -n <name> <options>

`basename $0` constructs a sample-specific template given a cohort
file.

Compulsory arguments:
 -c : Cohort file for pipeline input:
      A comma-separated catalogue of the analytic sample.
      Each row corresponds to a subject, and each column
      corresponds either to an identifier or to an input.
 -o : Parent directory for pipeline output:
      A valid path on the current filesystem specifying
      the directory wherein all output from the current
      analysis will be written.
 -n : Template name
      The name of the template to be created.

Optional arguments:
 -r : Run stages [default 1,2,3]
      The stages of the template construction protocol
      that are to be run.
      
      1 : Coarse initialisation of target template
      2 : Targeted registration of cohort brains
      3 : Preliminary masking
      4 : Atlas priors
      5 : Prior renormalisation
      6 : Resampling to 2mm isotropic
      7 : Registration to MNI
      8 : Construct metadata and import to pipeline
      
      By default, stages 1-3 will be run in order to allow
      manual edits to the mask before the protocol runs to
      completion.
      
      Specify run stages as a comma-separated list. For
      instance, -r 3,4,5,6 will run stages 3-6.

 -l : OASIS label cohort [default All]
      The OASIS subjects to include in brain extraction and
      prior generation steps. Cohort characteristics and
      options are available in:
      \${XCPEDIR}/thirdparty/oasis30/Cohorts/subjectDemographics 
      By default, all subjects will be included.

 -s : Input template
      If you have already started the template construction
      procedure, provide the currently processed template as this 
      argument to continue the procedure using `basename $0`. This 
      argument may be provided instead of -c.

 -m : Input mask
      If you have already computed a template mask, or if you have
      used manual procedures to refine the template mask, you may 
      provide your mask to the template construction stream using 
      this argument.

endstream
}

###################################################################
# Define defaults and parse arguments.
###################################################################
run=1,2,3
labelcohort=All
! is_numeric ${trace} && trace=0





while getopts "c:o:r:n:l:s:m:a:t:" OPTION
   do
   case $OPTION in
   c)
      incohort=${OPTARG}
      ;;
   o)
      out_super=${OPTARG}
      ;;
   r)
      run=${OPTARG}
      ;;
   n)
      name=${OPTARG}
      ;;
   l)
      labelcohort=${OPTARG}
      ;;
   s)
      intemplate=$(  abspath ${OPTARG})
      ;;
   m)
      templateMask=$(abspath ${OPTARG})
      ;;
   a)
      asgt=( ${asgt[@]} -a ${OPTARG} )
      ;;
   t)
      trace=${OPTARG}
      if (( ${trace} != 0 )) \
      && (( ${trace} != 1 )) \
      && (( ${trace} != 2 )) \
      && (( ${trace} != 3 ))
         then
         usage_flag=1
      fi
      ;;
   *)
      echo "Option not recognised: ${OPTARG}"
      ${XCPEDIR}/xcpModusage mod
      exit
   esac
done
shift $((OPTIND-1))
###################################################################
# Ensure that the compulsory variables have been defined
###################################################################
[[   -z ${out_super} ]] && Usage && exit
[[   -z ${name}      ]] && Usage && exit
[[ ! -s ${incohort}  ]] \
&& ! is_image ${intemplate} && Usage && exit
[[   -s ${incohort}  ]] \
&&   is_image ${intemplate} && echo "
Supply either an input cohort or an initial template, but not both
" && exit
source ${XCPEDIR}/core/assignDirect





cxt=0
subroutine                    @0.1  [n][${name}]
subroutine                    @0.2  [o][${out_super}]
###################################################################
# Set trace status, if applicable
###################################################################
case ${trace} in
0)
   trace=0
   ;;
1)
   trace=1
   ;;
2)
   export trace=1
   ;;
3)
   set -x
   export SHELLOPTS
   ;;
esac
###################################################################
# Assemble the list of input images.
###################################################################
if [[ -s ${incohort} ]]
   then
   source   ${XCPEDIR}/core/validateCohort
   for sub in ${!cohort[@]}
      do
      subject=${cohort[sub]}
      subject_parse        ${subject} ${incohort}
   done
   ingress=1
else
   ingress=0
fi
###################################################################
# Initialise the top-level output directory
###################################################################
exec_sys mkdir -p ${out_super}/${name}
out=$(abspath     ${out_super}/${name})
mkdir -p          ${out}/log/
export log_proc=${out}/log/${name}_$(date +%Y%m%d%H%M)_LOG
###################################################################
# Reformat steps to run as array
###################################################################
run=( ${run//,/ } )





###################################################################
# Variable declarations
###################################################################
define() {
   eval ${1}=\${2}
}





###################################################################
# Start a new stage of template construction
###################################################################
new_stage() {
   (( cxt++ ))
   (( NUMOUT == 1 )) && prep=${cxt}_
   define   outdir   ${out}/${prep}${1}
   matchexact ${cxt} ${run[@]} && exec_sys mkdir -p ${outdir}
   printx ${XCPEDIR}/core/CONSOLE_MODULE_RC >> ${log_proc}
}





###################################################################
# Template construction: unguided (for coarse first pass)
###################################################################
construct_unguided() {
   local mod_name='CONSTRUCTING TEMPLATE: INITIALISATION'
   ################################################################
   # Initialise the unguided stage of template construction.
   ################################################################
   new_stage   templateInit

   ################################################################
   # Define paths to the potential outputs of the unguided
   # template- building step.
   ################################################################
   define      warpInit                ${outdir}/warp
   define      warpedInit              ${outdir}/warpedToTemplate
   define      affineInit              ${outdir}/affine
   define      repairedInit            ${outdir}/repaired
   define      inverseWarpInit         ${outdir}/inverseWarp
   define      logInit                 ${outdir}/log
   define      templateInitDir         ${outdir}
   define      templateInitUnpadded    ${outdir}/template_unpadded.nii.gz
   define      templateInit            ${outdir}/template0.nii.gz
   define      templatePadded          ${outdir}/template.nii.gz

   if matchexact ${cxt} ${run[@]}
      then

      printx   ${mod_head}
      routine                 @1    Template construction: unguided phase
      subroutine              @1.1  [o][${outdir}]

      exec_sys mkdir -p ${warpInit}
      exec_sys mkdir -p ${warpedInit}
      exec_sys mkdir -p ${affineInit}
      exec_sys mkdir -p ${repairedInit}
      exec_sys mkdir -p ${inverseWarpInit}
      exec_sys mkdir -p ${logInit}

      #############################################################
      # Perform the unguided template-building procedure.
      #############################################################
      if ! is_image ${templateInit}
         then
         subroutine           @1.2a Executing template construction
         subroutine           @1.2b Delegating control to antsMultivariateTemplateConstruction
         exec_sys    pushd    ${logInit} 2>/dev/null 1>&2
         exec_ants   antsMultivariateTemplateConstruction.sh   \
            -d       3                                         \
            -m       1x1x0                                     \
            -r       1                                         \
            -c       1                                         \
            -o       ${outdir}/                                \
            ${img[@]}
         exec_sys    popd 2>/dev/null 1>&2
         ##########################################################
         # Reorganise the output of the unguided template-building
         # step.
         ##########################################################
         if is_image ${templateInit}
            then
            subroutine        @1.3  Organising outputs
            exec_sys mv ${outdir}/*template*           ${templateInitDir}/  2>/dev/null
            exec_sys mv ${outdir}/*InverseWarp*        ${inverseWarpInit}/  2>/dev/null
            exec_sys mv ${outdir}/*WarpedToTemplate*   ${warpInit}/         2>/dev/null
            exec_sys mv ${outdir}/*Warp*               ${warpInit}/         2>/dev/null
            exec_sys mv ${outdir}/*warp*               ${warpInit}/         2>/dev/null
            exec_sys mv ${outdir}/*Repaired*           ${repairedInit}/     2>/dev/null
            exec_sys mv ${outdir}/*Affine*             ${affineInit}/       2>/dev/null
            exec_sys mv ${outdir}/job*.sh              ${logInit}/          2>/dev/null
            exec_sys mv ${outdir}/*log.txt             ${logInit}/          2>/dev/null
         fi
      fi

      #############################################################
      # Add padding to the initial template.
      #############################################################
      if ! is_image ${templatePadded}
         then
         subroutine           @1.4  Padding template
         exec_fsl    immv        ${templateInit} ${templateInitUnpadded}
         exec_ants   ImageMath 3 ${templatePadded} \
            PadImage ${templateInitUnpadded} 5
      fi
      routine_end

   fi
}





###################################################################
# Template construction: guided (primary template construction)
###################################################################
construct_guided() {
   local mod_name='CONSTRUCTING TEMPLATE: TARGETED REGISTRATION'
   ################################################################
   # Initialise the targeted stage of template construction.
   ################################################################
   new_stage   templateTarg
   if (( ingress == 0 )) && matchexact ${cxt} ${run[@]}
      then
      ingress=1
      assign   image intemplate     \
          or         templatePadded \
          as         templatePadded
   fi

   ################################################################
   # Define paths to the potential outputs of the targeted 
   # template-building step.
   ################################################################
   define      warpTarg                ${outdir}/warp
   define      warpedTarg              ${outdir}/warpedToTemplate
   define      affineTarg              ${outdir}/affine
   define      repairedTarg            ${outdir}/repaired
   define      inverseWarpTarg         ${outdir}/inverseWarp
   define      logTarg                 ${outdir}/log
   define      templateTargDir         ${outdir}
   define      templateTarg            ${outdir}/template.nii.gz

   if matchexact ${cxt} ${run[@]}
      then

      printx   ${mod_head}
      routine                 @2    Template construction: guided phase
      subroutine              @2.1  [o][${outdir}]

      exec_sys mkdir -p ${warpTarg}
      exec_sys mkdir -p ${warpedTarg}
      exec_sys mkdir -p ${affineTarg}
      exec_sys mkdir -p ${repairedTarg}
      exec_sys mkdir -p ${inverseWarpTarg}
      exec_sys mkdir -p ${logTarg}

      #############################################################
      # Perform the targeted template-building procedure.
      #############################################################
      if ! is_image ${templateTarg}
         then
         subroutine           @2.2a Executing template construction
         subroutine           @2.2b Delegating control to antsMultivariateTemplateConstruction
         exec_sys    pushd    ${logTarg} 2>/dev/null 1>&2
         exec_ants   antsMultivariateTemplateConstruction.sh   \
            -d       3                                         \
            -z       ${templatePadded}                         \
            -o       ${outdir}/                                \
            ${img[@]}
         exec_ants   DenoiseImage -d 3                         \
            -i       $(ls -d1 ${outdir}/*template0.nii.gz)     \
            -o       ${templateTarg}                           \
            -v       1
         exec_sys    popd 2>/dev/null 1>&2

         ##########################################################
         # Reorganise the output of the targeted template-building
         # step.
         ##########################################################
         if is_image ${templateTarg}
            then
            subroutine        @2.3  Organising outputs
            exec_sys mv ${outdir}/*template*           ${templateTargDir}/  2>/dev/null
            exec_sys mv ${outdir}/*InverseWarp*        ${inverseWarpTarg}/  2>/dev/null
            exec_sys mv ${outdir}/*WarpedToTemplate*   ${warpTarg}/         2>/dev/null
            exec_sys mv ${outdir}/*Warp*               ${warpTarg}/         2>/dev/null
            exec_sys mv ${outdir}/*warp*               ${warpTarg}/         2>/dev/null
            exec_sys mv ${outdir}/*Repaired*           ${repairedTarg}/     2>/dev/null
            exec_sys mv ${outdir}/*Affine*             ${affineTarg}/       2>/dev/null
            exec_sys mv ${outdir}/job*.sh              ${logTarg}/          2>/dev/null
            exec_sys mv ${outdir}/*log.txt             ${logTarg}/          2>/dev/null
            exec_sys mv ${templateInitDir}/antsBuildTemplate.* ${logTarg}/  2>/dev/null
         fi
      fi
      routine_end

   fi
}




construct_mask() {
   local mod_name='CONSTRUCTING TEMPLATE: MASKING BRAIN'
   ################################################################
   # Initialise the masking stage of template construction.
   #
   # This is by far the worst-performing stage, and its output
   # should always be evaluated qualitatively (and probably edited
   # manually).
   ################################################################
   new_stage   templateMask
   if (( ingress == 0 )) && matchexact ${cxt} ${run[@]}
      then
      ingress=1
      assign   image intemplate     \
          or         templateTarg   \
          as         templateTarg
   fi
      
   ################################################################
   # Define paths to the potential outputs of the masking stage.
   #
   # Potential outputs include:
   ################################################################
   ! is_image ${templateMask}          && \
   define      templateMask            ${outdir}/templateMask.nii.gz
   define      templateMaskD           ${outdir}/templateMaskMD.nii.gz
   define      templateMasked          ${outdir}/templateBrain.nii.gz
   define      templateMaskedD         ${outdir}/templateBrain_dilMasked.nii.gz
   define      logMaskJLF              ${outdir}/log
   define      jlfMaskTransforms       ${outdir}/transforms
   define      jlfMaskWarped           ${outdir}/warped
   define      jlfMaskWarpedLabels     ${outdir}/warpedLabels

   if matchexact ${cxt} ${run[@]}
      then

      printx   ${mod_head}
      routine                 @3    Template construction: masking
      subroutine              @3.1  [o][${outdir}]
      
      #############################################################
      # Assemble all of the ground truth images for atlas
      # construction.
      #############################################################
      subroutine              @3.2  [OASIS cohort][${labelcohort}]
      local oasis=$(cat $XCPEDIR/thirdparty/oasis30/Cohorts/${labelcohort})
      for o in ${oasis}
         do
         local jlfReg="${jlfReg} -g ${XCPEDIR}/thirdparty/oasis30/Heads/${o}.nii.gz"
         local jlfReg="${jlfReg} -l ${XCPEDIR}/thirdparty/oasis30/Segmentations6Class/${o}_seg.nii.gz"
      done
      
      #############################################################
      # Perform the JLF routine to generate an anatomical atlas.
      #############################################################
      if ! is_image ${templateMask}
         then
         subroutine           @3.3  Delegating control to antsJointLabelFusion
         exec_sys    mkdir -p ${outdir}/labels
         exec_sys    mkdir -p ${logMaskJLF}
         exec_sys    mkdir -p ${jlfMaskTransforms}
         exec_sys    mkdir -p ${jlfMaskWarped}
         exec_sys    mkdir -p ${jlfMaskWarpedLabels}
         exec_sys    pushd    ${logMaskJLF} 2>/dev/null 1>&2
         exec_ants   antsJointLabelFusion.sh             \
            -d       3                                   \
            -o       ${outdir}/labels/                   \
            -t       ${templateTarg}                     \
            -c       1                                   \
            -k       1                                   \
            -q       0                                   \
            -p       ${outdir}/jlf_Posteriors%02d.nii.gz \
            ${jlfReg}
         exec_sys    popd 2>/dev/null 1>&2
         
         ##########################################################
         # Use the output of JLF to generate an extraction mask.
         ##########################################################
         subroutine           @3.4  Organising output
         if is_image ${outdir}/labels/Labels.nii.gz
            then
            exec_sys    mv ${outdir}/job*             ${logMaskJLF}  2>/dev/null
            exec_sys    mv ${outdir}/labels/*log*     ${logMaskJLF}  2>/dev/null
            exec_sys    mv ${outdir}/labels/*Log*     ${logMaskJLF}  2>/dev/null
            exec_sys    mv ${outdir}/labels/JLF.sh    ${logMaskJLF}  2>/dev/null
            exec_sys    mv ${outdir}/labels/*WarpedLabels*  ${jlfMaskWarpedLabels}  2>/dev/null
            exec_sys    mv ${outdir}/labels/*Warped*        ${jlfMaskWarped}        2>/dev/null
            exec_sys    mv ${outdir}/labels/*Affine*        ${jlfMaskTransforms}    2>/dev/null
            exec_sys    mv ${outdir}/labels/*Warp*          ${jlfMaskTransforms}    2>/dev/null
         fi
         exec_fsl    fslmaths ${outdir}/labels/Labels.nii.gz \
            -bin     ${templateMask}
      fi
      if ! is_image ${templateMasked}
         then
         exec_fsl    fslmaths ${templateTarg}            \
            -mul     ${templateMask}                     \
                     ${templateMasked}
      fi
      if ! is_image ${templateMaskD}
         then
         subroutine           @3.5  Generating dilated mask
         exec_ants   ImageMath 3 ${templateMaskD}        \
             MD      ${templateMask} 1
         exec_fsl    fslmaths ${templateTarg}            \
            -mul     ${templateMaskD}                    \
                     ${templateMaskedD}
         fi
      routine_end
      
   fi
}




construct_priors() {
   local mod_name='CONSTRUCTING TEMPLATE: ATLAS_PRIORS'
   ################################################################
   # Initialise the atlas priors stage of template construction.
   ################################################################
   new_stage   templatePriors
   if (( ingress == 0 )) && matchexact ${cxt} ${run[@]}
      then
      ingress=1
      assign   image intemplate     \
          or         templateMasked \
          as         templateMasked
   fi
   
   ################################################################
   # Define paths to the potential outputs of the production of
   # atlas priors.
   #
   # Potential outputs include:
   ################################################################
   define      labels                  ${outdir}/labels/Labels.nii.gz
   define      intensity               ${outdir}/labels/Intensity.nii.gz
   define      posteriors              ${outdir}/jlf_Posteriors
   define      logJLF                  ${outdir}/log
   define      jlfTransforms           ${outdir}/transforms
   define      jlfWarped               ${outdir}/warped
   define      jlfWarpedLabels         ${outdir}/warpedLabels
   define      templateMask2           ${outdir}/templateMask.nii.gz
   define      templateMasked2         ${outdir}/templateMasked.nii.gz
   define      brainPrior              ${outdir}/labels/brainPrior.nii.gz
   define      brainPrior2             ${outdir}/labels/brainPrior2.nii.gz

   if matchexact ${cxt} ${run[@]}
      then

      printx   ${mod_head}
      routine                 @4    Template construction: atlas priors
      subroutine              @4.1  [o][${outdir}]
      
      #############################################################
      # Assemble all of the ground truth images for the second round
      # of atlas construction.
      #############################################################
      subroutine              @4.2  [OASIS cohort][${labelcohort}]
      local oasis=$(cat $XCPEDIR/thirdparty/oasis30/Cohorts/${labelcohort})
      for o in ${oasis}
         do
         local jlfReg="${jlfReg} -g ${XCPEDIR}/thirdparty/oasis30/Brains/${o}.nii.gz"
         local jlfReg="${jlfReg} -l ${XCPEDIR}/thirdparty/oasis30/Segmentations6Class/${o}_seg.nii.gz"
      done
      
      #############################################################
      # Perform the JLF routine on brain-only images to generate an
      # improved anatomical atlas.
      #############################################################
      if ! is_image ${labels}
         then
         subroutine           @4.3  Delegating control to antsJointLabelFusion
         exec_sys    mkdir -p ${outdir}/labels
         exec_sys    mkdir -p ${logJLF}
         exec_sys    mkdir -p ${jlfTransforms}
         exec_sys    mkdir -p ${jlfWarped}
         exec_sys    mkdir -p ${jlfWarpedLabels}
         exec_sys    pushd    ${logJLF} 2>/dev/null 1>&2
         exec_ants   antsJointLabelFusion.sh             \
            -d       3                                   \
            -o       ${outdir}/labels/                   \
            -t       ${templateMasked}                   \
            -x       ${templateMask}                     \
            -c       1                                   \
            -k       1                                   \
            -q       0                                   \
            -p       ${outdir}/jlf_Posteriors%02d.nii.gz \
            ${jlfReg}
         if is_image ${outdir}/labels/Labels.nii.gz
            then
            exec_sys    mv ${outdir}/job*             ${logJLF}         2>/dev/null
            exec_sys    mv ${outdir}/labels/*log*     ${logJLF}         2>/dev/null
            exec_sys    mv ${outdir}/labels/*Log*     ${logJLF}         2>/dev/null
            exec_sys    mv ${outdir}/labels/JLF.sh    ${logJLF}         2>/dev/null
            exec_sys    mv ${outdir}/labels/*Affine*  ${jlfTransforms}  2>/dev/null
            exec_sys    mv ${outdir}/labels/*Warp*    ${jlfTransforms}  2>/dev/null
            
            exec_sys    mv ${outdir}/labels/*WarpedLabels*   ${jlfWarpedLabels}   2>/dev/null
            exec_sys    mv ${outdir}/labels/*Warped*         ${jlfWarped}         2>/dev/null
         fi
         exec_sys    popd 2>/dev/null 1>&2
      fi
      
      #############################################################
      # Generate extraction priors for the whole brain.
      #############################################################
      exec_fsl fslmerge -t ${brainPrior}      ${jlfWarpedLabels}/*WarpedLabels.nii.gz
      exec_fsl fslmaths    ${brainPrior}      -bin -Tmean   ${brainPrior}
      exec_fsl fslmaths    ${brainPrior}      -thr 0.5 -bin ${templateMask2}
      exec_fsl fslmaths    ${templateMasked2} -mul ${templateMask2} ${templateMasked2}
      
      exec_ants ImageMath  ${brainPrior2}      G   ${templateMask} 1
      
      routine_end
      
   fi
   is_image ${templateMasked2} && define templateMasked templateMasked2
   is_image ${templateMask2}   && define templateMask   templateMask2
}





renorm_priors() {
   local mod_name='CONSTRUCTING TEMPLATE: RENORMALISING ATLAS PRIORS'
   ################################################################
   # Initialise the third stage of atlas priors generation for
   # template construction.
   ################################################################
   new_stage   templatePriorsRenorm
   if (( ingress == 0 )) && matchexact ${cxt} ${run[@]}
      then
      ingress=1
      assign   image intemplate     \
          or         templateMasked \
          as         templateMasked
      if ! is_image ${templateMask}
         then
         templateMask=${outdir}/templateMask.nii.gz
         exec_fsl fslmaths ${templateMasked} \
            -bin           ${templateMask}
      fi
   fi

   ################################################################
   # Define paths to the potential outputs of the renormalisation
   # of atlas priors.
   #
   # Potential outputs include:
   ################################################################
   define      binRoot                 ${outdir}/binary_
   define      priorRoot               ${outdir}/prior
   define      priorPrenorm            ${outdir}/priorPrenorm
   define      kmeansDir               ${outdir}/kmeans

   if matchexact ${cxt} ${run[@]}
      then

      printx   ${mod_head}
      routine                 @5    Template construction: prior renormalisation
      subroutine              @5.1  [o][${outdir}]
      
      #############################################################
      # Prepare non-CSF atlas priors.
      #############################################################
      subroutine              @5.2  Preprocessing atlas priors
      local priorNum=(2 3 4 5 6)
      for i in "${priorNum[@]}"
         do
         exec_ants   ThresholdImage 3 ${labels}             \
                     ${binRoot}${i}.nii.gz ${i} ${i}
         exec_ants   SmoothImage    3 ${binRoot}${i}.nii.gz \
                     1.0 ${priorPrenorm}${i}.nii.gz
         local imcall="${imcall} ${priorPrenorm}${i}.nii.gz"
      done
      local imcall=$(join_by ',' ${imcall})

      #############################################################
      # Prepare CSF atlas prior.
      #############################################################
      subroutine              @5.3  Preparing the cerebrospinal fluid prior
      exec_sys    mkdir -p ${kmeansDir}
      exec_ants   Atropos                                \
         -d       3                                      \
         -a       ${templateMasked}                      \
         -i       KMeans[3]                              \
         -o       [${kmeansDir}/kmeansSeg.nii.gz,${kmeansDir}/kmeansPosterior%02d.nii.gz] \
         -v                                              \
         -x       ${templateMask}
      local csfPath=$(exec_sys ls -d1 ${kmeansDir}/kmeansPosterior*1.nii.gz)
   
      #############################################################
      # Renormalise all priors.
      #############################################################
      subroutine              @5.4  Renormalising priors with respect to CSF
      exec_xcp renormalisePriorsPreserveCSF.R            \
         -m    ${templateMask}                           \
         -i    ${imcall}                                 \
         -c    ${csfPath}                                \
         -o    ${priorRoot}
      local priorNum=(1 2 3 4 5 6)
      for i in "${priorNum[@]}"
         do
         priors=(${priors[@]} $(ls ${priorRoot}*${i}.nii.gz))
      done
      priors=$(join_by ',' ${priors[@]})
      routine_end
      
   fi
}





resample_template() {
   local mod_name='CONSTRUCTING TEMPLATE: RESAMPLING'
   ################################################################
   # Initialise the resampling stage of template construction.
   ################################################################
   new_stage   templateResample
   if (( ingress == 0 )) && matchexact ${cxt} ${run[@]}
      then
      ingress=1
      assign   image intemplate     \
          or         templateMasked \
          as         templateMasked
   fi

   ################################################################
   # Define paths to the potential outputs of the template resample
   # procedure.
   #
   # Potential outputs include:
   ################################################################
   define      templateResampled       ${outdir}/template_brain_2mm.nii.gz

   if matchexact ${cxt} ${run[@]} && ! is_image ${templateResampled}
      then

      printx   ${mod_head}
      routine                 @6    Template construction: resampling
      subroutine              @6.1  [o][${outdir}]
      subroutine              @6.2  Resampling to 2mm isotropic space
      exec_fsl flirt                                     \
         -in   ${templateMasked}                         \
         -ref  ${templateMasked}                         \
         -applyisoxfm 2                                  \
         -out  ${templateResampled}
      routine_end
   fi
}





register_template() {
   local mod_name='CONSTRUCTING TEMPLATE: REGISTERING TO MNI'
   ###################################################################
   # Initialise the MNI registration stage of template construction.
   ###################################################################
   new_stage   templateTransforms
   if (( ingress == 0 )) && matchexact ${cxt} ${run[@]}
      then
      ingress=1
      assign   image intemplate     \
          or         templateMasked \
          as         templateMasked
   fi

   ###################################################################
   # Define paths to the potential outputs of the registrations
   # between the template and MNI space.
   #
   # Potential outputs include:
   ###################################################################
   define      warpTarg                ${outdir}/warp
   define      mniBrain                ${FSLDIR}/data/standard/MNI152_T1_1mm_brain.nii.gz
   define      transform               ${outdir}/transform
   define      xfmScript               ${outdir}/antsRegisterMNI.sh
   define      xfmLog                  ${outdir}/antsRegisterMNI_log

   if matchexact ${cxt} ${run[@]}
      then

      printx   ${mod_head}
      routine                 @7    Template construction: registration
      subroutine              @7.1  [o][${outdir}]
      
      exec_sys rm -f ${xfmScript}
      exec_sys rm -f ${xfmLog}
      subroutine              @7.2  Writing transformation script
      local register="${templateMasked},${mniBrain}"
      echo \
"#!/usr/bin/env bash

source ${XCPEDIR}/core/constants
source ${XCPEDIR}/core/global
source ${XCPEDIR}/core/functions/library.sh

exec_ants   antsRegistration                          \
   -d       3                                         \
   -o       ${transform}                              \
   -u       1                                         \
   -w       [0.01,0.99]                               \
   -r       [${register},1]                           \
   -m       MI[${register},1,32,Regular,0.25]         \
   -c       [1000x500x250x100,1e-8,10]                \
   -t       Rigid[0.1]                                \
   -f       8x4x2x1                                   \
   -s       3x2x1x0                                   \
   -m       MI[${register},1,32,Regular,0.25]         \
   -c       [1000x500x250x100,1e-8,10]                \
   -t       Affine[0.1]                               \
   -f       8x4x2x1                                   \
   -s       3x2x1x0                                   \
   -m       CC[${register},1,4]                       \
   -c       [100x100x70x20,1e-9,15]                   \
   -t       SyN[0.1,3,0]                              \
   -f       6x4x2x1                                   \
   -s       3x2x1x0
   "                                      >> ${xfmScript}
      subroutine              @7.3  Executing registration
      id=$(qsub -V -S /bin/bash -cwd -j y -o ${xfmLog} \
         ${xfmScript})
      id=$(echo ${id}|tr -dc '0-9')
      ${XCPEDIR}/utils/qstatus -e ${id}
      local xfmNum=(0 1)
      for i in "${xfmNum[@]}"
         do
         local xs=$(ls ${transform}${i}*)
         for x in ${xs}
            do
            if contains ${x} Inverse
               then
               ixfms=( ${ixfms[@]} ${x} )
            else
               xfms=(   ${xfms[@]} ${x} )
            fi
         done
         xfms=$( join_by ','  ${xfms[@]})
         ixfms=$(join_by ',' ${ixfms[@]})
      done
      routine_end
      
   fi
}





build_metadata() {
   local mod_name='CONSTRUCTING TEMPLATE: ASSEMBLING METADATA'
   ################################################################
   # Initialise the metadata/import stage of template construction
   ################################################################
   new_stage   templateMetadata
   
   if matchexact ${cxt} ${run[@]}
      then

      printx   ${mod_head}
      routine                 @8    Template construction: metadata and import
      subroutine              @8.1  Producing multi-resolution metadata
      subroutine              @8.2  Localising space to space/${name}
      
      exec_xcp standardSpace                          \
         -s    ${name}:${templateMasked}              \
         -s    ${name}:${templateResampled}           \
         -p    ${priors}                              \
         -x    ${xfms}                                \
         -i    ${ixfms}
      routine_end
   fi
}





###################################################################
# Control sequence
###################################################################
construct_unguided
construct_guided
construct_mask
construct_priors
renorm_priors
resample_template
register_template
build_metadata
