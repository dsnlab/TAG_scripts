echo auto-generated by afni_proc.py, Tue Jan 22 09:48:13 2019
echo (version 6.16, July 5, 2018)
echo execution started: `date`
date
afni -ver
afni_history -check_date 3 May 2018
if ( 0 ) then
if ( 0 > 0 ) then
set subj = sub-TAG113
endif
set output_dir = sub-TAG113.results
if ( -d sub-TAG113.results ) then
set runs = ( `count -digits 2 1 1` )
count -digits 2 1 1
mkdir sub-TAG113.results
mkdir sub-TAG113.results/stimuli
3dcopy /projects/dsnlab/shared/tag/bids_data/derivatives/freesurfer/sub-TAG113/SUMA/sub-TAG113_SurfVol.nii.gz sub-TAG113.results/sub-TAG113_SurfVol
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dcopy /projects/dsnlab/shared/tag/bids_data/derivatives/freesurfer/sub-TAG113/SUMA/aparc.a2009s+aseg_rank.nii.gz sub-TAG113.results/copy_af_aaseg
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dcopy /projects/dsnlab/shared/tag/bids_data/derivatives/freesurfer/sub-TAG113/SUMA/aparc.a2009s+aseg_rank.nii.gz sub-TAG113.results/copy_af_aeseg
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dcopy /projects/dsnlab/shared/tag/bids_data/derivatives/freesurfer/sub-TAG113/SUMA/sub-TAG113_vent.nii.gz sub-TAG113.results/copy_af_FSvent
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dcopy /projects/dsnlab/shared/tag/bids_data/derivatives/freesurfer/sub-TAG113/SUMA/sub-TAG113_WM.nii.gz sub-TAG113.results/copy_af_FSWe
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dTcat -prefix sub-TAG113.results/pb00.sub-TAG113.r01.tcat /projects/dsnlab/shared/tag/bids_data/sub-TAG113/ses-wave2/func/sub-TAG113_ses-wave2_task-rest_run-01_bold.nii.gz[5..$]
++ 3dTcat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ elapsed time = 7.0 s
set tr_counts = ( 390 )
cd sub-TAG113.results
touch out.pre_ss_warn.txt
foreach run ( 01 )
3dToutcount -automask -fraction -polort 3 -legendre pb00.sub-TAG113.r01.tcat+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dToutcount: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-TAG113.r01.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-TAG113.r01.tcat+orig.BRIK is 5.517681 degrees from plumb.
++ 75355 voxels passed mask/clip
1deval -a outcount.r01.1D -expr 1-step(a-0.1)
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
1deval -a outcount.r01.1D{0} -expr step(a-0.4)
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
end
cat outcount.r01.1D
cat rm.out.cen.r01.1D
set minindex = `3dTstat -argmin -prefix - outcount_rall.1D\'`
3dTstat -argmin -prefix - outcount_rall.1D'
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTstat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: KR Hammett & RW Cox
[7m*+ WARNING:[0m Input dataset is not 3D+time; assuming TR=1.0
set ovals = ( `1d_tool.py -set_run_lengths $tr_counts                       
                          -index_to_run_tr $minindex` )
1d_tool.py -set_run_lengths 390 -index_to_run_tr 12
set minoutrun = 01
set minouttr = 12
tee out.min_outlier.txt
echo min outlier: run 01, TR 12
foreach run ( 01 )
3dDespike -NEW -nomask -prefix pb01.sub-TAG113.r01.despike pb00.sub-TAG113.r01.tcat+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dDespike: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-TAG113.r01.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-TAG113.r01.tcat+orig.BRIK is 5.517681 degrees from plumb.
++ Input dataset is in short format, but output will be in float format
++ ignoring first 0 time points, using last 390
++ using 390 time points => -corder 13
++ Loading dataset pb00.sub-TAG113.r01.tcat+orig
++ processing all 423360 voxels in dataset
++ Procesing time series with NEW model fit algorithm
++ smash edit thresholds: 3.1 .. 5.0 MADs
 +   [ 3.457% .. 0.072% of normal distribution]
 +   [ 8.839% .. 3.125% of Laplace distribution]
++ start OpenMP thread #0
.....................................................................................................................................................................................
++ Elapsed despike time =  32s 184ms

++ FINAL: 162729840 data points, 10034098 edits [6.166%], 2423069 big edits [1.489%]
++ Output dataset ./pb01.sub-TAG113.r01.despike+orig.BRIK
end
3dbucket -prefix vr_base_min_outlier pb01.sub-TAG113.r01.despike+orig[12]
++ 3dbucket: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
align_epi_anat.py -anat2epi -anat sub-TAG113_SurfVol+orig -save_skullstrip -suffix _al_junk -epi vr_base_min_outlier+orig -epi_base 0 -epi_strip 3dAutomask -giant_move -cost lpc+ZZ -volreg off -tshift off
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dWarp: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: RW Cox
++ Output dataset ./__tt_sub-TAG113_SurfVol_ns_ob+orig.BRIK
++ 3dbucket: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAutomask: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Emperor Zhark
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./__tt_vr_base_min_outlier_ts+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./__tt_vr_base_min_outlier_ts+orig.BRIK is 5.517681 degrees from plumb.
++ Loading dataset ./__tt_vr_base_min_outlier_ts+orig
++ Forming automask
 + Fixed clip level = 2651.354980
 + Used gradual clip level = 2420.295898 .. 2840.184082
 + Number voxels above clip level = 77529
 + Clustering voxels ...
 + Largest cluster has 74775 voxels
 + Clustering voxels ...
 + Largest cluster has 73242 voxels
 + Filled   839 voxels in small holes; now have 74081 voxels
 + Filled    10 voxels in large holes; now have 74091 voxels
 + Clustering voxels ...
 + Largest cluster has 74089 voxels
 + Clustering non-brain voxels ...
 + Clustering voxels ...
 + Largest cluster has 349271 voxels
 + Mask now has 74089 voxels
++ 74089 voxels in the mask [out of 423360: 17.50%]
++ first  16 x-planes are zero [from R]
++ last   15 x-planes are zero [from L]
++ first   7 y-planes are zero [from P]
++ last   10 y-planes are zero [from A]
++ first   0 z-planes are zero [from I]
++ last    9 z-planes are zero [from S]
++ applying mask to original data
++ Writing masked data
++ Output dataset ./__tt_vr_base_min_outlier_ts_ns+orig.BRIK
++ CPU time = 0.000000 sec
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Output dataset ././__tt_vr_base_min_outlier_ts_ns_wt+orig.BRIK
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
++ lpc+ parameters: hel=0.40 mi=0.20 nmi=0.20 crA=0.40 ov=0.40 [to be zeroed at Final iteration]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./__tt_vr_base_min_outlier_ts_ns_wt+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./__tt_vr_base_min_outlier_ts_ns_wt+orig.BRIK is 5.517681 degrees from plumb.
++ Oblique dataset:./__tt_vr_base_min_outlier_ts_ns+orig.BRIK is 5.517681 degrees from plumb.
++ Source dataset: ./__tt_sub-TAG113_SurfVol_ns_ob+orig.HEAD
++ Base dataset:   ./__tt_vr_base_min_outlier_ts_ns+orig.HEAD
++ Loading datasets
++ 1427053 voxels in -source_automask+2
++ Zero-pad: zbot=4 ztop=0
++ 74089 voxels [16.4%] in weight mask
++ Output dataset ./__tt_sub-TAG113_SurfVol_ns_ob_al_junk_wtal+orig.BRIK
++ Number of points for matching = 74089
++ NOTE: base and source coordinate systems have different handedness
 +       Orientations: base=Left handed (RPI); source=Right handed (RAI)
++ Local correlation: blok type = 'RHDD(9.225)'
++ -lpc+ parameters: hel=0.40 mi=0.20 nmi=0.20 crA=0.40 ov=0.40 [to be zeroed at Final iteration]
++ base center of mass = 41.884 38.998 32.252 (index)
 + source center of mass = 144.948 156.303 180.186 (index)
 + source-target CM = 1.135 -1.379 -3.690 (xyz)
 + center of mass shifts = 1.135 -1.379 -3.690
++ shift param auto-range: -65.5..67.7 -68.0..65.2 -54.2..46.9
 + Range param#4 [z-angle] = -6.000000 .. 6.000000
 + Range param#5 [x-angle] = -6.000000 .. 6.000000
 + Range param#6 [y-angle] = -6.000000 .. 6.000000
 + Range param#1 [x-shift] = -8.865265 .. 11.134735
 + Range param#2 [y-shift] = -11.378601 .. 8.621399
 + Range param#3 [z-shift] = -13.690163 .. 6.309837
 + Range param#4 [z-angle] = -45.000000 .. 45.000000
 + Range param#5 [x-angle] = -45.000000 .. 45.000000
 + Range param#6 [y-angle] = -45.000000 .. 45.000000
 + Range param#1 [x-shift] = -38.865265 .. 41.134735
 + Range param#2 [y-shift] = -41.378601 .. 38.621399
 + Range param#3 [z-shift] = -43.690163 .. 36.309837
 + 12 free parameters
++ Normalized convergence radius = 0.000458
++ changing output grid spacing to 1.0000 mm
++ OpenMP thread count = 1
++ ======= Allineation of 1 sub-bricks using Local Pearson Signed + Others =======
 + source mask has 1427053 [out of 23803780] voxels
 + base mask has 95310 [out of 451584] voxels
++ ========== sub-brick #0 ========== [total CPU to here=0.0 s]
++ *** Coarse pass begins ***
 + * Enter alignment setup routine
 + - copying base image
 + - copying source image
 + - Smoothing base; radius=2.50
 + - Smoothing source; radius=2.50
 + !source mask fill: ubot=36 usiz=79
 + - copying weight image
 + - using 74089 points from base image [use_all=2]
 + * Exit alignment setup routine
 + - Search for coarse starting parameters
 +  - histogram: source clip 46.3916 .. 200.458; base clip 1826.79 .. 6544.41
 +  - versus source range 0.111623 .. 186.532; base range 0 .. 8449.54
 + 67010 total points stored in 648 'RHDD(9.55775)' bloks
 + - number of free params = 6
 + - Testing (64+61)*64 params:#o+oo-o-+.---..-+o$. + - best 45 costs found:
    0 v= 0.639685:   1.13  -1.38  -3.69   0.00   0.00   0.00  [grid]
    1 v= 1.117687: -25.53 -14.71  22.98  15.00  15.00 -30.00  [grid]
    2 v= 1.173855:  14.47 -14.71   9.64 -15.00  15.00  15.00  [grid]
    3 v= 1.180716:  27.80 -14.71  22.98 -15.00  15.00  30.00  [grid]
    4 v= 1.186942: -13.07   8.07  -8.53 -15.99 -13.53 -29.93  [rand]
    5 v= 1.243918: -12.20 -14.71   9.64  15.00  15.00 -15.00  [grid]
    6 v= 1.257110: -12.20 -14.71   9.64 -15.00  15.00 -30.00  [grid]
    7 v= 1.271961:  15.34   8.07  -8.53  15.99 -13.53  29.93  [rand]
    8 v= 1.272256: -31.35  13.31   8.12  11.16  -9.40 -34.39  [rand]
    9 v= 1.332071:  14.47 -14.71   9.64 -30.00  15.00 -15.00  [grid]
   10 v= 1.366156:  14.47 -14.71   9.64  15.00  15.00  30.00  [grid]
   11 v= 1.401144:  14.47 -14.71  22.98 -15.00  30.00  15.00  [grid]
   12 v= 1.430922: -25.53 -14.71   9.64  15.00  15.00 -15.00  [grid]
   13 v= 1.431243:  27.80 -14.71   9.64 -15.00  15.00  15.00  [grid]
   14 v= 1.433633: -15.01 -10.84  20.66  20.99  15.73 -16.09  [rand]
   15 v= 1.433908:  16.43 -22.27  26.70 -14.56  29.40  15.92  [rand]
   16 v= 1.465981: -12.20 -14.71   9.64  30.00  15.00  15.00  [grid]
   17 v= 1.477215:  15.34 -10.83   1.15  15.99  13.53  29.93  [rand]
   18 v= 1.479424: -12.20 -14.71  22.98  15.00  30.00 -15.00  [grid]
   19 v= 1.487302: -12.20  11.95 -17.02  30.00 -15.00  15.00  [grid]
   20 v= 1.502283: -14.16 -22.27  26.70  14.56  29.40 -15.92  [rand]
   21 v= 1.518693:  27.80 -14.71   9.64 -30.00  15.00  15.00  [grid]
   22 v= 1.522970:  27.80 -14.71   9.64 -15.00  15.00  30.00  [grid]
   23 v= 1.524537:   9.78 -21.81  13.78 -25.20  18.50 -13.54  [rand]
   24 v= 1.526518: -12.20 -14.71   9.64  15.00  15.00  15.00  [grid]
   25 v= 1.530036: -12.20 -14.71  22.98  15.00  15.00 -15.00  [grid]
   26 v= 1.533202: -21.72  22.20 -14.11  -5.91 -29.74 -29.45  [rand]
   27 v= 1.540631:  14.47 -14.71   9.64 -15.00  15.00 -15.00  [grid]
   28 v= 1.551604:  17.28 -10.84  20.66 -20.99  15.73  16.09  [rand]
   29 v= 1.553080: -25.53 -14.71  22.98  15.00  15.00 -15.00  [grid]
   30 v= 1.559602:  -7.51  19.05 -21.16  25.20 -18.50  13.54  [rand]
   31 v= 1.565574: -13.07   8.07   1.15 -15.99 -13.53 -29.93  [rand]
   32 v= 1.566295: -25.53  11.95   9.64  15.00 -15.00 -30.00  [grid]
   33 v= 1.566508: -13.07 -10.83   1.15 -15.99  13.53 -29.93  [rand]
   34 v= 1.567480: -25.53  25.29 -17.02  15.00 -30.00 -15.00  [grid]
   35 v= 1.573146:  14.47  11.95 -17.02  15.00 -15.00  30.00  [grid]
   36 v= 1.578327:  33.62  13.31   8.12 -11.16  -9.40  34.39  [rand]
   37 v= 1.599008:  27.80 -14.71  22.98 -30.00  30.00  15.00  [grid]
   38 v= 1.605410:  17.35 -15.49  31.44 -15.74  34.09   7.78  [rand]
   39 v= 1.606164:  14.47 -14.71  22.98 -15.00  15.00  15.00  [grid]
   40 v= 1.613119:  27.80 -14.71  22.98 -30.00  15.00  15.00  [grid]
   41 v= 1.616740:  25.83  -5.99  12.69  -8.97  18.72  30.56  [rand]
   42 v= 1.617852: -25.53 -14.71   9.64  30.00  15.00 -15.00  [grid]
   43 v= 1.622648:  27.80 -14.71  22.98 -15.00  15.00  15.00  [grid]
   44 v= 1.625418:  33.62 -16.07   8.12 -11.16   9.40  34.39  [rand]
*[#8004=0.506366] *[#8011=0.455142] *[#8017=0.451632] *[#8018=0.442715] *[#8019=0.440144] *[#8020=0.437874] *[#8022=0.436331] *[#8027=0.431298] *[#8760=0.430948] *[#8765=0.414227] *[#8766=0.403284] *[#8768=0.400032] *[#8769=0.39695] *[#8774=0.389573] *[#8776=0.388822] *[#8777=0.387623] *[#8778=0.386616] *[#8779=0.386003] *[#8780=0.38377] *[#8781=0.382834] *[#8783=0.38253]  + - costs of the above after a little optimization:
    0 v= 0.431298:   1.03  -1.86   1.87   0.61   2.14   0.30  [grid]
    1 v= 0.828997: -20.06  -4.49   8.58   9.64   3.57 -22.80  [grid]
    2 v= 0.471417:   2.47  -7.53   4.02  -0.55   5.14   1.24  [grid]
    3 v= 1.035256:  27.58 -11.05  17.40 -14.79  12.26  29.20  [grid]
    4 v= 0.895289: -16.30  -0.55  -0.07  -4.67  -3.44 -24.41  [rand]
    5 v= 0.593893:  -9.73  -6.59   3.57   7.41   3.77  -5.22  [grid]
    6 v= 0.595351:  -9.26  -2.55   0.64   6.32  -0.04  -5.21  [grid]
    7 v= 0.753919:   0.46  -6.54  -0.62   9.24   4.41   6.95  [rand]
    8 v= 0.986589: -31.01   2.54   8.64   7.42  -5.56 -36.66  [rand]
    9 v= 0.671877:  11.14  -5.22   0.18  -4.95   1.77   8.81  [grid]
  *10 v= 0.382530:  -1.14  -3.66   3.36   1.38   2.99  -0.80  [grid]
   11 v= 0.625416:   9.63  -8.77   4.60  -5.08   6.10   5.75  [grid]
   12 v= 0.457698:  -4.57  -4.21   3.81   3.20   3.63  -2.84  [grid]
   13 v= 0.636467:  10.18  -6.16   1.01  -3.84   2.94   7.57  [grid]
   14 v= 0.411528:  -1.28  -1.76   2.04   1.76   2.22  -0.92  [rand]
   15 v= 0.533803:   4.78  -8.81   4.45  -1.22   6.03   3.18  [rand]
   16 v= 0.507951:  -4.97  -5.65   2.41   4.40   2.31  -3.15  [grid]
   17 v= 0.573583:   4.54  -3.27   0.19  -2.15   0.06   1.36  [rand]
   18 v= 0.445419:  -2.44  -7.30   4.02   1.49   4.55  -1.50  [grid]
   19 v= 0.833779:  -3.28   2.82  -5.78  12.68  -0.31   5.75  [grid]
   20 v= 0.966937: -14.32 -12.42  14.22   2.87  14.10 -26.03  [rand]
   21 v= 0.691666:   8.43  -2.91   0.15  -1.03   2.46   9.98  [grid]
   22 v= 0.684340:   5.96   0.72  -4.38  -3.68  -4.26   2.64  [grid]
   23 v= 0.603309:   7.77  -9.06   4.87  -4.69   6.59   3.70  [rand]
   24 v= 0.400562:  -0.34  -5.54   4.05   1.06   4.16  -0.54  [grid]
   25 v= 0.432435:  -3.72  -2.99   2.23   2.16   2.22  -2.27  [grid]
   26 v= 0.815344: -22.02   0.67   3.05  17.98   0.03 -13.43  [rand]
   27 v= 0.495107:   3.28  -7.48   4.70  -1.55   5.41   1.07  [grid]
   28 v= 0.750739:  16.42  -4.09   0.56  -9.82   0.81   9.32  [rand]
   29 v= 0.748734: -17.03  -5.76   7.75  10.87   5.12 -13.97  [grid]
   30 v= 0.385480:  -1.24  -4.35   3.60   1.40   3.42  -1.07  [rand]
   31 v= 0.437948:  -3.39  -1.54   1.94   2.05   2.01  -2.48  [rand]
   32 v= 0.609630:  -9.09  -8.44   6.22   6.08   6.38  -5.15  [grid]
   33 v= 0.987111: -10.62 -10.28   7.65  -9.86   9.77 -30.86  [rand]
   34 v= 0.967383: -26.29   9.28  -1.88  20.01 -11.23 -14.96  [grid]
   35 v= 0.494226:   3.49  -5.47   3.64  -0.46   3.18   1.91  [grid]
   36 v= 1.035348:  29.24   1.37   3.58  -5.70  -3.99  32.08  [rand]
   37 v= 1.382675:  26.80 -14.96  28.63 -26.87  27.71  16.00  [grid]
   38 v= 0.524647:   5.14  -7.97   4.30  -1.89   5.27   2.63  [rand]
   39 v= 0.586045:   7.50  -5.50   0.25  -1.43   2.42   5.38  [grid]
   40 v= 0.940035:  24.63  -9.75  12.37 -10.48   9.03  25.67  [grid]
   41 v= 0.900625:  22.69  -8.81  10.73  -9.26   8.31  24.46  [rand]
   42 v= 0.667837: -12.36  -3.62  -0.43   7.28  -1.32  -9.93  [grid]
   43 v= 0.691757:  11.83  -6.00   3.44  -8.78   2.92   5.48  [grid]
   44 v= 0.883887:  21.31  -6.50   4.74  -4.40   3.69  26.98  [rand]
 + - save #10 for twobest
 + - skip #30 for twobest: too close to set #10
 + - skip #24 for twobest: too close to set #10
 + - skip #14 for twobest: too close to set #10
 + - skip # 0 for twobest: too close to set #10
 + - skip #25 for twobest: too close to set #10
 + - skip #31 for twobest: too close to set #10
 + - skip #18 for twobest: too close to set #10
 + - skip #12 for twobest: too close to set #10
 + - skip # 2 for twobest: too close to set #10
 + - skip #35 for twobest: too close to set #24
 + - skip #27 for twobest: too close to set #24
 + - skip #16 for twobest: too close to set #10
 + - skip #38 for twobest: too close to set # 2
 + - skip #15 for twobest: too close to set # 2
 + - skip #17 for twobest: too close to set # 0
 + - skip #39 for twobest: too close to set #17
 + - save # 5 for twobest
 + - save # 6 for twobest
 + - skip #23 for twobest: too close to set #38
 + - skip #32 for twobest: too close to set # 5
 + - skip #11 for twobest: too close to set #23
 + - skip #13 for twobest: too close to set #39
 + - save #42 for twobest
 + - skip # 9 for twobest: too close to set #39
 + - save #22 for twobest
 + - skip #21 for twobest: too close to set #13
 + - skip #43 for twobest: too close to set #11
 + - save #29 for twobest
 + - save #28 for twobest
 + - save # 7 for twobest
 + - save #26 for twobest
 + - save # 1 for twobest
 + - save #19 for twobest
 + - save #44 for twobest
 + - save # 4 for twobest
 + - save #41 for twobest
 + - skip #40 for twobest: too close to set #41
 + - save #20 for twobest
 + - save #34 for twobest
 + - save # 8 for twobest
 + - save #33 for twobest
 + - save # 3 for twobest
 + - save #36 for twobest
 + - save #37 for twobest
 + - Coarse startup search net CPU time = 0.0 s
++ Start refinement #1 on 12 coarse parameter sets
 + * Enter alignment setup routine
 + - Smoothing base; radius=1.94
 + - Smoothing source; radius=1.94
 + !source mask fill: ubot=36 usiz=79
 + - retaining old weight image
 + - using 74089 points from base image [use_all=2]
 + * Exit alignment setup routine
 +  - histogram: source clip 46.0253 .. 198.876; base clip 1833.21 .. 6655.07
 +  - versus source range 0.0106646 .. 186.572; base range 0 .. 8467.37
 + 67888 total points stored in 667 'RHDD(9.42766)' bloks
*[#11492=0.381732] *[#11495=0.381333] *[#11496=0.378257] *[#11498=0.376337] *[#11499=0.37621] *[#11501=0.374157] *[#11502=0.371242] *[#11503=0.371135] *[#11505=0.369347] *[#11509=0.368028] *[#11511=0.366108] *[#11512=0.365294] *[#11513=0.364662] *[#11514=0.363113] *[#11517=0.360934] *[#11518=0.359007] *[#11519=0.356834] *[#11520=0.355522] *[#11521=0.354136] *[#11522=0.353414] *[#11523=0.351704] *[#11524=0.351389] *[#11527=0.351333] *[#11531=0.351149] *[#11534=0.349983] *[#11537=0.349681] *[#11538=0.349462] 
 + - param set #1 has cost=0.349462
 + -- Parameters = -0.9784 -2.5583 4.4615 1.0088 3.2412 -1.1483 0.9795 0.9907 0.9948 -0.0048 -0.0058 -0.0075
 + - param set #2 has cost=0.394216
 + -- Parameters = -3.3577 -5.3530 5.1244 1.7744 3.6923 -2.7100 0.9758 0.9912 0.9800 -0.0084 0.0081 -0.0146
*[#11723=0.348783] *[#11725=0.348777] *[#11726=0.347741] *[#11727=0.34623] *[#11728=0.34511] *[#11729=0.344137] *[#11732=0.343014] *[#11733=0.341766] *[#11734=0.33977] *[#11736=0.339483] *[#11739=0.339474] 
 + - param set #3 has cost=0.339474
 + -- Parameters = -1.9685 -4.3880 5.6369 0.9965 4.5244 -2.1047 0.9755 0.9940 0.9827 -0.0134 0.0173 0.0025
 + - param set #4 has cost=0.380702
 + -- Parameters = -4.1161 -0.9774 6.8541 2.6803 2.3237 -3.0930 0.9520 0.9838 0.9549 0.0232 0.0039 -0.0119
 + - param set #5 has cost=0.472541
 + -- Parameters = 4.2751 4.0801 0.8537 -1.7948 0.2568 0.6987 0.9745 0.9492 0.9901 0.0084 0.0050 -0.0030
 + - param set #6 has cost=0.552368
 + -- Parameters = -12.6196 -3.0647 9.4779 11.3243 5.6410 -4.8646 0.9501 0.9814 0.9446 -0.0416 -0.0264 0.0065
 + - param set #7 has cost=0.510637
 + -- Parameters = 11.5614 -6.8608 8.4247 -6.6042 6.4362 6.5430 0.9700 0.9750 0.9343 -0.0208 -0.0494 0.0335
 + - param set #8 has cost=0.359838
 + -- Parameters = -2.5546 -2.1399 4.3099 1.6594 3.3419 -2.0914 0.9654 0.9940 0.9922 -0.0191 0.0035 -0.0014
 + - param set #9 has cost=0.535089
 + -- Parameters = -12.9259 9.6877 3.1207 11.2688 -2.3835 -5.3941 0.9021 0.9441 0.9305 0.0411 -0.0135 0.0276
 + - param set #10 has cost=0.547551
 + -- Parameters = -13.5719 -3.5713 5.5768 10.7550 1.3699 -6.7479 0.9370 0.9804 0.9633 -0.0207 -0.0065 0.0050
 + - param set #11 has cost=0.566643
 + -- Parameters = -5.2877 3.0155 1.0637 9.8001 1.7181 3.5291 0.9622 0.9666 0.9193 -0.0562 -0.0098 0.0072
 + - param set #12 has cost=0.457940
 + -- Parameters = 1.0656 -2.5272 1.6431 -0.1297 1.5942 0.1176 0.9980 0.9981 1.0028 0.0020 0.0012 -0.0001
 + - sorting parameter sets by cost
 + -- scanning for distances from #1
 + --- dist(#2,#1) = 0.104 
 + --- dist(#3,#1) = 0.0622 
 + --- dist(#4,#1) = 0.164 
 + --- dist(#5,#1) = 0.077 
 + --- dist(#6,#1) = 0.0724 
 + --- dist(#7,#1) = 0.122 
 + --- dist(#8,#1) = 0.3 
 + --- dist(#9,#1) = 0.245 
 + --- dist(#10,#1) = 0.145 
 + --- dist(#11,#1) = 0.197 
 + --- dist(#12,#1) = 0.193 
++ Start refinement #2 on 12 coarse parameter sets
 + * Enter alignment setup routine
 + - Smoothing base; radius=1.51
 + - Smoothing source; radius=1.51
 + !source mask fill: ubot=36 usiz=79
 + - retaining old weight image
 + - using 74089 points from base image [use_all=2]
 + * Exit alignment setup routine
 +  - histogram: source clip 46.6507 .. 201.578; base clip 1838.7 .. 6768.51
 +  - versus source range 0 .. 186.508; base range 0 .. 8494.18
 + 66791 total points stored in 689 'RHDD(9.3481)' bloks
 + - param set #1 has cost=0.347648
 + -- Parameters = -1.9336 -4.7751 5.4122 1.3118 4.2096 -2.0696 0.9731 1.0094 0.9712 -0.0044 0.0238 0.0095
 + - param set #2 has cost=0.353158
 + -- Parameters = -1.0648 -3.5919 5.3407 0.9969 3.4378 -1.4507 0.9610 1.0062 0.9782 -0.0123 0.0017 -0.0056
 + - param set #3 has cost=0.360264
 + -- Parameters = -1.1656 -2.6949 4.5616 0.7136 3.3521 -1.8034 0.9685 0.9955 0.9838 -0.0177 0.0154 0.0001
 + - param set #4 has cost=0.347074
 + -- Parameters = -2.1619 -2.9734 6.4795 2.0571 2.7113 -1.3798 0.9780 1.0058 0.9520 0.0223 0.0117 -0.0147
 + - param set #5 has cost=0.347680
 + -- Parameters = -1.5431 -2.8783 5.6414 1.2214 3.0978 -1.6600 0.9750 0.9987 0.9703 -0.0052 0.0127 -0.0111
 + - param set #6 has cost=0.385713
 + -- Parameters = 0.4682 -2.3156 2.9735 0.8964 2.2023 -0.1690 0.9599 1.0063 0.9977 -0.0167 -0.0209 -0.0071
 + - param set #7 has cost=0.391988
 + -- Parameters = -1.4189 1.2671 3.5822 1.6542 2.2514 -0.8619 0.9810 0.9576 0.9872 0.0067 -0.0103 -0.0043
 + - param set #8 has cost=0.389262
 + -- Parameters = 2.1248 -7.2592 8.9089 0.3687 5.6162 1.3892 0.9367 1.0221 0.9316 -0.0235 -0.0511 0.0175
 + - param set #9 has cost=0.430343
 + -- Parameters = -6.7813 1.3769 9.2693 4.1322 2.4054 -4.4804 0.9721 0.9335 0.9421 0.0780 0.0475 -0.0561
 + - param set #10 has cost=0.420388
 + -- Parameters = -1.3174 -6.8211 7.8128 0.7254 5.6885 -2.3727 0.9421 0.9981 0.9717 -0.0128 -0.0180 0.0044
 + - param set #11 has cost=0.496011
 + -- Parameters = -5.3511 -5.4230 13.0365 3.7633 10.7070 -3.8520 0.9562 0.9106 0.9429 -0.0371 -0.0156 0.0302
 + - param set #12 has cost=0.429805
 + -- Parameters = -0.5528 0.8318 6.5647 0.0870 1.0027 -1.5965 0.9707 1.0009 0.9193 -0.0679 -0.0066 -0.0062
 + - sorting parameter sets by cost
 + -- scanning for distances from #1
 + --- dist(#2,#1) = 0.12 
 + --- dist(#3,#1) = 0.124 
 + --- dist(#4,#1) = 0.156 
 + --- dist(#5,#1) = 0.18 
 + --- dist(#6,#1) = 0.176 
 + --- dist(#7,#1) = 0.283 
 + --- dist(#8,#1) = 0.131 
 + --- dist(#9,#1) = 0.158 
 + --- dist(#10,#1) = 0.406 
 + --- dist(#11,#1) = 0.251 
 + --- dist(#12,#1) = 0.267 
++ Start refinement #3 on 12 coarse parameter sets
 + * Enter alignment setup routine
 + - Smoothing base; radius=1.18
 + - Smoothing source; radius=1.18
 + !source mask fill: ubot=36 usiz=79
 + - retaining old weight image
 + - using 74089 points from base image [use_all=2]
 + * Exit alignment setup routine
 +  - histogram: source clip 46.9938 .. 203.06; base clip 1840.97 .. 6844.5
 +  - versus source range 0 .. 186.496; base range 0 .. 8504.05
 + 67460 total points stored in 695 'RHDD(9.29965)' bloks
 + - param set #1 has cost=0.355158
 + -- Parameters = -2.1689 -3.8079 6.7065 1.9328 2.9423 -1.7387 0.9780 1.0111 0.9506 0.0208 0.0118 -0.0136
 + - param set #2 has cost=0.362789
 + -- Parameters = -1.9531 -4.7608 5.4244 1.3466 4.0450 -2.0325 0.9742 1.0115 0.9672 -0.0047 0.0240 0.0094
 + - param set #3 has cost=0.358932
 + -- Parameters = -1.5093 -2.8737 5.6374 1.2292 2.8129 -1.5756 0.9765 1.0035 0.9672 -0.0065 0.0106 -0.0129
 + - param set #4 has cost=0.359067
 + -- Parameters = -0.8488 -3.5362 5.2640 1.0531 3.1941 -1.1751 0.9742 1.0080 0.9712 -0.0108 0.0022 -0.0039
 + - param set #5 has cost=0.365871
 + -- Parameters = -1.2793 -3.0775 4.9914 1.0227 3.0517 -1.6652 0.9697 1.0034 0.9767 -0.0165 0.0109 -0.0061
 + - param set #6 has cost=0.370812
 + -- Parameters = 0.1284 -2.6237 4.6908 0.8527 2.8004 -0.5242 0.9658 1.0040 0.9802 -0.0179 -0.0093 -0.0078
 + - param set #7 has cost=0.368402
 + -- Parameters = 2.0812 -7.2204 8.7023 0.6434 5.1246 1.5227 0.9650 1.0334 0.9242 -0.0221 -0.0538 0.0162
 + - param set #8 has cost=0.393024
 + -- Parameters = -1.1399 0.5019 4.3252 1.2903 2.7163 -1.0007 0.9886 0.9623 0.9838 0.0047 -0.0045 -0.0065
 + - param set #9 has cost=0.355533
 + -- Parameters = -0.5377 -5.7274 7.8399 1.0930 4.4956 -0.6568 0.9820 1.0196 0.9362 -0.0195 -0.0103 0.0078
 + - param set #10 has cost=0.363520
 + -- Parameters = -0.3286 -4.1293 8.0179 0.5096 2.7728 -1.0201 0.9719 1.0264 0.9297 -0.0329 0.0118 -0.0176
 + - param set #11 has cost=0.418100
 + -- Parameters = -6.1399 0.9771 8.9739 3.8593 1.9045 -3.7538 0.9733 0.9559 0.9369 0.0681 0.0541 -0.0573
 + - param set #12 has cost=0.466919
 + -- Parameters = -4.1717 -6.4634 12.2514 2.2318 10.0296 -3.4414 0.9882 0.9542 0.9265 -0.0146 0.0276 0.0299
 + - sorting parameter sets by cost
 + -- scanning for distances from #1
 + --- dist(#2,#1) = 0.182 
 + --- dist(#3,#1) = 0.123 
 + --- dist(#4,#1) = 0.142 
 + --- dist(#5,#1) = 0.115 
 + --- dist(#6,#1) = 0.242 
 + --- dist(#7,#1) = 0.168 
 + --- dist(#8,#1) = 0.295 
 + --- dist(#9,#1) = 0.174 
 + --- dist(#10,#1) = 0.133 
 + --- dist(#11,#1) = 0.213 
 + --- dist(#12,#1) = 0.196 
 + - Total coarse refinement net CPU time = 0.0 s; 3383 funcs
++ *** Fine pass begins ***
 + * Enter alignment setup routine
 + - Smoothing base; radius=1.00
 + - Smoothing source; radius=1.00
 + !source mask fill: ubot=36 usiz=79
 + - retaining old weight image
 + * Exit alignment setup routine
++ Picking best parameter set out of 13 cases
 +  - histogram: source clip 46.9097 .. 202.697; base clip 1840.97 .. 6844.5
 +  - versus source range 0 .. 186.503; base range 0 .. 8505.65
 + 66996 total points stored in 701 'RHDD(9.27904)' bloks
 + - cost(#1)=0.361982 *
 + -- Parameters = -2.1689 -3.8079 6.7065 1.9328 2.9423 -1.7387 0.9780 1.0111 0.9506 0.0208 0.0118 -0.0136
 + - cost(#2)=0.363757  
 + -- Parameters = -0.5377 -5.7274 7.8399 1.0930 4.4956 -0.6568 0.9820 1.0196 0.9362 -0.0195 -0.0103 0.0078
 + - cost(#3)=0.365622  
 + -- Parameters = -1.5093 -2.8737 5.6374 1.2292 2.8129 -1.5756 0.9765 1.0035 0.9672 -0.0065 0.0106 -0.0129
 + - cost(#4)=0.365576  
 + -- Parameters = -0.8488 -3.5362 5.2640 1.0531 3.1941 -1.1751 0.9742 1.0080 0.9712 -0.0108 0.0022 -0.0039
 + - cost(#5)=0.368861  
 + -- Parameters = -1.9531 -4.7608 5.4244 1.3466 4.0450 -2.0325 0.9742 1.0115 0.9672 -0.0047 0.0240 0.0094
 + - cost(#6)=0.371464  
 + -- Parameters = -0.3286 -4.1293 8.0179 0.5096 2.7728 -1.0201 0.9719 1.0264 0.9297 -0.0329 0.0118 -0.0176
 + - cost(#7)=0.371887  
 + -- Parameters = -1.2793 -3.0775 4.9914 1.0227 3.0517 -1.6652 0.9697 1.0034 0.9767 -0.0165 0.0109 -0.0061
 + - cost(#8)=0.377841  
 + -- Parameters = 2.0812 -7.2204 8.7023 0.6434 5.1246 1.5227 0.9650 1.0334 0.9242 -0.0221 -0.0538 0.0162
 + - cost(#9)=0.376113  
 + -- Parameters = 0.1284 -2.6237 4.6908 0.8527 2.8004 -0.5242 0.9658 1.0040 0.9802 -0.0179 -0.0093 -0.0078
 + - cost(#10)=0.397140  
 + -- Parameters = -1.1399 0.5019 4.3252 1.2903 2.7163 -1.0007 0.9886 0.9623 0.9838 0.0047 -0.0045 -0.0065
 + - cost(#11)=0.422345  
 + -- Parameters = -6.1399 0.9771 8.9739 3.8593 1.9045 -3.7538 0.9733 0.9559 0.9369 0.0681 0.0541 -0.0573
 + - cost(#12)=0.472251  
 + -- Parameters = -4.1717 -6.4634 12.2514 2.2318 10.0296 -3.4414 0.9882 0.9542 0.9265 -0.0146 0.0276 0.0299
 + - cost(#13)=0.660541  
 + -- Parameters = 1.1347 -1.3786 -3.6902 0.0000 0.0000 0.0000 1.0000 1.0000 1.0000 0.0000 0.0000 0.0000
 + -num_rtb 99 ==> refine all 13 cases
 + - cost(#1)=0.360431 *
 + -- Parameters = -2.1453 -3.7939 6.7333 1.8909 2.9529 -1.6360 0.9774 1.0114 0.9505 0.0169 0.0121 -0.0143
 + - cost(#2)=0.360004 *
 + -- Parameters = -0.5420 -5.7374 7.7891 1.1250 4.4380 -0.5824 0.9792 1.0212 0.9355 -0.0115 -0.0086 0.0071
 + - cost(#3)=0.365036  
 + -- Parameters = -1.3889 -3.0181 5.6838 1.2204 2.8486 -1.4742 0.9765 1.0036 0.9668 -0.0062 0.0105 -0.0127
 + - cost(#4)=0.365574  
 + -- Parameters = -0.8487 -3.5362 5.2643 1.0532 3.1949 -1.1747 0.9742 1.0078 0.9712 -0.0106 0.0022 -0.0039
 + - cost(#5)=0.366972  
 + -- Parameters = -1.9535 -4.7618 5.5030 1.3725 3.9907 -2.0150 0.9722 1.0137 0.9658 -0.0044 0.0202 0.0092
 + - cost(#6)=0.365525  
 + -- Parameters = -0.5313 -4.7018 8.4217 0.6364 3.3318 -1.1475 0.9699 1.0240 0.9309 -0.0316 0.0057 -0.0174
 + - cost(#7)=0.367476  
 + -- Parameters = -1.1668 -3.2789 5.2382 1.1191 3.1699 -1.5064 0.9703 1.0052 0.9724 -0.0101 0.0120 -0.0059
 + - cost(#8)=0.373931  
 + -- Parameters = 1.9839 -7.1851 8.6565 0.6856 5.0777 1.4621 0.9727 1.0331 0.9256 -0.0200 -0.0491 0.0140
 + - cost(#9)=0.369068  
 + -- Parameters = -0.2410 -3.1803 5.0690 0.8326 2.8907 -0.7023 0.9717 1.0050 0.9741 -0.0167 -0.0090 -0.0096
 + - cost(#10)=0.392716  
 + -- Parameters = -0.8865 0.1655 4.8335 1.3103 2.9565 -0.8436 0.9802 0.9645 0.9825 0.0052 -0.0044 -0.0087
 + - cost(#11)=0.392976  
 + -- Parameters = -5.4791 -1.0919 8.7123 2.7766 0.6786 -3.9487 0.9707 1.0017 0.9338 0.0519 0.0516 -0.0686
 + - cost(#12)=0.398348  
 + -- Parameters = -2.0552 -6.1501 8.2267 1.0621 6.4090 -2.2915 0.9723 1.0006 0.9216 -0.0232 0.0236 0.0485
 + - cost(#13)=0.387041  
 + -- Parameters = -0.6783 -1.8819 4.9496 1.0728 3.4427 -0.9558 0.9751 0.9831 0.9875 -0.0062 -0.0065 -0.0053
 + - case #2 is now the best
 + - Initial  cost = 0.360004
 + - Initial fine Parameters = -0.5420 -5.7374 7.7891 1.1250 4.4380 -0.5824 0.9792 1.0212 0.9355 -0.0115 -0.0086 0.0071
 + - Finalish cost = 0.359849 ; 81 funcs
 +  - Set lpc+ parameters back to pure lpc before Final
 +  - histogram: source clip 46.8967 .. 202.641; base clip 1840.97 .. 6844.5
 +  - versus source range 0 .. 186.503; base range 0 .. 8505.65
*[#16216=-0.216677] *[#16223=-0.222801] *[#16224=-0.223431] *[#16247=-0.229909] *[#16257=-0.231758] *[#16260=-0.232054] *[#16263=-0.232495] *[#16280=-0.232828] *[#16282=-0.236411] *[#16290=-0.236618] *[#16292=-0.236727] *[#16300=-0.236876] *[#16304=-0.237202] *[#16305=-0.238386] *[#16306=-0.238561] *[#16307=-0.23917] *[#16308=-0.239522] *[#16309=-0.23964] *[#16310=-0.239817] *[#16311=-0.241534] *[#16314=-0.242328] *[#16315=-0.24245] *[#16317=-0.242736] *[#16318=-0.243658] *[#16319=-0.244667] *[#16320=-0.245156] *[#16323=-0.246329] *[#16324=-0.246626] *[#16327=-0.246808] *[#16329=-0.247638] *[#16332=-0.247837] *[#16333=-0.248128] *[#16336=-0.249524] *[#16341=-0.250349] *[#16343=-0.250672] *[#16344=-0.252185] *[#16345=-0.252196] *[#16346=-0.25266] *[#16349=-0.253808] *[#16358=-0.25388] *[#16360=-0.255374] *[#16361=-0.255707] *[#16362=-0.256523] *[#16363=-0.256973] *[#16364=-0.2579] *[#16365=-0.25945] *[#16366=-0.261796] *[#16367=-0.263472] *[#16370=-0.264447] *[#16371=-0.26573] *[#16372=-0.266592] *[#16377=-0.267447] *[#16382=-0.268172] *[#16383=-0.269349] *[#16384=-0.26978] *[#16385=-0.269969] *[#16386=-0.271144] *[#16391=-0.271592] *[#16392=-0.271739] *[#16393=-0.272296] *[#16394=-0.272575] *[#16405=-0.274705] *[#16410=-0.27586] *[#16411=-0.276171] *[#16413=-0.276312] *[#16414=-0.276752] *[#16417=-0.278078] *[#16418=-0.279178] *[#16419=-0.279774] *[#16421=-0.28065] *[#16422=-0.281006] *[#16423=-0.28162] *[#16424=-0.282318] *[#16425=-0.282973] *[#16428=-0.283808] *[#16429=-0.284537] *[#16430=-0.284967] *[#16436=-0.285783] *[#16441=-0.286487] *[#16442=-0.286849] *[#16443=-0.287067] *[#16444=-0.287353] *[#16445=-0.287376] *[#16449=-0.287506] *[#16453=-0.28777] *[#16454=-0.287875] *[#16457=-0.288202] *[#16458=-0.288403] *[#16459=-0.288475] *[#16464=-0.288576] *[#16470=-0.289272] *[#16473=-0.289428] *[#16474=-0.289712] *[#16477=-0.289794] *[#16478=-0.290217] *[#16481=-0.290399] *[#16490=-0.290714] *[#16491=-0.290886] *[#16494=-0.291403] *[#16495=-0.291613] *[#16502=-0.291703] *[#16504=-0.291921] *[#16505=-0.291986] *[#16506=-0.292228] *[#16519=-0.292263] *[#16525=-0.292356] *[#16526=-0.292515] *[#16533=-0.292517] *[#16535=-0.292711] *[#16536=-0.292746] *[#16541=-0.292773] *[#16553=-0.292979] *[#16554=-0.29318] *[#16559=-0.29321] *[#16563=-0.293463] *[#16568=-0.293629] *[#16571=-0.293727] *[#16572=-0.293731] *[#16582=-0.293772] *[#16584=-0.293774] *[#16590=-0.293857] *[#16597=-0.293942] *[#16600=-0.293965] *[#16602=-0.294052] *[#16605=-0.294062] *[#16613=-0.294089] *[#16615=-0.294106] *[#16617=-0.294223] *[#16623=-0.294268] *[#16633=-0.294314] *[#16640=-0.29439] *[#16645=-0.294467] *[#16652=-0.294604] *[#16653=-0.294618] *[#16657=-0.294748] *[#16660=-0.295129] *[#16661=-0.295209] *[#16664=-0.295219] *[#16666=-0.295333] *[#16671=-0.295405] *[#16674=-0.295574] *[#16675=-0.295694] *[#16678=-0.295832] *[#16681=-0.295868] *[#16684=-0.295967] *[#16703=-0.296009] *[#16706=-0.296032] *[#16718=-0.296047] *[#16724=-0.296244] *[#16731=-0.296446] *[#16734=-0.296536] *[#16737=-0.296622] *[#16740=-0.29676] *[#16743=-0.296781] *[#16744=-0.296852] *[#16749=-0.296907] *[#16754=-0.296996] *[#16755=-0.29701] *[#16758=-0.297059] *[#16761=-0.297108] *[#16778=-0.297131] *[#16782=-0.297172] *[#16787=-0.297187] *[#16795=-0.297196] *[#16797=-0.297222] *[#16800=-0.297248] *[#16801=-0.297284] *[#16802=-0.297325] *[#16803=-0.29734] *[#16804=-0.297394] *[#16805=-0.297413] *[#16807=-0.297431] *[#16808=-0.297437] *[#16810=-0.297456] *[#16811=-0.297486] *[#16812=-0.297496] *[#16813=-0.29751] *[#16814=-0.29751] *[#16815=-0.297524] *[#16816=-0.297534] *[#16817=-0.297547] *[#16818=-0.297558] *[#16819=-0.297563] *[#16822=-0.297585] *[#16823=-0.297598] *[#16824=-0.297604] *[#16825=-0.297611] *[#16826=-0.297641] *[#16827=-0.297697] *[#16830=-0.297731] *[#16831=-0.297745] *[#16832=-0.297757] *[#16835=-0.297844] *[#16836=-0.297846] *[#16838=-0.297847] *[#16840=-0.297863] *[#16841=-0.297869] *[#16842=-0.297885] *[#16843=-0.297899] *[#16844=-0.297917] *[#16845=-0.297946] *[#16846=-0.298008] *[#16849=-0.298102] *[#16852=-0.298113] *[#16853=-0.298225] *[#16856=-0.298371] *[#16863=-0.298392] *[#16864=-0.298434] *[#16865=-0.298439] *[#16866=-0.29846] *[#16867=-0.298491] *[#16868=-0.298526] *[#16871=-0.298539] *[#16874=-0.298554] *[#16875=-0.298554] *[#16879=-0.298578] *[#16880=-0.298603] *[#16883=-0.298628] *[#16884=-0.29865] *[#16885=-0.298674] *[#16886=-0.298691] *[#16887=-0.298707] *[#16888=-0.298742] *[#16893=-0.298744] *[#16894=-0.298763] *[#16897=-0.298768] *[#16898=-0.298771] *[#16905=-0.298774] *[#16910=-0.298786] *[#16911=-0.298786] *[#16913=-0.298792] *[#16914=-0.298796] *[#16917=-0.2988] *[#16918=-0.298806] *[#16919=-0.298807] *[#16920=-0.298808] *[#16922=-0.298809] *[#16924=-0.298824] *[#16925=-0.29884] *[#16926=-0.29885] *[#16929=-0.298861] *[#16934=-0.298868] *[#16935=-0.29887] *[#16937=-0.298878] *[#16938=-0.298884] *[#16939=-0.298893] *[#16940=-0.298898] *[#16943=-0.298902] *[#16948=-0.298908] *[#16951=-0.298915] *[#16954=-0.298922] *[#16955=-0.298925] *[#16956=-0.298931] *[#16957=-0.29894] *[#16958=-0.298946] *[#16959=-0.298962] *[#16964=-0.298966] *[#16965=-0.29897] *[#16968=-0.298971] *[#16970=-0.298975] *[#16975=-0.29898] *[#16980=-0.298984] *[#16981=-0.298985] *[#16982=-0.298991] *[#16987=-0.298993] *[#16988=-0.299] *[#16991=-0.299002] *[#16992=-0.299004] *[#16993=-0.299007] *[#16994=-0.299009] *[#16995=-0.299012] *[#16996=-0.299014] *[#16997=-0.299018] *[#16998=-0.299024] *[#17003=-0.299025] *[#17009=-0.299028] *[#17014=-0.299031] *[#17017=-0.299031] *[#17023=-0.299033] *[#17024=-0.299034] *[#17035=-0.299037] *[#17037=-0.29904] *[#17038=-0.29904] *[#17042=-0.299042] *[#17047=-0.299043] *[#17050=-0.299046] *[#17053=-0.299046] *[#17058=-0.299049] *[#17069=-0.29905] *[#17074=-0.299052] *[#17079=-0.299052] *[#17082=-0.299053] *[#17091=-0.299054] *[#17092=-0.299055] *[#17095=-0.299056] *[#17104=-0.299057] *[#17105=-0.299057] *[#17112=-0.299058] *[#17113=-0.299058] *[#17118=-0.29906] *[#17122=-0.299061] *[#17125=-0.299061] *[#17128=-0.299062] *[#17130=-0.299063] *[#17131=-0.299065] *[#17132=-0.299065] *[#17135=-0.299065] *[#17141=-0.299067] *[#17146=-0.299068] *[#17147=-0.29907] *[#17154=-0.29907] *[#17156=-0.299071] *[#17158=-0.299073] 
 + - Final    cost = -0.299073 ; 974 funcs
 + Final fine fit Parameters:
       x-shift=-1.2579   y-shift=-6.4697   z-shift= 4.4549
       z-angle= 1.3983   x-angle= 2.9928   y-angle=-0.8971
       x-scale= 1.0113   y-scale= 1.0715   z-scale= 0.9966
     y/x-shear=-0.0005 z/x-shear=-0.0022 z/y-shear=-0.0109
 + - Fine net CPU time = 0.0 s
++ Computing output image
++ image warp: parameters = -1.2579 -6.4697 4.4549 1.3983 2.9928 -0.8971 1.0113 1.0715 0.9966 -0.0005 -0.0022 -0.0109
++ Output dataset ./__tt_sub-TAG113_SurfVol_ns_ob_temp_al_junk+orig.BRIK
++ Wrote -1Dmatrix_save ./sub-TAG113_SurfVol_al_junk_e2a_only_mat.aff12.1D
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 111.8
++ ###########################################################
++ #   Please check results visually for alignment quality   #
++ ###########################################################
++ #   '-autoweight' is recommended when using -lpc or -lpa  #
++ #   If your results are not good, please try again.       #
++ ###########################################################
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./__tt_vr_base_min_outlier_ts_ns+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./__tt_vr_base_min_outlier_ts_ns+orig.BRIK is 5.517681 degrees from plumb.
++ Source dataset: ./__tt_sub-TAG113_SurfVol_ns+orig.HEAD
++ Base dataset:   ./__tt_vr_base_min_outlier_ts_ns+orig.HEAD
++ Loading datasets
 + Range param#4 [z-angle] = -6.000000 .. 6.000000
 + Range param#5 [x-angle] = -6.000000 .. 6.000000
 + Range param#6 [y-angle] = -6.000000 .. 6.000000
 + Range param#1 [x-shift] = -10.000000 .. 10.000000
 + Range param#2 [y-shift] = -10.000000 .. 10.000000
 + Range param#3 [z-shift] = -10.000000 .. 10.000000
 + Range param#4 [z-angle] = -45.000000 .. 45.000000
 + Range param#5 [x-angle] = -45.000000 .. 45.000000
 + Range param#6 [y-angle] = -45.000000 .. 45.000000
 + Range param#1 [x-shift] = -40.000000 .. 40.000000
 + Range param#2 [y-shift] = -40.000000 .. 40.000000
 + Range param#3 [z-shift] = -40.000000 .. 40.000000
++ changing output grid spacing to 1.0000 mm
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ ========== sub-brick #0 ========== [total CPU to here=0.0 s]
 + * Enter alignment setup routine
 + - copying base image
 + - copying source image
 + - no weight image
 + - using 11 points from base image [use_all=0]
 + * Exit alignment setup routine
++ using -1Dmatrix_apply
++ Computing output image
++ image warp: parameters = 1.0043 -0.0793 0.0877 28.0919 0.0914 0.0018 -0.9923 147.0667 0.0774 1.0689 0.0114 2.0474
++ Output dataset ./sub-TAG113_SurfVol_al_junk+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 1.5
++ ###########################################################
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
foreach run ( 01 )
3dvolreg -verbose -zpad 1 -base vr_base_min_outlier+orig -1Dfile dfile.r01.1D -prefix rm.epi.volreg.r01 -Fourier -1Dmatrix_save mat.r01.vr.aff12.1D pb01.sub-TAG113.r01.despike+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dvolreg: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./vr_base_min_outlier+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./vr_base_min_outlier+orig.BRIK is 5.517681 degrees from plumb.
++ Reading in base dataset ./vr_base_min_outlier+orig.BRIK
++ Oblique dataset:./pb01.sub-TAG113.r01.despike+orig.BRIK is 5.517681 degrees from plumb.
++ Reading input dataset ./pb01.sub-TAG113.r01.despike+orig.BRIK
++ Edging: x=4 y=4 z=3
++ Creating mask for -maxdisp
 + Automask has 82219 voxels
 + 10125 voxels left in -maxdisp mask after erosion
++ Initializing alignment base
++ Starting final pass on 390 sub-bricks: 0..1..2..3..4..5..6..7..8..9..10..11..12..13..14..15..16..17..18..19..20..21..22..23..24..25..26..27..28..29..30..31..32..33..34..35..36..37..38..39..40..41..42..43..44..45..46..47..48..49..50..51..52..53..54..55..56..57..58..59..60..61..62..63..64..65..66..67..68..69..70..71..72..73..74..75..76..77..78..79..80..81..82..83..84..85..86..87..88..89..90..91..92..93..94..95..96..97..98..99..100..101..102..103..104..105..106..107..108..109..110..111..112..113..114..115..116..117..118..119..120..121..122..123..124..125..126..127..128..129..130..131..132..133..134..135..136..137..138..139..140..141..142..143..144..145..146..147..148..149..150..151..152..153..154..155..156..157..158..159..160..161..162..163..164..165..166..167..168..169..170..171..172..173..174..175..176..177..178..179..180..181..182..183..184..185..186..187..188..189..190..191..192..193..194..195..196..197..198..199..200..201..202..203..204..205..206..207..208..209..210..211..212..213..214..215..216..217..218..219..220..221..222..223..224..225..226..227..228..229..230..231..232..233..234..235..236..237..238..239..240..241..242..243..244..245..246..247..248..249..250..251..252..253..254..255..256..257..258..259..260..261..262..263..264..265..266..267..268..269..270..271..272..273..274..275..276..277..278..279..280..281..282..283..284..285..286..287..288..289..290..291..292..293..294..295..296..297..298..299..300..301..302..303..304..305..306..307..308..309..310..311..312..313..314..315..316..317..318..319..320..321..322..323..324..325..326..327..328..329..330..331..332..333..334..335..336..337..338..339..340..341..342..343..344..345..346..347..348..349..350..351..352..353..354..355..356..357..358..359..360..361..362..363..364..365..366..367..368..369..370..371..372..373..374..375..376..377..378..379..380..381..382..383..384..385..386..387..388..389..
++ CPU time for realignment=0 s  [=0 s/sub-brick]
++ Min : roll=-0.679  pitch=-1.887  yaw=-2.124  dS=-0.389  dL=-1.916  dP=-2.283
++ Mean: roll=+0.483  pitch=+1.424  yaw=-0.438  dS=+1.360  dL=-0.441  dP=-0.716
++ Max : roll=+1.641  pitch=+5.430  yaw=+0.619  dS=+3.905  dL=+0.151  dP=+0.109
++ Max displacements (mm) for each sub-brick:
 0.85(0.00) 1.31(0.86) 1.65(0.74) 0.50(1.26) 0.24(0.57) 0.24(0.21) 0.22(0.10) 0.27(0.17) 0.20(0.09) 0.18(0.24) 0.15(0.06) 0.21(0.14) 0.00(0.21) 0.41(0.41) 0.41(0.19) 0.26(0.22) 0.42(0.30) 0.40(0.04) 0.37(0.04) 0.32(0.11) 0.25(0.36) 0.26(0.07) 0.28(0.17) 0.27(0.16) 0.25(0.07) 0.27(0.24) 0.32(0.15) 0.31(0.47) 0.26(0.13) 0.23(0.09) 0.32(0.30) 0.42(0.19) 0.33(0.12) 0.28(0.07) 1.07(0.87) 1.70(0.64) 1.10(0.61) 1.11(0.22) 1.08(0.33) 0.97(0.42) 0.91(0.14) 0.85(0.12) 0.86(0.11) 0.87(0.14) 0.82(0.07) 0.86(0.08) 0.77(0.10) 0.75(0.06) 0.84(0.17) 0.88(0.07) 0.83(0.07) 0.90(0.10) 0.89(0.09) 0.79(0.14) 0.82(0.07) 1.17(0.50) 1.36(0.20) 1.29(0.16) 1.37(0.16) 1.24(0.17) 0.96(0.34) 1.04(0.12) 1.23(0.32) 0.82(0.86) 0.75(0.19) 1.11(0.49) 1.03(0.14) 1.60(0.68) 2.06(0.47) 1.52(0.56) 1.17(0.38) 1.14(0.07) 1.47(0.37) 1.27(0.35) 1.46(1.34) 1.28(0.66) 1.02(0.29) 1.07(0.56) 1.26(0.53) 1.39(0.79) 1.30(0.14) 2.03(0.92) 1.80(0.28) 1.48(0.37) 1.53(0.17) 1.47(0.14) 1.34(0.17) 1.21(0.19) 1.18(0.20) 1.25(0.09) 1.25(0.08) 1.24(0.05) 1.15(0.10) 1.06(0.10) 1.05(0.14) 1.04(0.16) 1.04(0.14) 0.98(0.14) 1.02(0.19) 0.54(0.60) 0.43(0.16) 0.63(0.27) 0.67(0.17) 0.69(0.10) 0.82(0.18) 0.86(0.15) 0.87(0.08) 0.82(0.06) 0.82(0.08) 0.79(0.17) 0.80(0.11) 0.80(0.14) 0.78(0.10) 0.73(0.09) 0.82(0.20) 0.83(0.23) 0.79(0.15) 0.85(0.06) 0.83(0.10) 0.81(0.04) 0.82(0.09) 0.79(0.09) 0.73(0.10) 0.70(0.08) 0.72(0.08) 0.81(0.13) 0.80(0.08) 0.92(0.24) 0.91(0.14) 0.92(0.14) 0.97(0.18) 1.06(0.41) 1.23(0.50) 1.22(0.39) 1.40(1.07) 2.87(1.47) 2.97(0.32) 2.50(0.50) 2.17(0.34) 2.48(0.66) 2.82(0.64) 2.43(0.49) 2.72(0.32) 4.94(2.32) 5.68(0.81) 5.27(0.56) 5.12(0.22) 5.11(0.34) 5.19(0.26) 5.10(0.11) 4.94(0.19) 4.78(0.23) 4.76(0.47) 4.31(0.59) 3.79(0.55) 3.69(0.12) 3.47(0.42) 1.24(2.70) 1.42(0.63) 1.83(0.51) 2.09(0.50) 2.16(1.54) 2.27(0.62) 1.54(0.77) 1.21(0.65) 1.10(0.37) 1.05(0.16) 1.01(0.15) 1.14(0.24) 1.01(0.18) 1.00(1.20) 1.26(0.26) 3.43(2.30) 3.89(0.56) 3.03(0.93) 4.07(1.05) 4.69(0.65) 4.85(0.44) 4.79(0.63) 4.84(0.76) 4.80(0.14) 4.82(0.11) 4.89(0.34) 3.60(1.32) 2.84(0.76) 2.74(0.15) 2.69(0.10) 3.50(0.81) 2.53(1.37) 2.47(0.11) 2.39(0.18) 2.17(0.49) 2.25(0.21) 2.33(0.15) 2.30(0.06) 2.47(1.30) 3.94(2.03) 3.62(0.40) 2.02(2.00) 1.96(0.20) 2.04(0.40) 2.56(0.57) 4.42(2.35) 5.63(1.47) 6.28(0.66) 6.55(0.29) 6.16(0.84) 5.95(0.35) 5.83(0.21) 5.90(0.40) 5.75(0.32) 5.72(0.25) 5.78(0.18) 6.10(1.12) 5.88(0.61) 6.16(0.81) 5.87(0.33) 5.66(1.22) 5.78(0.99) 6.31(0.70) 6.10(0.61) 6.30(0.52) 6.29(0.63) 6.06(0.71) 6.32(0.78) 6.24(0.27) 5.95(0.33) 5.94(0.16) 6.09(0.41) 6.38(1.07) 6.24(0.29) 6.08(0.26) 5.85(0.23) 5.60(0.29) 5.53(0.11) 5.67(0.16) 5.67(0.11) 5.50(0.18) 5.57(0.24) 5.75(0.44) 5.67(0.27) 5.69(0.05) 5.60(0.13) 5.44(0.19) 5.45(0.11) 5.49(0.07) 5.46(0.17) 5.44(0.16) 5.65(0.28) 5.60(0.11) 5.57(0.09) 5.49(0.18) 5.42(0.22) 5.32(0.16) 5.35(0.14) 5.24(0.16) 5.22(0.22) 5.13(0.21) 5.13(0.21) 5.20(0.22) 5.14(0.12) 5.11(0.08) 5.12(0.08) 5.19(0.31) 4.97(0.42) 5.05(0.48) 5.03(0.13) 5.08(0.09) 5.06(0.16) 5.06(0.17) 4.82(0.47) 4.91(0.45) 4.89(0.12) 5.00(0.47) 5.26(0.59) 5.24(0.40) 5.19(0.29) 5.12(0.21) 5.28(0.25) 5.28(0.25) 5.20(0.12) 5.07(0.19) 5.05(0.15) 5.12(0.24) 5.26(0.18) 5.42(0.25) 5.34(0.35) 5.19(0.69) 5.32(0.36) 5.68(0.42) 5.80(0.56) 5.90(0.83) 6.21(0.49) 5.80(0.44) 5.58(0.50) 5.73(0.24) 5.96(0.26) 5.87(0.21) 5.81(0.16) 5.75(0.15) 6.00(0.68) 6.31(0.85) 6.04(0.51) 5.90(0.19) 5.78(0.21) 5.57(0.22) 5.57(0.15) 5.58(0.25) 5.60(0.09) 5.01(0.58) 4.84(0.35) 5.09(0.56) 5.25(0.36) 5.38(0.35) 5.36(0.42) 5.44(1.24) 4.90(0.70) 4.97(0.63) 4.76(0.56) 5.02(0.55) 4.83(0.45) 4.93(0.20) 5.14(0.40) 5.32(0.32) 5.12(0.56) 5.23(0.69) 5.40(0.43) 4.94(0.49) 4.52(0.64) 3.55(1.55) 5.39(2.18) 6.30(1.24) 5.64(0.75) 5.24(0.44) 5.19(0.22) 6.07(0.90) 5.62(0.87) 6.23(1.11) 6.52(1.25) 6.40(0.32) 6.17(0.31) 5.87(0.39) 6.41(0.88) 6.25(0.26) 6.22(0.79) 6.18(0.54) 5.70(0.55) 7.94(2.53) 9.34(1.54) 9.47(1.74) 10.03(1.07) 9.85(0.97) 10.31(0.79) 10.52(0.55) 10.09(0.71) 10.01(0.33) 10.56(0.82) 10.35(0.45) 10.24(0.21) 10.53(0.29) 10.37(0.41) 10.69(0.59) 10.29(0.50) 10.49(0.24) 10.49(0.18) 10.34(0.18) 10.26(0.30) 10.28(0.28) 10.23(0.29) 10.22(0.30) 10.13(0.12) 10.11(0.09) 10.18(0.14) 10.13(0.10) 10.18(0.07) 10.32(0.44) 10.49(0.23) 10.32(0.69) 10.82(0.59) 10.49(0.91) 10.89(1.14) 11.15(1.30) 11.33(0.69) 11.08(0.73) 10.85(0.76) 10.09(1.07) 11.32(1.82) 11.89(1.00) 10.03(1.93) 7.66(2.45)
++ Max displacement in automask = 11.89 (mm) at sub-brick 387
++ Max delta displ  in automask = 2.70 (mm) at sub-brick 157
++ Wrote dataset to disk in ./rm.epi.volreg.r01+orig.BRIK
3dcalc -overwrite -a pb01.sub-TAG113.r01.despike+orig -expr 1 -prefix rm.epi.all1
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
[7m*+ WARNING:[0m input 'a' is not used in the expression
++ Output dataset ./rm.epi.all1+orig.BRIK
cat_matvec -ONELINE sub-TAG113_SurfVol_al_junk_mat.aff12.1D -I mat.r01.vr.aff12.1D
3dAllineate -base sub-TAG113_SurfVol_ns+orig -input pb01.sub-TAG113.r01.despike+orig -1Dmatrix_apply mat.r01.warp.aff12.1D -mast_dxyz 2.5 -prefix rm.epi.nomask.r01
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb01.sub-TAG113.r01.despike+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb01.sub-TAG113.r01.despike+orig.BRIK is 5.517681 degrees from plumb.
++ Source dataset: ./pb01.sub-TAG113.r01.despike+orig.HEAD
++ Base dataset:   ./sub-TAG113_SurfVol_ns+orig.HEAD
++ Loading datasets
++ master dataset for output = base
++ changing output grid spacing to 2.5000 mm
++ OpenMP thread count = 1
++ ========== Applying transformation to 390 sub-bricks ==========
volume 0..1..2..3..4..5..6..7..8..9..10..11..12..13..14..15..16..17..18..19..20..21..22..23..24..25..26..27..28..29..30..31..32..33..34..35..36..37..38..39..40..41..42..43..44..45..46..47..48..49..50..51..52..53..54..55..56..57..58..59..60..61..62..63..64..65..66..67..68..69..70..71..72..73..74..75..76..77..78..79..80..81..82..83..84..85..86..87..88..89..90..91..92..93..94..95..96..97..98..99..100..101..102..103..104..105..106..107..108..109..110..111..112..113..114..115..116..117..118..119..120..121..122..123..124..125..126..127..128..129..130..131..132..133..134..135..136..137..138..139..140..141..142..143..144..145..146..147..148..149..150..151..152..153..154..155..156..157..158..159..160..161..162..163..164..165..166..167..168..169..170..171..172..173..174..175..176..177..178..179..180..181..182..183..184..185..186..187..188..189..190..191..192..193..194..195..196..197..198..199..200..201..202..203..204..205..206..207..208..209..210..211..212..213..214..215..216..217..218..219..220..221..222..223..224..225..226..227..228..229..230..231..232..233..234..235..236..237..238..239..240..241..242..243..244..245..246..247..248..249..250..251..252..253..254..255..256..257..258..259..260..261..262..263..264..265..266..267..268..269..270..271..272..273..274..275..276..277..278..279..280..281..282..283..284..285..286..287..288..289..290..291..292..293..294..295..296..297..298..299..300..301..302..303..304..305..306..307..308..309..310..311..312..313..314..315..316..317..318..319..320..321..322..323..324..325..326..327..328..329..330..331..332..333..334..335..336..337..338..339..340..341..342..343..344..345..346..347..348..349..350..351..352..353..354..355..356..357..358..359..360..361..362..363..364..365..366..367..368..369..370..371..372..373..374..375..376..377..378..379..380..381..382..383..384..385..386..387..388..389
++ Output dataset ./rm.epi.nomask.r01+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 57.0
++ ###########################################################
3dAllineate -base sub-TAG113_SurfVol_ns+orig -input rm.epi.all1+orig -1Dmatrix_apply mat.r01.warp.aff12.1D -mast_dxyz 2.5 -final NN -quiet -prefix rm.epi.1.r01
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./rm.epi.all1+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./rm.epi.all1+orig.BRIK is 5.517681 degrees from plumb.
++ Output dataset ./rm.epi.1.r01+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 47.4
3dTstat -min -prefix rm.epi.min.r01 rm.epi.1.r01+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTstat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: KR Hammett & RW Cox
++ Output dataset ./rm.epi.min.r01+orig.BRIK
end
cat dfile.r01.1D
3dcopy rm.epi.min.r01+orig mask_epi_extents
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
foreach run ( 01 )
3dcalc -a rm.epi.nomask.r01+orig -b mask_epi_extents+orig -expr a*b -prefix pb02.sub-TAG113.r01.volreg
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Output dataset ./pb02.sub-TAG113.r01.volreg+orig.BRIK
end
cat_matvec -ONELINE sub-TAG113_SurfVol_al_junk_mat.aff12.1D -I
3dAllineate -base sub-TAG113_SurfVol_ns+orig -input vr_base_min_outlier+orig -1Dmatrix_apply mat.basewarp.aff12.1D -mast_dxyz 2.5 -prefix final_epi_vr_base_min_outlier
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./vr_base_min_outlier+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./vr_base_min_outlier+orig.BRIK is 5.517681 degrees from plumb.
++ Source dataset: ./vr_base_min_outlier+orig.HEAD
++ Base dataset:   ./sub-TAG113_SurfVol_ns+orig.HEAD
++ Loading datasets
++ master dataset for output = base
++ changing output grid spacing to 2.5000 mm
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ Output dataset ./final_epi_vr_base_min_outlier+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 0.4
++ ###########################################################
3dcopy sub-TAG113_SurfVol_ns+orig anat_final.sub-TAG113
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
tee out.allcostX.txt
3dAllineate -base final_epi_vr_base_min_outlier+orig -allcostX -input anat_final.sub-TAG113+orig
3dmask_tool -input copy_af_FSvent+orig -dilate_input -1 -prefix copy_af_FSvent_erode
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ no -frac option: defaulting to -union
++ processing 1 input datasets...
++ padding all datasets by 0 (for dilations)
++ frac 0 over 1 volumes gives min count 0
++ voxel limits: 0 clipped, 1396 survived, 16775820 were zero
++ writing result copy_af_FSvent_erode...
++ Output dataset ./copy_af_FSvent_erode+orig.BRIK
3dmask_tool -input copy_af_FSWe+orig -dilate_input -1 -prefix copy_af_FSWe_erode
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ no -frac option: defaulting to -union
++ processing 1 input datasets...
++ padding all datasets by 0 (for dilations)
++ frac 0 over 1 volumes gives min count 0
++ voxel limits: 0 clipped, 196474 survived, 16580742 were zero
++ writing result copy_af_FSWe_erode...
++ Output dataset ./copy_af_FSWe_erode+orig.BRIK
3dAllineate -source copy_af_aeseg+orig -master pb02.sub-TAG113.r01.volreg+orig -final NN -1Dparam_apply 1D: 12@0' -prefix follow_ROI_aeseg
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
++ Source dataset: ./copy_af_aeseg+orig.HEAD
++ Base dataset:   (not given)
++ Loading datasets
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ Output dataset ./follow_ROI_aeseg+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 2.0
++ ###########################################################
3dAllineate -source copy_af_FSvent_erode+orig -master pb02.sub-TAG113.r01.volreg+orig -final NN -1Dparam_apply 1D: 12@0' -prefix follow_ROI_FSvent
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
++ Source dataset: ./copy_af_FSvent_erode+orig.HEAD
++ Base dataset:   (not given)
++ Loading datasets
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ Output dataset ./follow_ROI_FSvent+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 0.8
++ ###########################################################
3dAllineate -source copy_af_FSWe_erode+orig -master pb02.sub-TAG113.r01.volreg+orig -final NN -1Dparam_apply 1D: 12@0' -prefix follow_ROI_FSWe
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
++ Source dataset: ./copy_af_FSWe_erode+orig.HEAD
++ Base dataset:   (not given)
++ Loading datasets
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ Output dataset ./follow_ROI_FSWe+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 0.8
++ ###########################################################
foreach run ( 01 )
3dmerge -1blur_fwhm 2 -doall -prefix pb03.sub-TAG113.r01.blur pb02.sub-TAG113.r01.volreg+orig
++ 3dmerge: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ default -1dindex = 0
++ default -1tindex = 1
-- Wrote edited dataset: ./pb03.sub-TAG113.r01.blur+orig.BRIK
end
foreach run ( 01 )
3dAutomask -prefix rm.mask_r01 pb03.sub-TAG113.r01.blur+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAutomask: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Emperor Zhark
++ Loading dataset pb03.sub-TAG113.r01.blur+orig
++ Forming automask
 + Fixed clip level = 2631.669922
 + Used gradual clip level = 2408.609131 .. 2802.567871
 + Number voxels above clip level = 82719
 + Clustering voxels ...
 + Largest cluster has 80909 voxels
 + Clustering voxels ...
 + Largest cluster has 80519 voxels
 + Filled   377 voxels in small holes; now have 80896 voxels
 + Filled  1090 voxels in large holes; now have 81986 voxels
 + Clustering voxels ...
 + Largest cluster has 81980 voxels
 + Clustering non-brain voxels ...
 + Clustering voxels ...
 + Largest cluster has 979228 voxels
 + Mask now has 81980 voxels
++ 81980 voxels in the mask [out of 1061208: 7.73%]
++ first  26 x-planes are zero [from R]
++ last   22 x-planes are zero [from L]
++ first  12 y-planes are zero [from S]
++ last   41 y-planes are zero [from I]
++ first  12 z-planes are zero [from P]
++ last   19 z-planes are zero [from A]
++ Output dataset ./rm.mask_r01+orig.BRIK
++ CPU time = 0.000000 sec
end
3dmask_tool -inputs rm.mask_r01+orig.HEAD -union -prefix full_mask.sub-TAG113
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ processing 1 input datasets...
++ padding all datasets by 0 (for dilations)
++ frac 0 over 1 volumes gives min count 0
++ voxel limits: 0 clipped, 81980 survived, 979228 were zero
++ writing result full_mask.sub-TAG113...
++ Output dataset ./full_mask.sub-TAG113+orig.BRIK
3dresample -master full_mask.sub-TAG113+orig -input sub-TAG113_SurfVol_ns+orig -prefix rm.resam.anat
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
3dmask_tool -dilate_input 5 -5 -fill_holes -input rm.resam.anat+orig -prefix mask_anat.sub-TAG113
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ no -frac option: defaulting to -union
++ processing 1 input datasets...
++ padding all datasets by 5 (for dilations)
++ frac 0 over 1 volumes gives min count 0
++ voxel limits: 0 clipped, 88775 survived, 972433 were zero
++ filled 0 holes (0 voxels)
++ writing result mask_anat.sub-TAG113...
++ Output dataset ./mask_anat.sub-TAG113+orig.BRIK
3dmask_tool -input full_mask.sub-TAG113+orig mask_anat.sub-TAG113+orig -inter -prefix mask_epi_anat.sub-TAG113
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ processing 2 input datasets...
++ padding all datasets by 0 (for dilations)
++ frac 1 over 2 volumes gives min count 2
++ voxel limits: 17553 clipped, 76601 survived, 967054 were zero
++ writing result mask_epi_anat.sub-TAG113...
++ Output dataset ./mask_epi_anat.sub-TAG113+orig.BRIK
tee out.mask_ae_overlap.txt
3dABoverlap -no_automask full_mask.sub-TAG113+orig mask_anat.sub-TAG113+orig
tee out.mask_ae_dice.txt
3ddot -dodice full_mask.sub-TAG113+orig mask_anat.sub-TAG113+orig
foreach run ( 01 )
3dTstat -prefix rm.mean_r01 pb03.sub-TAG113.r01.blur+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTstat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: KR Hammett & RW Cox
++ Output dataset ./rm.mean_r01+orig.BRIK
3dcalc -a pb03.sub-TAG113.r01.blur+orig -b rm.mean_r01+orig -c full_mask.sub-TAG113+orig -expr c * min(200, a/b*100)*step(a)*step(b) -prefix pb04.sub-TAG113.r01.scale
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Output dataset ./pb04.sub-TAG113.r01.scale+orig.BRIK
end
1d_tool.py -infile dfile_rall.1D -set_nruns 1 -demean -write motion_demean.1D
1d_tool.py -infile dfile_rall.1D -set_nruns 1 -derivative -demean -write motion_deriv.1D
1d_tool.py -infile dfile_rall.1D -set_nruns 1 -show_censor_count -censor_prev_TR -censor_motion 0.2 motion_sub-TAG113
1deval -a motion_sub-TAG113_censor.1D -b outcount_sub-TAG113_censor.1D -expr a*b
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
1dBport -nodata 390 0.78 -band 0.009 0.2 -invert -nozero
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Block length: 390
 + Frequency indexes: blocklen=390 :: 1 2 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195
set ktrs = `1d_tool.py -infile censor_${subj}_combined_2.1D                
                       -show_trs_uncensored encoded`
1d_tool.py -infile censor_sub-TAG113_combined_2.1D -show_trs_uncensored encoded
foreach run ( 01 )
1d_tool.py -set_run_lengths 390 -select_runs 01 -infile censor_sub-TAG113_combined_2.1D -write rm.censor.r01.1D
3dTproject -polort 3 -prefix rm.det_pcin_r01 -censor rm.censor.r01.1D -cenmode KILL -input pb02.sub-TAG113.r01.volreg+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTproject: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Cox the Algebraic (Linear)
++ input time points = 390 ; censored = 238 ; remaining = 152
++ Setting up regressors
++ 1 Blocks * 4 polynomials -- 4 polort regressors
++ 152 retained time points MINUS 4 regressors ==> 148 D.O.F. left
++ no -mask option ==> processing all 1061208 voxels in dataset
++ Compute pseudo-inverse of fixed orts
++ Loading dataset
[7m*+ WARNING:[0m 3dTproject input data :: 644716 vectors are constant
++ Starting project-orization
++ Convert results to output dataset
++ Output dataset ./rm.det_pcin_r01+orig.BRIK
++ ===== clock time = 1h 32m 12s 934ms
end
3dTcat -prefix rm.det_pcin_rall rm.det_pcin_r01+orig.HEAD
++ 3dTcat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ elapsed time = 1.0 s
3dpc -mask follow_ROI_FSvent+orig -pcsave 3 -prefix rm.ROIPC.FSvent rm.det_pcin_rall+orig
++ 3dpc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
1d_tool.py -censor_fill_parent censor_sub-TAG113_combined_2.1D -infile rm.ROIPC.FSvent_vec.1D -write ROIPC.FSvent.1D
3dDeconvolve -input pb04.sub-TAG113.r01.scale+orig.HEAD -mask full_mask.sub-TAG113+orig -censor censor_sub-TAG113_combined_2.1D -ortvec bandpass_rall.1D bandpass -ortvec ROIPC.FSvent.1D ROIPC.FSvent -polort 3 -num_stimts 12 -stim_file 1 motion_demean.1D[0] -stim_base 1 -stim_label 1 roll_01 -stim_file 2 motion_demean.1D[1] -stim_base 2 -stim_label 2 pitch_01 -stim_file 3 motion_demean.1D[2] -stim_base 3 -stim_label 3 yaw_01 -stim_file 4 motion_demean.1D[3] -stim_base 4 -stim_label 4 dS_01 -stim_file 5 motion_demean.1D[4] -stim_base 5 -stim_label 5 dL_01 -stim_file 6 motion_demean.1D[5] -stim_base 6 -stim_label 6 dP_01 -stim_file 7 motion_deriv.1D[0] -stim_base 7 -stim_label 7 roll_02 -stim_file 8 motion_deriv.1D[1] -stim_base 8 -stim_label 8 pitch_02 -stim_file 9 motion_deriv.1D[2] -stim_base 9 -stim_label 9 yaw_02 -stim_file 10 motion_deriv.1D[3] -stim_base 10 -stim_label 10 dS_02 -stim_file 11 motion_deriv.1D[4] -stim_base 11 -stim_label 11 dL_02 -stim_file 12 motion_deriv.1D[5] -stim_base 12 -stim_label 12 dP_02 -fout -tout -x1D X.xmat.1D -xjpeg X.jpg -x1D_uncensored X.nocensor.xmat.1D -fitts fitts.sub-TAG113 -errts errts.sub-TAG113 -x1D_stop -bucket stats.sub-TAG113
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dDeconvolve extending num_stimts from 12 to 286 due to -ortvec
++ 3dDeconvolve: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: B. Douglas Ward, et al.
++ Skipping check for initial transients
++ Input polort=3; Longest run=304.2 s; Recommended minimum polort=3 ++ OK ++
++ Number of time points: 390 (before censor) ; 152 (after)
 + Number of parameters:  290 [290 baseline ; 0 signal]
[7m** ERROR:[0m  *** Censoring has made regression impossible :( ***
[7m** FATAL ERROR:[0m 3dDeconvolve dies: Insufficient data (152) for estimating 290 parameters
** Program compile date = Jul  6 2018
