echo auto-generated by afni_proc.py, Tue Jan 22 09:48:13 2019
echo (version 6.16, July 5, 2018)
echo execution started: `date`
date
afni -ver
afni_history -check_date 3 May 2018
if ( 0 ) then
if ( 0 > 0 ) then
set subj = sub-TAG132
endif
set output_dir = sub-TAG132.results
if ( -d sub-TAG132.results ) then
set runs = ( `count -digits 2 1 2` )
count -digits 2 1 2
mkdir sub-TAG132.results
mkdir sub-TAG132.results/stimuli
3dcopy /projects/dsnlab/shared/tag/bids_data/derivatives/freesurfer/sub-TAG132/SUMA/sub-TAG132_SurfVol.nii.gz sub-TAG132.results/sub-TAG132_SurfVol
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dcopy /projects/dsnlab/shared/tag/bids_data/derivatives/freesurfer/sub-TAG132/SUMA/aparc.a2009s+aseg_rank.nii.gz sub-TAG132.results/copy_af_aaseg
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dcopy /projects/dsnlab/shared/tag/bids_data/derivatives/freesurfer/sub-TAG132/SUMA/aparc.a2009s+aseg_rank.nii.gz sub-TAG132.results/copy_af_aeseg
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dcopy /projects/dsnlab/shared/tag/bids_data/derivatives/freesurfer/sub-TAG132/SUMA/sub-TAG132_vent.nii.gz sub-TAG132.results/copy_af_FSvent
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dcopy /projects/dsnlab/shared/tag/bids_data/derivatives/freesurfer/sub-TAG132/SUMA/sub-TAG132_WM.nii.gz sub-TAG132.results/copy_af_FSWe
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dTcat -prefix sub-TAG132.results/pb00.sub-TAG132.r01.tcat /projects/dsnlab/shared/tag/bids_data/sub-TAG132/ses-wave2/func/sub-TAG132_ses-wave2_task-rest_run-01_bold.nii.gz[5..$]
++ 3dTcat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ elapsed time = 7.9 s
3dTcat -prefix sub-TAG132.results/pb00.sub-TAG132.r02.tcat /projects/dsnlab/shared/tag/bids_data/sub-TAG132/ses-wave2/func/sub-TAG132_ses-wave2_task-rest_run-02_bold.nii.gz[5..$]
++ 3dTcat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ elapsed time = 5.9 s
set tr_counts = ( 390 390 )
cd sub-TAG132.results
touch out.pre_ss_warn.txt
foreach run ( 01 02 )
3dToutcount -automask -fraction -polort 3 -legendre pb00.sub-TAG132.r01.tcat+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dToutcount: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-TAG132.r01.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-TAG132.r01.tcat+orig.BRIK is 6.596417 degrees from plumb.
++ 96401 voxels passed mask/clip
1deval -a outcount.r01.1D -expr 1-step(a-0.1)
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
1deval -a outcount.r01.1D{0} -expr step(a-0.4)
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
end
3dToutcount -automask -fraction -polort 3 -legendre pb00.sub-TAG132.r02.tcat+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dToutcount: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-TAG132.r02.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-TAG132.r02.tcat+orig.BRIK is 6.596417 degrees from plumb.
++ 97284 voxels passed mask/clip
1deval -a outcount.r02.1D -expr 1-step(a-0.1)
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
1deval -a outcount.r02.1D{0} -expr step(a-0.4)
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
end
cat outcount.r01.1D outcount.r02.1D
cat rm.out.cen.r01.1D rm.out.cen.r02.1D
set minindex = `3dTstat -argmin -prefix - outcount_rall.1D\'`
3dTstat -argmin -prefix - outcount_rall.1D'
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTstat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: KR Hammett & RW Cox
[7m*+ WARNING:[0m Input dataset is not 3D+time; assuming TR=1.0
set ovals = ( `1d_tool.py -set_run_lengths $tr_counts                       
                          -index_to_run_tr $minindex` )
1d_tool.py -set_run_lengths 390 390 -index_to_run_tr 720
set minoutrun = 02
set minouttr = 330
tee out.min_outlier.txt
echo min outlier: run 02, TR 330
foreach run ( 01 02 )
3dDespike -NEW -nomask -prefix pb01.sub-TAG132.r01.despike pb00.sub-TAG132.r01.tcat+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dDespike: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-TAG132.r01.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-TAG132.r01.tcat+orig.BRIK is 6.596417 degrees from plumb.
++ Input dataset is in short format, but output will be in float format
++ ignoring first 0 time points, using last 390
++ using 390 time points => -corder 13
++ Loading dataset pb00.sub-TAG132.r01.tcat+orig
++ processing all 423360 voxels in dataset
++ Procesing time series with NEW model fit algorithm
++ smash edit thresholds: 3.1 .. 5.0 MADs
 +   [ 3.457% .. 0.072% of normal distribution]
 +   [ 8.839% .. 3.125% of Laplace distribution]
++ start OpenMP thread #0
.....................................................................................................................................................................................
++ Elapsed despike time =  31s 232ms

++ FINAL: 163047690 data points, 6366952 edits [3.905%], 436389 big edits [0.268%]
++ Output dataset ./pb01.sub-TAG132.r01.despike+orig.BRIK
end
3dDespike -NEW -nomask -prefix pb01.sub-TAG132.r02.despike pb00.sub-TAG132.r02.tcat+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dDespike: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-TAG132.r02.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-TAG132.r02.tcat+orig.BRIK is 6.596417 degrees from plumb.
++ Input dataset is in short format, but output will be in float format
++ ignoring first 0 time points, using last 390
++ using 390 time points => -corder 13
++ Loading dataset pb00.sub-TAG132.r02.tcat+orig
++ processing all 423360 voxels in dataset
++ Procesing time series with NEW model fit algorithm
++ smash edit thresholds: 3.1 .. 5.0 MADs
 +   [ 3.457% .. 0.072% of normal distribution]
 +   [ 8.839% .. 3.125% of Laplace distribution]
++ start OpenMP thread #0
.....................................................................................................................................................................................
++ Elapsed despike time =  32s 73ms

++ FINAL: 163047690 data points, 6162575 edits [3.780%], 371637 big edits [0.228%]
++ Output dataset ./pb01.sub-TAG132.r02.despike+orig.BRIK
end
3dbucket -prefix vr_base_min_outlier pb01.sub-TAG132.r02.despike+orig[330]
++ 3dbucket: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
align_epi_anat.py -anat2epi -anat sub-TAG132_SurfVol+orig -save_skullstrip -suffix _al_junk -epi vr_base_min_outlier+orig -epi_base 0 -epi_strip 3dAutomask -giant_move -cost lpc+ZZ -volreg off -tshift off
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
Warning 3dSkullStrip:****************
 Surface self intersecting! trying again:
 smoothing of 84, avoid_vent -1
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dWarp: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: RW Cox
++ Output dataset ./__tt_sub-TAG132_SurfVol_ns_ob+orig.BRIK
++ 3dbucket: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAutomask: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Emperor Zhark
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./__tt_vr_base_min_outlier_ts+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./__tt_vr_base_min_outlier_ts+orig.BRIK is 6.596417 degrees from plumb.
++ Loading dataset ./__tt_vr_base_min_outlier_ts+orig
++ Forming automask
 + Fixed clip level = 2315.431885
 + Used gradual clip level = 2051.527588 .. 2415.812012
 + Number voxels above clip level = 100060
 + Clustering voxels ...
 + Largest cluster has 97693 voxels
 + Clustering voxels ...
 + Largest cluster has 96232 voxels
 + Filled   945 voxels in small holes; now have 97177 voxels
 + Filled    11 voxels in large holes; now have 97188 voxels
 + Clustering voxels ...
 + Largest cluster has 97185 voxels
 + Clustering non-brain voxels ...
 + Clustering voxels ...
 + Largest cluster has 326175 voxels
 + Mask now has 97185 voxels
++ 97185 voxels in the mask [out of 423360: 22.96%]
++ first  14 x-planes are zero [from R]
++ last   14 x-planes are zero [from L]
++ first   5 y-planes are zero [from P]
++ last    6 y-planes are zero [from A]
++ first   0 z-planes are zero [from I]
++ last    4 z-planes are zero [from S]
++ applying mask to original data
++ Writing masked data
++ Output dataset ./__tt_vr_base_min_outlier_ts_ns+orig.BRIK
++ CPU time = 0.000000 sec
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Output dataset ././__tt_vr_base_min_outlier_ts_ns_wt+orig.BRIK
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
++ lpc+ parameters: hel=0.40 mi=0.20 nmi=0.20 crA=0.40 ov=0.40 [to be zeroed at Final iteration]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./__tt_vr_base_min_outlier_ts_ns_wt+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./__tt_vr_base_min_outlier_ts_ns_wt+orig.BRIK is 6.596417 degrees from plumb.
++ Oblique dataset:./__tt_vr_base_min_outlier_ts_ns+orig.BRIK is 6.596417 degrees from plumb.
++ Source dataset: ./__tt_sub-TAG132_SurfVol_ns_ob+orig.HEAD
++ Base dataset:   ./__tt_vr_base_min_outlier_ts_ns+orig.HEAD
++ Loading datasets
++ 1648788 voxels in -source_automask+2
++ Zero-pad: zbot=4 ztop=0
++ 97184 voxels [21.5%] in weight mask
++ Output dataset ./__tt_sub-TAG132_SurfVol_ns_ob_al_junk_wtal+orig.BRIK
++ Number of points for matching = 97184
++ NOTE: base and source coordinate systems have different handedness
 +       Orientations: base=Left handed (RPI); source=Right handed (RAI)
++ Local correlation: blok type = 'RHDD(9.225)'
++ -lpc+ parameters: hel=0.40 mi=0.20 nmi=0.20 crA=0.40 ov=0.40 [to be zeroed at Final iteration]
++ base center of mass = 41.927 37.991 33.960 (index)
 + source center of mass = 133.070 169.053 157.816 (index)
 + source-target CM = -1.715 -0.485 -7.554 (xyz)
 + center of mass shifts = -1.715 -0.485 -7.554
++ shift param auto-range: -68.3..64.9 -67.1..66.1 -58.1..43.0
 + Range param#4 [z-angle] = -6.000000 .. 6.000000
 + Range param#5 [x-angle] = -6.000000 .. 6.000000
 + Range param#6 [y-angle] = -6.000000 .. 6.000000
 + Range param#1 [x-shift] = -11.714783 .. 8.285217
 + Range param#2 [y-shift] = -10.484894 .. 9.515106
 + Range param#3 [z-shift] = -17.554276 .. 2.445724
 + Range param#4 [z-angle] = -45.000000 .. 45.000000
 + Range param#5 [x-angle] = -45.000000 .. 45.000000
 + Range param#6 [y-angle] = -45.000000 .. 45.000000
 + Range param#1 [x-shift] = -41.714783 .. 38.285217
 + Range param#2 [y-shift] = -40.484894 .. 39.515106
 + Range param#3 [z-shift] = -47.554276 .. 32.445724
 + 12 free parameters
++ Normalized convergence radius = 0.000423
++ changing output grid spacing to 1.0000 mm
++ OpenMP thread count = 1
++ ======= Allineation of 1 sub-bricks using Local Pearson Signed + Others =======
 + source mask has 1648788 [out of 21979895] voxels
 + base mask has 121594 [out of 451584] voxels
++ ========== sub-brick #0 ========== [total CPU to here=0.0 s]
++ *** Coarse pass begins ***
 + * Enter alignment setup routine
 + - copying base image
 + - copying source image
 + - Smoothing base; radius=2.50
 + - Smoothing source; radius=2.50
 + !source mask fill: ubot=28 usiz=53.5
 + - copying weight image
 + - using 97184 points from base image [use_all=2]
 + * Exit alignment setup routine
 + - Search for coarse starting parameters
 +  - histogram: source clip 32.2209 .. 139.076; base clip 1594.53 .. 5607.56
 +  - versus source range 0.0288186 .. 132.038; base range 0 .. 7361
 + 87919 total points stored in 839 'RHDD(9.55775)' bloks
 + - number of free params = 6
 + - Testing (64+61)*64 params:#oo+o+o.-.+-+-...$ooo.-o + - best 45 costs found:
    0 v= 0.488104:  -1.71  -0.48  -7.55   0.00   0.00   0.00  [grid]
    1 v= 0.731218:  -5.79   5.74 -15.35  -4.32 -22.85 -18.95  [rand]
    2 v= 0.766471:   2.36   5.74 -15.35   4.32 -22.85  18.95  [rand]
    3 v= 0.807985: -15.92   8.97  -2.72  15.99 -13.53 -29.93  [rand]
    4 v= 0.855518:  -5.79   5.74 -15.35   4.32 -22.85 -18.95  [rand]
    5 v= 0.856328:  12.49   8.97  -2.72 -15.99 -13.53  29.93  [rand]
    6 v= 0.871792:   2.36   5.74 -15.35  -4.32 -22.85  18.95  [rand]
    7 v= 0.903640:  11.62 -13.82   5.78 -15.00  15.00  15.00  [grid]
    8 v= 0.916230: -15.05  12.85 -20.89  30.00 -15.00  15.00  [grid]
    9 v= 0.916321:  -5.79  -6.71   0.24   4.32  22.85  18.95  [rand]
   10 v= 0.937336:  11.62  12.85 -20.89 -30.00 -15.00 -15.00  [grid]
   11 v= 0.937582:   2.36  -6.71   0.24  -4.32  22.85  18.95  [rand]
   12 v= 0.940751:  12.49   8.97 -12.39 -15.99 -13.53  29.93  [rand]
   13 v= 0.941198: -28.38  12.85   5.78  30.00 -15.00 -30.00  [grid]
   14 v= 0.949002:   2.36  -6.71   0.24   4.32  22.85  18.95  [rand]
   15 v= 0.960167: -15.92   8.97 -12.39  15.99 -13.53 -29.93  [rand]
   16 v= 0.962969: -15.05  12.85 -20.89  15.00 -30.00 -15.00  [grid]
   17 v= 0.972049:  11.62 -13.82   5.78 -15.00  15.00  30.00  [grid]
   18 v= 0.977547:  11.62  12.85 -20.89 -15.00 -30.00  15.00  [grid]
   19 v= 0.982042:   2.36  -6.71   0.24  -4.32  22.85 -18.95  [rand]
   20 v= 0.987196: -21.21  16.19  -4.95  30.54 -19.59 -20.03  [rand]
   21 v= 1.000421: -15.05 -13.82   5.78  15.00  15.00 -15.00  [grid]
   22 v= 1.014059: -21.21  16.19 -10.16  30.54 -19.59 -20.03  [rand]
   23 v= 1.014464:  -5.79  -6.71 -15.35  -4.32 -22.85 -18.95  [rand]
   24 v= 1.014884:   2.36   5.74   0.24   4.32  22.85  18.95  [rand]
   25 v= 1.019279:  -5.79  -6.71   0.24   4.32  22.85 -18.95  [rand]
   26 v= 1.020163:   2.36   5.74   0.24  -4.32  22.85  18.95  [rand]
   27 v= 1.021903:  11.62  12.85 -20.89 -30.00 -30.00 -15.00  [grid]
   28 v= 1.036725:  12.49  -9.94  -2.72 -15.99  13.53 -29.93  [rand]
   29 v= 1.046212:  24.95  12.85 -20.89 -30.00 -30.00  15.00  [grid]
   30 v= 1.046457:   2.36   5.74 -15.35  -4.32 -22.85 -18.95  [rand]
   31 v= 1.046857:  11.62 -13.82   5.78 -15.00  15.00 -15.00  [grid]
   32 v= 1.051278: -15.05  12.85 -20.89 -15.00 -30.00 -30.00  [grid]
   33 v= 1.053937:   2.36  -6.71 -15.35   4.32 -22.85  18.95  [rand]
   34 v= 1.054474: -15.92  -9.94  -2.72  15.99  13.53  29.93  [rand]
   35 v= 1.059607:  22.48   9.85 -12.08 -27.51 -29.30  27.65  [rand]
   36 v= 1.061124:  -5.79  -6.71   0.24  -4.32  22.85 -18.95  [rand]
   37 v= 1.061495:  12.49  -9.94  -2.72 -15.99  13.53  29.93  [rand]
   38 v= 1.063387:  -5.79   5.74   0.24   4.32  22.85 -18.95  [rand]
   39 v= 1.069518:  -5.79   5.74   0.24   4.32  22.85  18.95  [rand]
   40 v= 1.071853:  17.78  16.19 -10.16 -30.54 -19.59  20.03  [rand]
   41 v= 1.079124:  17.78  16.19  -4.95 -30.54 -19.59  20.03  [rand]
   42 v= 1.082191:  20.63  15.90 -23.39 -41.11 -22.86  -3.97  [rand]
   43 v= 1.082322:  12.31  15.23 -22.22 -24.25 -37.55  -4.41  [rand]
   44 v= 1.092951:  24.95  12.85 -20.89 -15.00 -30.00  30.00  [grid]
*[#8004=0.311673] *[#8015=0.304966] *[#8017=0.297703] *[#8153=0.296411] *[#8154=0.296254] *[#8155=0.295616] *[#8156=0.291761] *[#8284=0.291159] *[#8287=0.289936] *[#8291=0.287412] *[#8873=0.28662] *[#9912=0.285509] *[#10299=0.285057] *[#10306=0.28391]  + - costs of the above after a little optimization:
    0 v= 0.297703:  -1.71  -0.51  -3.95   0.36  -0.21   0.22  [grid]
    1 v= 0.298769:  -0.50  -1.16  -4.34   0.15  -0.09   1.08  [rand]
    2 v= 0.291761:  -1.59  -0.58  -4.35   0.13  -0.56   0.34  [rand]
    3 v= 0.607219: -11.15  -1.43  -5.98   3.59  -2.70 -25.21  [rand]
    4 v= 0.287412:  -0.96   0.01  -4.63  -0.05  -0.77   0.69  [rand]
    5 v= 0.516368:   2.54   0.55  -9.78  -1.39  -2.88   8.89  [rand]
    6 v= 0.456419:  -1.76   3.42  -9.86   1.44  -4.84   1.87  [rand]
    7 v= 0.293424:  -0.25  -0.70  -4.13  -0.35  -0.37   1.55  [grid]
    8 v= 0.535386:  -6.39  -4.58  -3.67   3.55   3.12  -6.49  [grid]
    9 v= 0.420851:  -5.14   0.33  -3.39   2.54  -0.05  -0.89  [rand]
   10 v= 0.489881:   3.50  -3.24  -6.11  -3.96   0.24   5.50  [grid]
   11 v= 0.286620:  -0.65  -0.48  -4.51  -0.19  -0.64   1.32  [rand]
   12 v= 0.610466:   9.90  -1.50 -11.48  -1.94  -9.23  26.83  [rand]
   13 v= 0.692853: -22.07   1.42  -0.60  23.62  -1.15 -22.59  [grid]
   14 v= 0.294302:  -1.02  -1.18  -4.22  -0.19   0.12   0.52  [rand]
   15 v= 0.411603:  -3.95  -1.94  -3.20  -0.50   0.48  -2.55  [rand]
   16 v= 0.378190:  -2.92   0.24  -4.05   0.05  -1.97  -1.94  [grid]
   17 v= 0.582619:   7.73  -3.69  -6.19  -6.40   2.17  19.79  [grid]
   18 v= 0.560256:   4.77   0.03 -10.04  -3.89  -4.18  14.03  [grid]
   19 v= 0.289417:  -1.08  -0.08  -4.55   0.16  -0.84   0.62  [rand]
   20 v= 0.744929: -25.28   5.68  -8.68  21.82 -17.84 -21.87  [rand]
   21 v= 0.545665:  -8.13  -2.51  -7.79   4.33  -0.42  -8.29  [grid]
   22 v= 0.585100:  -8.02   1.44 -13.00  11.27 -12.71  -0.17  [rand]
   23 v= 0.593042:  -5.96  -1.73 -11.59  -4.68  -8.92 -18.16  [rand]
   24 v= 0.293688:  -0.91   0.22  -5.00  -0.11  -1.06   0.76  [rand]
   25 v= 0.285509:  -1.10  -0.66  -4.24   0.09  -0.40   0.82  [rand]
   26 v= 0.286150:  -0.85  -0.16  -4.51   0.02  -0.56   0.88  [rand]
   27 v= 0.634619:  -8.49  -1.77  -8.47  -8.89  -3.67 -37.36  [grid]
   28 v= 0.291992:  -0.81  -1.13  -4.29  -0.05   0.01   0.84  [rand]
   29 v= 0.666494:  17.67   0.44  -1.88 -17.18  -4.47  32.52  [grid]
  *30 v= 0.283910:  -0.99  -0.37  -4.44  -0.12  -0.52   0.83  [rand]
   31 v= 0.286327:  -0.70  -0.33  -4.35  -0.33  -0.52   0.89  [grid]
   32 v= 0.465440:  -2.94  -3.52  -3.51   2.76   1.98  -2.50  [grid]
   33 v= 0.284619:  -0.80  -0.52  -4.34  -0.04  -0.34   1.01  [rand]
   34 v= 0.310436:  -0.66   0.15  -5.21   0.09  -1.48   1.46  [rand]
   35 v= 0.623060:   9.32   0.11 -13.09  -0.49 -12.19  27.75  [rand]
   36 v= 0.290815:  -1.10  -0.98  -4.11   0.09  -0.12   0.64  [rand]
   37 v= 0.418509:   1.19  -2.44  -3.32   1.01   1.26   3.95  [rand]
   38 v= 0.307981:  -1.76  -1.26  -4.13   0.39  -0.07  -0.11  [rand]
   39 v= 0.294697:  -0.72  -1.08  -4.18  -0.26   0.20   1.20  [rand]
   40 v= 0.361890:   1.03  -1.28  -5.36  -0.84  -0.96   2.85  [rand]
   41 v= 0.629424:   9.48  -1.20  -0.96  -9.06   4.69  23.70  [rand]
   42 v= 0.845002:  19.72   8.45 -19.69 -34.72 -17.87  -6.52  [rand]
   43 v= 0.310406:  -1.00   0.62  -5.33  -0.16  -1.49   0.90  [rand]
   44 v= 0.711311:  24.87   0.98   1.56 -20.58  -7.39  43.61  [grid]
 + - save #30 for twobest
 + - skip #33 for twobest: too close to set #30
 + - skip #25 for twobest: too close to set #30
 + - skip #26 for twobest: too close to set #30
 + - skip #31 for twobest: too close to set #30
 + - skip #11 for twobest: too close to set #30
 + - skip # 4 for twobest: too close to set #30
 + - skip #19 for twobest: too close to set #30
 + - skip #36 for twobest: too close to set #30
 + - skip # 2 for twobest: too close to set #30
 + - skip #28 for twobest: too close to set #30
 + - skip # 7 for twobest: too close to set #30
 + - skip #24 for twobest: too close to set #30
 + - skip #14 for twobest: too close to set #30
 + - skip #39 for twobest: too close to set #30
 + - skip # 0 for twobest: too close to set #30
 + - skip # 1 for twobest: too close to set #30
 + - skip #38 for twobest: too close to set #30
 + - skip #43 for twobest: too close to set #30
 + - skip #34 for twobest: too close to set #30
 + - skip #40 for twobest: too close to set #30
 + - skip #16 for twobest: too close to set #30
 + - skip #15 for twobest: too close to set #30
 + - skip #37 for twobest: too close to set #30
 + - skip # 9 for twobest: too close to set # 2
 + - save # 6 for twobest
 + - skip #32 for twobest: too close to set #30
 + - skip #10 for twobest: too close to set # 7
 + - skip # 5 for twobest: too close to set #10
 + - skip # 8 for twobest: too close to set #15
 + - save #21 for twobest
 + - save #18 for twobest
 + - save #17 for twobest
 + - save #22 for twobest
 + - save #23 for twobest
 + - save # 3 for twobest
 + - save #12 for twobest
 + - skip #35 for twobest: too close to set #12
 + - save #41 for twobest
 + - save #27 for twobest
 + - save #29 for twobest
 + - save #13 for twobest
 + - save #44 for twobest
 + - save #20 for twobest
 + - save #42 for twobest
 + - Coarse startup search net CPU time = 0.0 s
++ Start refinement #1 on 12 coarse parameter sets
 + * Enter alignment setup routine
 + - Smoothing base; radius=1.94
 + - Smoothing source; radius=1.94
 + !source mask fill: ubot=28 usiz=53.5
 + - retaining old weight image
 + - using 97184 points from base image [use_all=2]
 + * Exit alignment setup routine
 +  - histogram: source clip 32.2721 .. 139.448; base clip 1597.81 .. 5682.24
 +  - versus source range 0.0019187 .. 132.062; base range 0 .. 7377.08
 + 90072 total points stored in 884 'RHDD(9.42766)' bloks
 + - param set #1 has cost=0.306112
 + -- Parameters = -1.0132 -0.6777 -4.5164 -0.0600 -0.4928 0.6123 0.9911 1.0056 1.0008 -0.0052 0.0033 0.0002
 + - param set #2 has cost=0.339365
 + -- Parameters = -1.3016 -0.7000 -4.5016 0.2478 -0.0924 0.7841 0.9979 0.9970 1.0063 0.0293 0.0022 0.0068
 + - param set #3 has cost=0.318861
 + -- Parameters = -1.4780 -0.9894 -4.2239 -0.0059 0.1055 0.4160 1.0042 1.0002 0.9943 0.0083 0.0063 0.0065
 + - param set #4 has cost=0.350282
 + -- Parameters = -1.4578 -1.5910 -3.6571 0.1948 -0.0777 0.0045 0.9718 0.9997 0.9655 0.0071 0.0337 0.0064
 + - param set #5 has cost=0.345997
 + -- Parameters = -0.1068 -2.2073 -3.4103 -0.1085 1.4932 2.2407 0.9914 1.0100 0.9790 0.0349 -0.0314 0.0255
 + - param set #6 has cost=0.487570
 + -- Parameters = -5.5085 5.0712 -7.6543 3.9415 -2.8725 0.5289 0.9944 0.9751 1.0002 0.0138 0.0137 0.0054
 + - param set #7 has cost=0.339986
 + -- Parameters = -2.2843 -0.0085 -4.9195 0.8126 -0.8565 -0.7676 0.9873 1.0082 0.9976 0.0270 0.0370 0.0045
 + - param set #8 has cost=0.399155
 + -- Parameters = -3.9420 -0.3493 -5.3575 2.1739 0.4172 -1.8246 0.9877 0.9834 1.0142 0.0608 0.0444 0.0283
 + - param set #9 has cost=0.560023
 + -- Parameters = 6.7074 -0.2071 -7.9233 -2.2429 -13.1025 17.7884 0.9811 1.0066 0.9626 -0.0109 -0.0154 -0.0147
 + - param set #10 has cost=0.493609
 + -- Parameters = 3.6948 -4.5523 -1.4587 -2.2261 3.1871 4.5198 0.9453 1.0093 0.9939 -0.0062 0.0098 0.0125
 + - param set #11 has cost=0.580354
 + -- Parameters = -9.0342 3.7242 -7.9768 -10.4385 -8.5274 -37.2913 0.9685 0.9698 0.9921 -0.0007 0.0055 0.0041
 + - param set #12 has cost=0.306644
 + -- Parameters = -1.1112 -0.6687 -4.2924 0.0452 -0.1681 0.6657 0.9947 1.0025 0.9949 0.0003 0.0012 0.0042
 + - sorting parameter sets by cost
 + -- scanning for distances from #1
 + --- dist(#2,#1) = 0.0246 
 + --- dist(#3,#1) = 0.0605 
 + --- dist(#4,#1) = 0.155 
 + --- dist(#5,#1) = 0.151 
 + --- dist(#6,#1) = 0.18 
 + --- dist(#7,#1) = 0.136 
 + --- dist(#8,#1) = 0.297 
 + --- dist(#9,#1) = 0.0854 
 + --- dist(#10,#1) = 0.125 
 + --- dist(#11,#1) = 0.191 
 + --- dist(#12,#1) = 0.421 
++ Start refinement #2 on 12 coarse parameter sets
 + * Enter alignment setup routine
 + - Smoothing base; radius=1.51
 + - Smoothing source; radius=1.51
 + !source mask fill: ubot=28 usiz=53.5
 + - retaining old weight image
 + - using 97184 points from base image [use_all=2]
 + * Exit alignment setup routine
 +  - histogram: source clip 32.3403 .. 139.742; base clip 1600.91 .. 5766.8
 +  - versus source range 0 .. 132.095; base range 0 .. 7389.82
 + 88715 total points stored in 913 'RHDD(9.3481)' bloks
 + - param set #1 has cost=0.318681
 + -- Parameters = -1.0778 -0.7995 -4.0604 -0.0911 -0.3760 0.6164 0.9945 1.0079 0.9909 -0.0052 0.0040 -0.0027
 + - param set #2 has cost=0.317257
 + -- Parameters = -1.0079 -0.9192 -4.0886 -0.0457 -0.4172 0.7355 0.9900 1.0132 0.9896 -0.0038 -0.0016 -0.0018
 + - param set #3 has cost=0.319136
 + -- Parameters = -1.3856 -1.1692 -3.9343 0.0220 -0.0896 0.2006 0.9966 1.0140 0.9870 -0.0012 0.0103 0.0028
 + - param set #4 has cost=0.323232
 + -- Parameters = -0.8525 -0.9980 -4.2060 0.0567 -0.0426 1.0346 0.9897 1.0114 0.9919 0.0042 -0.0064 0.0061
 + - param set #5 has cost=0.330985
 + -- Parameters = -2.1908 -0.6188 -3.8443 0.4935 -0.8318 -0.6544 0.9919 1.0101 0.9874 0.0152 0.0350 -0.0146
 + - param set #6 has cost=0.330820
 + -- Parameters = -0.4710 -2.0418 -3.9909 -0.0316 0.9433 1.5983 0.9855 1.0177 0.9855 0.0009 -0.0207 0.0230
 + - param set #7 has cost=0.320179
 + -- Parameters = -1.4362 -1.2409 -3.7595 0.0889 -0.0968 0.1968 0.9918 1.0153 0.9853 0.0069 0.0153 -0.0001
 + - param set #8 has cost=0.360457
 + -- Parameters = -2.8138 -1.4873 -4.7536 0.9196 0.2324 -1.2579 0.9758 1.0114 1.0030 0.0301 0.0435 0.0144
 + - param set #9 has cost=0.334902
 + -- Parameters = -1.4741 -0.3610 -4.1494 0.0974 -0.6613 0.2692 1.0059 0.9974 0.9928 0.0093 0.0104 -0.0062
 + - param set #10 has cost=0.370914
 + -- Parameters = -0.0611 -1.2388 -4.2419 -0.4148 1.0472 1.8540 0.9768 0.9913 0.9936 -0.0176 -0.0242 0.0301
 + - param set #11 has cost=0.548928
 + -- Parameters = 1.7129 -1.1927 -7.2070 -1.3315 -9.1580 5.5334 0.9982 1.0147 0.9517 -0.0081 -0.0137 -0.0122
 + - param set #12 has cost=0.584488
 + -- Parameters = -8.8463 3.9309 -8.1934 -10.7342 -8.2461 -37.3398 0.9677 0.9706 0.9875 0.0066 0.0035 0.0034
 + - sorting parameter sets by cost
 + -- scanning for distances from #1
 + --- dist(#2,#1) = 0.0254 
 + --- dist(#3,#1) = 0.0535 
 + --- dist(#4,#1) = 0.0758 
 + --- dist(#5,#1) = 0.0359 
 + --- dist(#6,#1) = 0.111 
 + --- dist(#7,#1) = 0.164 
 + --- dist(#8,#1) = 0.0587 
 + --- dist(#9,#1) = 0.203 
 + --- dist(#10,#1) = 0.144 
 + --- dist(#11,#1) = 0.103 
 + --- dist(#12,#1) = 0.423 
++ Start refinement #3 on 12 coarse parameter sets
 + * Enter alignment setup routine
 + - Smoothing base; radius=1.18
 + - Smoothing source; radius=1.18
 + !source mask fill: ubot=28 usiz=53.5
 + - retaining old weight image
 + - using 97184 points from base image [use_all=2]
 + * Exit alignment setup routine
 +  - histogram: source clip 32.4241 .. 140.105; base clip 1602.96 .. 5819.95
 +  - versus source range 0 .. 132.041; base range 0 .. 7397.82
 + 89919 total points stored in 926 'RHDD(9.29965)' bloks
 + - param set #1 has cost=0.334912
 + -- Parameters = -1.0079 -0.9033 -4.0546 -0.0513 -0.4360 0.7480 0.9911 1.0135 0.9893 -0.0038 -0.0015 -0.0022
 + - param set #2 has cost=0.334262
 + -- Parameters = -1.0339 -0.7499 -4.0338 -0.0651 -0.5577 0.6415 0.9929 1.0114 0.9888 -0.0060 0.0020 -0.0054
 + - param set #3 has cost=0.335209
 + -- Parameters = -1.2573 -1.0598 -3.9560 -0.0113 -0.2609 0.3478 0.9920 1.0132 0.9866 -0.0016 0.0095 -0.0012
 + - param set #4 has cost=0.336375
 + -- Parameters = -1.3922 -1.1440 -3.8716 0.1378 -0.2190 0.3127 0.9921 1.0148 0.9854 0.0037 0.0113 -0.0012
 + - param set #5 has cost=0.336696
 + -- Parameters = -0.8966 -1.1361 -4.0290 -0.0559 -0.0737 0.9294 0.9918 1.0134 0.9890 -0.0030 -0.0061 0.0038
 + - param set #6 has cost=0.344277
 + -- Parameters = -0.5112 -2.0070 -3.9288 -0.1442 0.8429 1.4678 0.9902 1.0177 0.9858 -0.0028 -0.0163 0.0202
 + - param set #7 has cost=0.341664
 + -- Parameters = -1.9428 -0.5839 -3.7789 0.3865 -0.8872 -0.4157 0.9939 1.0130 0.9835 0.0097 0.0252 -0.0149
 + - param set #8 has cost=0.338508
 + -- Parameters = -1.4728 -0.5513 -4.1444 0.0370 -0.6417 0.0728 0.9976 1.0075 0.9917 0.0029 0.0150 -0.0075
 + - param set #9 has cost=0.357079
 + -- Parameters = -1.9580 -1.2382 -4.4475 0.3077 0.3852 -0.5176 0.9915 1.0100 0.9961 0.0175 0.0345 0.0160
 + - param set #10 has cost=0.353790
 + -- Parameters = -0.1836 -2.0029 -4.4425 -0.3925 1.0362 1.7159 0.9842 1.0126 0.9992 -0.0167 -0.0205 0.0262
 + - param set #11 has cost=0.341319
 + -- Parameters = -0.6398 -1.1396 -2.9942 -0.1420 -0.2733 1.1556 0.9938 1.0157 0.9646 -0.0051 -0.0116 -0.0066
 + - param set #12 has cost=0.584149
 + -- Parameters = -8.8423 4.2666 -7.9090 -12.7639 -7.5032 -37.0687 0.9662 0.9642 0.9664 0.0286 -0.0140 0.0081
 + - sorting parameter sets by cost
 + -- scanning for distances from #1
 + --- dist(#2,#1) = 0.0155 XXX
 + --- dist(#3,#1) = 0.0437 
 + --- dist(#4,#1) = 0.0413 
 + --- dist(#5,#1) = 0.0587 
 + --- dist(#6,#1) = 0.0661 
 + --- dist(#7,#1) = 0.104 
 + --- dist(#8,#1) = 0.115 
 + --- dist(#9,#1) = 0.142 
 + --- dist(#10,#1) = 0.146 
 + --- dist(#11,#1) = 0.419 
 + - cast out 1 parameter set for being too close to best set
 + - Total coarse refinement net CPU time = 0.0 s; 3374 funcs
++ *** Fine pass begins ***
 + * Enter alignment setup routine
 + - Smoothing base; radius=1.00
 + - Smoothing source; radius=1.00
 + !source mask fill: ubot=28 usiz=53.5
 + - retaining old weight image
 + * Exit alignment setup routine
++ Picking best parameter set out of 12 cases
 +  - histogram: source clip 32.4368 .. 140.16; base clip 1602.96 .. 5819.95
 +  - versus source range 0 .. 132.012; base range 0 .. 7401.23
 + 88978 total points stored in 927 'RHDD(9.27904)' bloks
 + - cost(#1)=0.331045 *
 + -- Parameters = -1.0339 -0.7499 -4.0338 -0.0651 -0.5577 0.6415 0.9929 1.0114 0.9888 -0.0060 0.0020 -0.0054
 + - cost(#2)=0.331936  
 + -- Parameters = -1.2573 -1.0598 -3.9560 -0.0113 -0.2609 0.3478 0.9920 1.0132 0.9866 -0.0016 0.0095 -0.0012
 + - cost(#3)=0.332853  
 + -- Parameters = -1.3922 -1.1440 -3.8716 0.1378 -0.2190 0.3127 0.9921 1.0148 0.9854 0.0037 0.0113 -0.0012
 + - cost(#4)=0.333441  
 + -- Parameters = -0.8966 -1.1361 -4.0290 -0.0559 -0.0737 0.9294 0.9918 1.0134 0.9890 -0.0030 -0.0061 0.0038
 + - cost(#5)=0.334958  
 + -- Parameters = -1.4728 -0.5513 -4.1444 0.0370 -0.6417 0.0728 0.9976 1.0075 0.9917 0.0029 0.0150 -0.0075
 + - cost(#6)=0.339033  
 + -- Parameters = -0.6398 -1.1396 -2.9942 -0.1420 -0.2733 1.1556 0.9938 1.0157 0.9646 -0.0051 -0.0116 -0.0066
 + - cost(#7)=0.337709  
 + -- Parameters = -1.9428 -0.5839 -3.7789 0.3865 -0.8872 -0.4157 0.9939 1.0130 0.9835 0.0097 0.0252 -0.0149
 + - cost(#8)=0.341381  
 + -- Parameters = -0.5112 -2.0070 -3.9288 -0.1442 0.8429 1.4678 0.9902 1.0177 0.9858 -0.0028 -0.0163 0.0202
 + - cost(#9)=0.352074  
 + -- Parameters = -0.1836 -2.0029 -4.4425 -0.3925 1.0362 1.7159 0.9842 1.0126 0.9992 -0.0167 -0.0205 0.0262
 + - cost(#10)=0.353357  
 + -- Parameters = -1.9580 -1.2382 -4.4475 0.3077 0.3852 -0.5176 0.9915 1.0100 0.9961 0.0175 0.0345 0.0160
 + - cost(#11)=0.585231  
 + -- Parameters = -8.8423 4.2666 -7.9090 -12.7639 -7.5032 -37.0687 0.9662 0.9642 0.9664 0.0286 -0.0140 0.0081
 + - cost(#12)=0.514770  
 + -- Parameters = -1.7148 -0.4849 -7.5543 0.0000 0.0000 0.0000 1.0000 1.0000 1.0000 0.0000 0.0000 0.0000
 + -num_rtb 99 ==> refine all 12 cases
 + - cost(#1)=0.330757 *
 + -- Parameters = -1.0223 -0.7191 -4.0106 -0.0748 -0.6063 0.6395 0.9930 1.0122 0.9882 -0.0058 0.0023 -0.0061
 + - cost(#2)=0.331372  
 + -- Parameters = -1.2187 -0.9997 -3.9203 -0.0001 -0.3473 0.3809 0.9930 1.0133 0.9859 -0.0036 0.0079 -0.0022
 + - cost(#3)=0.331721  
 + -- Parameters = -1.3169 -1.1244 -3.8782 0.0690 -0.3107 0.3547 0.9932 1.0150 0.9854 -0.0007 0.0080 -0.0023
 + - cost(#4)=0.332102  
 + -- Parameters = -0.9376 -1.0638 -4.0193 -0.0554 -0.2213 0.8254 0.9921 1.0133 0.9882 -0.0045 -0.0027 0.0013
 + - cost(#5)=0.332177  
 + -- Parameters = -1.2596 -0.7082 -4.0554 0.0274 -0.6416 0.3223 0.9926 1.0114 0.9889 -0.0010 0.0125 -0.0071
 + - cost(#6)=0.332646  
 + -- Parameters = -0.7556 -1.0907 -3.4779 -0.1416 -0.4149 1.0493 0.9959 1.0175 0.9767 -0.0053 -0.0077 -0.0072
 + - cost(#7)=0.334646  
 + -- Parameters = -1.7508 -0.5978 -3.8204 0.2463 -0.9752 -0.1730 0.9949 1.0135 0.9840 0.0049 0.0214 -0.0153
 + - cost(#8)=0.336688  
 + -- Parameters = -0.8178 -1.7929 -3.7966 -0.0353 0.5522 1.0939 0.9930 1.0177 0.9841 -0.0040 -0.0099 0.0127
 + - cost(#9)=0.340812  
 + -- Parameters = -0.7080 -1.9068 -3.7487 -0.1197 0.6105 1.1856 0.9903 1.0205 0.9813 -0.0076 -0.0184 0.0136
 + - cost(#10)=0.340289  
 + -- Parameters = -1.8523 -1.3750 -4.0310 0.0760 0.1149 -0.5127 0.9894 1.0141 0.9897 -0.0083 0.0253 0.0062
 + - cost(#11)=0.584642  
 + -- Parameters = -9.0192 4.1296 -7.6939 -12.8212 -7.3196 -37.1690 0.9692 0.9643 0.9646 0.0323 -0.0265 0.0084
 + - cost(#12)=0.331951  
 + -- Parameters = -1.0049 -1.0940 -3.9058 -0.1050 -0.1829 0.6306 0.9941 1.0129 0.9856 -0.0059 0.0020 0.0013
 + - case #1 is now the best
 + - Initial  cost = 0.330757
 + - Initial fine Parameters = -1.0223 -0.7191 -4.0106 -0.0748 -0.6063 0.6395 0.9930 1.0122 0.9882 -0.0058 0.0023 -0.0061
 + - Finalish cost = 0.330565 ; 92 funcs
 +  - Set lpc+ parameters back to pure lpc before Final
 +  - histogram: source clip 32.4251 .. 140.109; base clip 1602.96 .. 5819.95
 +  - versus source range 0 .. 132.012; base range 0 .. 7401.23
*[#16141=-0.232377] *[#16148=-0.233047] *[#16182=-0.233249] *[#16199=-0.233817] *[#16202=-0.233973] *[#16211=-0.234213] *[#16212=-0.234613] *[#16219=-0.23489] *[#16228=-0.23511] *[#16233=-0.235128] *[#16235=-0.235405] *[#16236=-0.235625] *[#16237=-0.235723] *[#16248=-0.235925] *[#16259=-0.236005] *[#16274=-0.236097] *[#16278=-0.236105] *[#16282=-0.236123] *[#16285=-0.236167] *[#16286=-0.236182] *[#16289=-0.236198] *[#16292=-0.236229] *[#16293=-0.236248] *[#16294=-0.236258] *[#16295=-0.236277] *[#16296=-0.236282] *[#16297=-0.236289] *[#16298=-0.236302] *[#16299=-0.236305] *[#16300=-0.236322] *[#16301=-0.236338] *[#16310=-0.236347] *[#16315=-0.236349] *[#16321=-0.236351] *[#16322=-0.236354] *[#16323=-0.236363] *[#16324=-0.236366] *[#16325=-0.236374] *[#16327=-0.236382] *[#16328=-0.236386] *[#16330=-0.236397] *[#16335=-0.236408] *[#16338=-0.236431] *[#16339=-0.236435] *[#16341=-0.236439] *[#16346=-0.236447] *[#16349=-0.23645] *[#16352=-0.236453] *[#16353=-0.236454] *[#16358=-0.236466] *[#16359=-0.236472] *[#16360=-0.236477] *[#16361=-0.23648] *[#16362=-0.236497] *[#16363=-0.236505] *[#16366=-0.236512] *[#16371=-0.236516] *[#16376=-0.236526] *[#16379=-0.236526] *[#16385=-0.236529] *[#16390=-0.236531] *[#16393=-0.236535] *[#16394=-0.236536] *[#16395=-0.236537] *[#16396=-0.236537] *[#16397=-0.236538] *[#16404=-0.236546] *[#16405=-0.236547] *[#16412=-0.236551] *[#16415=-0.236552] *[#16417=-0.236553] *[#16426=-0.236555] *[#16427=-0.236557] *[#16428=-0.236559] *[#16429=-0.23656] *[#16430=-0.23656] *[#16439=-0.236568] *[#16446=-0.23657] *[#16447=-0.236571] *[#16450=-0.236573] *[#16455=-0.236576] *[#16462=-0.236578] *[#16463=-0.23658] *[#16466=-0.236581] *[#16467=-0.236583] *[#16468=-0.236583] *[#16470=-0.236585] *[#16475=-0.236586] *[#16478=-0.236592] *[#16481=-0.236599] *[#16482=-0.236601] *[#16485=-0.236603] *[#16486=-0.236606] *[#16489=-0.236609] *[#16494=-0.236611] *[#16495=-0.236613] *[#16496=-0.236615] *[#16499=-0.236617] *[#16500=-0.23662] *[#16509=-0.23662] *[#16510=-0.236623] *[#16511=-0.236626] *[#16512=-0.236631] *[#16519=-0.236632] *[#16521=-0.236638] *[#16524=-0.236642] *[#16525=-0.236642] *[#16526=-0.236645] *[#16527=-0.236647] *[#16528=-0.23665] *[#16533=-0.236652] *[#16534=-0.236654] *[#16535=-0.236656] *[#16536=-0.236659] *[#16541=-0.236662] *[#16542=-0.236664] *[#16543=-0.236666] *[#16544=-0.236667] *[#16545=-0.236668] *[#16547=-0.236671] *[#16550=-0.236672] *[#16557=-0.236672] *[#16562=-0.236674] *[#16565=-0.236674] 
 + - Final    cost = -0.236674 ; 438 funcs
 + Final fine fit Parameters:
       x-shift=-1.1290   y-shift=-1.2357   z-shift=-4.0140
       z-angle=-0.0224   x-angle=-0.3332   y-angle= 0.5341
       x-scale= 1.0014   y-scale= 1.0206   z-scale= 0.9936
     y/x-shear=-0.0038 z/x-shear= 0.0055 z/y-shear=-0.0016
 + - Fine net CPU time = 0.0 s
++ Computing output image
++ image warp: parameters = -1.1290 -1.2357 -4.0140 -0.0224 -0.3332 0.5341 1.0014 1.0206 0.9936 -0.0038 0.0055 -0.0016
++ Output dataset ./__tt_sub-TAG132_SurfVol_ns_ob_temp_al_junk+orig.BRIK
++ Wrote -1Dmatrix_save ./sub-TAG132_SurfVol_al_junk_e2a_only_mat.aff12.1D
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 141.3
++ ###########################################################
++ #   Please check results visually for alignment quality   #
++ ###########################################################
++ #   '-autoweight' is recommended when using -lpc or -lpa  #
++ #   If your results are not good, please try again.       #
++ ###########################################################
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./__tt_vr_base_min_outlier_ts_ns+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./__tt_vr_base_min_outlier_ts_ns+orig.BRIK is 6.596417 degrees from plumb.
++ Source dataset: ./__tt_sub-TAG132_SurfVol_ns+orig.HEAD
++ Base dataset:   ./__tt_vr_base_min_outlier_ts_ns+orig.HEAD
++ Loading datasets
 + Range param#4 [z-angle] = -6.000000 .. 6.000000
 + Range param#5 [x-angle] = -6.000000 .. 6.000000
 + Range param#6 [y-angle] = -6.000000 .. 6.000000
 + Range param#1 [x-shift] = -10.000000 .. 10.000000
 + Range param#2 [y-shift] = -10.000000 .. 10.000000
 + Range param#3 [z-shift] = -10.000000 .. 10.000000
 + Range param#4 [z-angle] = -45.000000 .. 45.000000
 + Range param#5 [x-angle] = -45.000000 .. 45.000000
 + Range param#6 [y-angle] = -45.000000 .. 45.000000
 + Range param#1 [x-shift] = -40.000000 .. 40.000000
 + Range param#2 [y-shift] = -40.000000 .. 40.000000
 + Range param#3 [z-shift] = -40.000000 .. 40.000000
++ changing output grid spacing to 1.0000 mm
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ ========== sub-brick #0 ========== [total CPU to here=0.0 s]
 + * Enter alignment setup routine
 + - copying base image
 + - copying source image
 + - no weight image
 + - using 11 points from base image [use_all=0]
 + * Exit alignment setup routine
++ using -1Dmatrix_apply
++ Computing output image
++ image warp: parameters = 1.0010 0.0215 -0.0200 22.0333 -0.0274 0.1195 -0.9862 172.4441 -0.0142 1.0133 0.1186 0.3733
++ Output dataset ./sub-TAG132_SurfVol_al_junk+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 0.9
++ ###########################################################
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
foreach run ( 01 02 )
3dvolreg -verbose -zpad 1 -base vr_base_min_outlier+orig -1Dfile dfile.r01.1D -prefix rm.epi.volreg.r01 -Fourier -1Dmatrix_save mat.r01.vr.aff12.1D pb01.sub-TAG132.r01.despike+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dvolreg: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./vr_base_min_outlier+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./vr_base_min_outlier+orig.BRIK is 6.596417 degrees from plumb.
++ Reading in base dataset ./vr_base_min_outlier+orig.BRIK
++ Oblique dataset:./pb01.sub-TAG132.r01.despike+orig.BRIK is 6.596417 degrees from plumb.
++ Reading input dataset ./pb01.sub-TAG132.r01.despike+orig.BRIK
++ Edging: x=4 y=4 z=3
++ Creating mask for -maxdisp
 + Automask has 102799 voxels
 + 12094 voxels left in -maxdisp mask after erosion
++ Initializing alignment base
++ Starting final pass on 390 sub-bricks: 0..1..2..3..4..5..6..7..8..9..10..11..12..13..14..15..16..17..18..19..20..21..22..23..24..25..26..27..28..29..30..31..32..33..34..35..36..37..38..39..40..41..42..43..44..45..46..47..48..49..50..51..52..53..54..55..56..57..58..59..60..61..62..63..64..65..66..67..68..69..70..71..72..73..74..75..76..77..78..79..80..81..82..83..84..85..86..87..88..89..90..91..92..93..94..95..96..97..98..99..100..101..102..103..104..105..106..107..108..109..110..111..112..113..114..115..116..117..118..119..120..121..122..123..124..125..126..127..128..129..130..131..132..133..134..135..136..137..138..139..140..141..142..143..144..145..146..147..148..149..150..151..152..153..154..155..156..157..158..159..160..161..162..163..164..165..166..167..168..169..170..171..172..173..174..175..176..177..178..179..180..181..182..183..184..185..186..187..188..189..190..191..192..193..194..195..196..197..198..199..200..201..202..203..204..205..206..207..208..209..210..211..212..213..214..215..216..217..218..219..220..221..222..223..224..225..226..227..228..229..230..231..232..233..234..235..236..237..238..239..240..241..242..243..244..245..246..247..248..249..250..251..252..253..254..255..256..257..258..259..260..261..262..263..264..265..266..267..268..269..270..271..272..273..274..275..276..277..278..279..280..281..282..283..284..285..286..287..288..289..290..291..292..293..294..295..296..297..298..299..300..301..302..303..304..305..306..307..308..309..310..311..312..313..314..315..316..317..318..319..320..321..322..323..324..325..326..327..328..329..330..331..332..333..334..335..336..337..338..339..340..341..342..343..344..345..346..347..348..349..350..351..352..353..354..355..356..357..358..359..360..361..362..363..364..365..366..367..368..369..370..371..372..373..374..375..376..377..378..379..380..381..382..383..384..385..386..387..388..389..
++ CPU time for realignment=0 s  [=0 s/sub-brick]
++ Min : roll=-2.209  pitch=-4.339  yaw=-0.010  dS=-0.457  dL=-0.164  dP=+0.441
++ Mean: roll=-2.026  pitch=-3.832  yaw=+0.554  dS=+0.875  dL=-0.014  dP=+0.820
++ Max : roll=-1.811  pitch=-2.420  yaw=+0.870  dS=+1.726  dL=+0.126  dP=+1.067
++ Max displacements (mm) for each sub-brick:
 5.40(0.00) 5.42(0.25) 5.36(0.13) 5.32(0.28) 5.43(0.16) 5.53(0.23) 5.63(0.16) 5.61(0.27) 5.31(0.34) 5.27(0.27) 5.37(0.35) 5.47(0.37) 5.51(0.23) 5.48(0.30) 5.53(0.26) 5.50(0.37) 5.59(0.18) 5.76(0.18) 5.88(0.40) 5.61(0.46) 5.85(0.35) 5.83(0.31) 5.86(0.14) 6.16(0.47) 6.00(0.26) 5.94(0.40) 5.76(0.25) 5.84(0.25) 5.86(0.21) 5.86(0.04) 5.81(0.23) 5.84(0.14) 5.88(0.06) 5.92(0.30) 6.04(0.16) 5.95(0.36) 5.77(0.43) 5.97(0.30) 6.04(0.19) 6.04(0.34) 6.12(0.11) 6.13(0.24) 6.10(0.34) 6.00(0.13) 6.02(0.27) 6.15(0.23) 6.16(0.14) 6.16(0.16) 6.26(0.24) 6.29(0.21) 6.40(0.17) 6.51(0.23) 6.51(0.27) 6.85(0.47) 6.69(0.24) 6.67(0.28) 6.68(0.15) 6.47(0.26) 6.38(0.22) 6.60(0.36) 6.56(0.18) 6.65(0.16) 6.76(0.21) 6.80(0.17) 6.80(0.11) 6.85(0.08) 6.76(0.22) 6.83(0.20) 6.78(0.10) 6.89(0.14) 6.71(0.24) 6.55(0.28) 6.55(0.18) 6.50(0.19) 6.53(0.23) 6.75(0.32) 6.79(0.07) 6.74(0.15) 6.80(0.19) 6.80(0.08) 6.68(0.23) 6.83(0.26) 6.67(0.27) 6.78(0.14) 6.83(0.20) 6.74(0.26) 6.79(0.13) 6.84(0.16) 6.79(0.25) 6.77(0.11) 6.87(0.19) 6.94(0.20) 7.03(0.13) 6.97(0.11) 7.17(0.46) 6.90(0.30) 6.37(0.62) 6.39(0.09) 6.57(0.33) 6.59(0.22) 6.69(0.22) 6.84(0.36) 6.95(0.12) 6.70(0.39) 6.82(0.23) 6.89(0.14) 7.08(0.20) 7.08(0.13) 7.06(0.25) 7.14(0.12) 7.50(0.45) 7.55(0.20) 7.82(0.37) 7.80(0.14) 7.80(0.14) 7.92(0.25) 7.94(0.24) 8.14(0.27) 8.20(0.17) 8.08(0.24) 8.14(0.07) 8.17(0.13) 8.02(0.27) 8.12(0.26) 8.03(0.13) 7.99(0.12) 8.07(0.20) 8.08(0.16) 8.14(0.09) 8.29(0.25) 8.18(0.28) 8.10(0.24) 8.09(0.14) 8.10(0.12) 8.29(0.22) 8.35(0.18) 8.35(0.09) 8.11(0.28) 7.99(0.25) 7.83(0.38) 7.85(0.13) 8.12(0.30) 8.22(0.28) 7.95(0.32) 7.88(0.19) 7.69(0.21) 7.82(0.22) 7.59(0.26) 7.47(0.25) 7.44(0.30) 7.53(0.13) 7.34(0.30) 7.47(0.36) 7.47(0.17) 7.48(0.09) 7.63(0.27) 7.64(0.17) 7.74(0.12) 7.87(0.23) 7.82(0.21) 8.01(0.22) 8.07(0.19) 7.97(0.28) 8.09(0.29) 8.17(0.10) 8.19(0.27) 8.43(0.41) 8.25(0.24) 8.31(0.17) 8.52(0.37) 8.37(0.22) 8.38(0.15) 8.37(0.24) 8.40(0.24) 8.58(0.25) 8.52(0.08) 8.39(0.21) 8.42(0.25) 8.43(0.12) 8.46(0.03) 8.44(0.20) 8.33(0.25) 8.40(0.10) 8.49(0.17) 8.46(0.28) 8.43(0.12) 8.26(0.20) 8.29(0.17) 8.38(0.32) 8.16(0.38) 7.95(0.24) 8.11(0.34) 8.16(0.32) 8.09(0.18) 8.12(0.11) 8.10(0.15) 8.22(0.15) 8.36(0.22) 8.41(0.09) 8.45(0.15) 8.54(0.27) 8.39(0.23) 8.43(0.09) 8.55(0.26) 8.44(0.35) 8.46(0.11) 8.48(0.13) 8.35(0.27) 8.45(0.25) 8.43(0.13) 8.47(0.08) 8.57(0.17) 8.47(0.23) 8.53(0.14) 8.52(0.12) 8.36(0.23) 8.29(0.24) 8.33(0.09) 8.33(0.16) 8.41(0.20) 8.45(0.08) 8.39(0.26) 8.50(0.19) 8.50(0.06) 8.41(0.23) 8.48(0.23) 8.46(0.07) 8.36(0.13) 8.36(0.11) 8.33(0.17) 8.50(0.32) 8.42(0.20) 8.44(0.06) 8.54(0.24) 8.45(0.22) 8.51(0.12) 8.53(0.14) 8.50(0.24) 8.62(0.19) 8.65(0.15) 8.48(0.33) 8.57(0.11) 8.62(0.24) 8.51(0.20) 8.47(0.10) 8.49(0.23) 8.47(0.18) 8.49(0.12) 8.47(0.06) 8.48(0.22) 8.57(0.24) 8.51(0.09) 8.46(0.19) 8.56(0.35) 8.52(0.22) 8.45(0.09) 8.51(0.22) 8.57(0.21) 8.62(0.17) 8.55(0.13) 8.53(0.20) 8.61(0.21) 8.46(0.21) 8.56(0.11) 8.58(0.12) 8.52(0.23) 8.64(0.25) 8.57(0.15) 8.59(0.15) 8.73(0.32) 8.75(0.16) 8.72(0.07) 8.74(0.16) 8.77(0.15) 8.53(0.34) 8.70(0.19) 8.67(0.29) 8.67(0.16) 8.70(0.08) 8.71(0.14) 8.77(0.28) 8.72(0.14) 8.67(0.11) 8.76(0.24) 8.65(0.18) 8.64(0.16) 8.68(0.17) 8.54(0.34) 8.67(0.24) 8.70(0.03) 8.62(0.19) 8.73(0.29) 8.72(0.05) 8.64(0.25) 8.72(0.29) 8.59(0.19) 8.51(0.17) 8.67(0.29) 8.68(0.06) 8.77(0.17) 8.92(0.29) 8.86(0.07) 8.74(0.24) 8.82(0.21) 8.73(0.17) 8.74(0.32) 8.80(0.22) 8.75(0.13) 8.77(0.05) 8.76(0.18) 8.57(0.32) 8.75(0.26) 8.80(0.11) 8.70(0.24) 8.78(0.19) 8.62(0.21) 8.60(0.19) 8.90(0.38) 8.93(0.13) 8.82(0.25) 8.87(0.23) 8.89(0.09) 8.91(0.11) 9.02(0.25) 9.09(0.22) 9.06(0.12) 9.09(0.16) 8.99(0.25) 9.05(0.12) 8.97(0.18) 9.02(0.26) 9.05(0.20) 9.01(0.11) 8.91(0.23) 9.09(0.36) 8.99(0.19) 9.04(0.10) 9.23(0.24) 9.13(0.28) 9.05(0.22) 9.01(0.18) 9.10(0.11) 9.11(0.15) 8.95(0.30) 9.12(0.28) 9.07(0.10) 9.14(0.12) 9.13(0.05) 9.06(0.27) 9.05(0.16) 9.04(0.09) 9.07(0.15) 9.10(0.23) 8.93(0.28) 8.99(0.08) 9.05(0.17) 9.03(0.19) 9.08(0.10) 9.11(0.16) 9.04(0.27) 9.07(0.21) 8.99(0.11) 8.89(0.19) 8.72(0.33) 8.80(0.22) 8.95(0.22) 9.06(0.15) 8.96(0.23) 9.12(0.28) 9.10(0.09) 9.14(0.08) 9.18(0.19) 9.09(0.26) 9.14(0.06) 9.17(0.25) 9.08(0.25) 9.16(0.11) 9.16(0.22) 9.08(0.21) 9.06(0.15) 9.01(0.35) 9.03(0.19) 8.98(0.24) 9.14(0.35) 9.19(0.16) 9.15(0.17) 9.28(0.28) 9.38(0.12) 9.32(0.19) 9.33(0.21)
++ Max displacement in automask = 9.38 (mm) at sub-brick 387
++ Max delta displ  in automask = 0.62 (mm) at sub-brick 96
++ Wrote dataset to disk in ./rm.epi.volreg.r01+orig.BRIK
3dcalc -overwrite -a pb01.sub-TAG132.r01.despike+orig -expr 1 -prefix rm.epi.all1
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
[7m*+ WARNING:[0m input 'a' is not used in the expression
++ Output dataset ./rm.epi.all1+orig.BRIK
cat_matvec -ONELINE sub-TAG132_SurfVol_al_junk_mat.aff12.1D -I mat.r01.vr.aff12.1D
3dAllineate -base sub-TAG132_SurfVol_ns+orig -input pb01.sub-TAG132.r01.despike+orig -1Dmatrix_apply mat.r01.warp.aff12.1D -mast_dxyz 2.5 -prefix rm.epi.nomask.r01
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb01.sub-TAG132.r01.despike+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb01.sub-TAG132.r01.despike+orig.BRIK is 6.596417 degrees from plumb.
++ Source dataset: ./pb01.sub-TAG132.r01.despike+orig.HEAD
++ Base dataset:   ./sub-TAG132_SurfVol_ns+orig.HEAD
++ Loading datasets
++ master dataset for output = base
++ changing output grid spacing to 2.5000 mm
++ OpenMP thread count = 1
++ ========== Applying transformation to 390 sub-bricks ==========
volume 0..1..2..3..4..5..6..7..8..9..10..11..12..13..14..15..16..17..18..19..20..21..22..23..24..25..26..27..28..29..30..31..32..33..34..35..36..37..38..39..40..41..42..43..44..45..46..47..48..49..50..51..52..53..54..55..56..57..58..59..60..61..62..63..64..65..66..67..68..69..70..71..72..73..74..75..76..77..78..79..80..81..82..83..84..85..86..87..88..89..90..91..92..93..94..95..96..97..98..99..100..101..102..103..104..105..106..107..108..109..110..111..112..113..114..115..116..117..118..119..120..121..122..123..124..125..126..127..128..129..130..131..132..133..134..135..136..137..138..139..140..141..142..143..144..145..146..147..148..149..150..151..152..153..154..155..156..157..158..159..160..161..162..163..164..165..166..167..168..169..170..171..172..173..174..175..176..177..178..179..180..181..182..183..184..185..186..187..188..189..190..191..192..193..194..195..196..197..198..199..200..201..202..203..204..205..206..207..208..209..210..211..212..213..214..215..216..217..218..219..220..221..222..223..224..225..226..227..228..229..230..231..232..233..234..235..236..237..238..239..240..241..242..243..244..245..246..247..248..249..250..251..252..253..254..255..256..257..258..259..260..261..262..263..264..265..266..267..268..269..270..271..272..273..274..275..276..277..278..279..280..281..282..283..284..285..286..287..288..289..290..291..292..293..294..295..296..297..298..299..300..301..302..303..304..305..306..307..308..309..310..311..312..313..314..315..316..317..318..319..320..321..322..323..324..325..326..327..328..329..330..331..332..333..334..335..336..337..338..339..340..341..342..343..344..345..346..347..348..349..350..351..352..353..354..355..356..357..358..359..360..361..362..363..364..365..366..367..368..369..370..371..372..373..374..375..376..377..378..379..380..381..382..383..384..385..386..387..388..389
++ Output dataset ./rm.epi.nomask.r01+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 54.2
++ ###########################################################
3dAllineate -base sub-TAG132_SurfVol_ns+orig -input rm.epi.all1+orig -1Dmatrix_apply mat.r01.warp.aff12.1D -mast_dxyz 2.5 -final NN -quiet -prefix rm.epi.1.r01
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./rm.epi.all1+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./rm.epi.all1+orig.BRIK is 6.596417 degrees from plumb.
++ Output dataset ./rm.epi.1.r01+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 45.1
3dTstat -min -prefix rm.epi.min.r01 rm.epi.1.r01+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTstat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: KR Hammett & RW Cox
++ Output dataset ./rm.epi.min.r01+orig.BRIK
end
3dvolreg -verbose -zpad 1 -base vr_base_min_outlier+orig -1Dfile dfile.r02.1D -prefix rm.epi.volreg.r02 -Fourier -1Dmatrix_save mat.r02.vr.aff12.1D pb01.sub-TAG132.r02.despike+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dvolreg: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./vr_base_min_outlier+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./vr_base_min_outlier+orig.BRIK is 6.596417 degrees from plumb.
++ Reading in base dataset ./vr_base_min_outlier+orig.BRIK
++ Oblique dataset:./pb01.sub-TAG132.r02.despike+orig.BRIK is 6.596417 degrees from plumb.
++ Reading input dataset ./pb01.sub-TAG132.r02.despike+orig.BRIK
++ Edging: x=4 y=4 z=3
++ Creating mask for -maxdisp
 + Automask has 103466 voxels
 + 12155 voxels left in -maxdisp mask after erosion
++ Initializing alignment base
++ Starting final pass on 390 sub-bricks: 0..1..2..3..4..5..6..7..8..9..10..11..12..13..14..15..16..17..18..19..20..21..22..23..24..25..26..27..28..29..30..31..32..33..34..35..36..37..38..39..40..41..42..43..44..45..46..47..48..49..50..51..52..53..54..55..56..57..58..59..60..61..62..63..64..65..66..67..68..69..70..71..72..73..74..75..76..77..78..79..80..81..82..83..84..85..86..87..88..89..90..91..92..93..94..95..96..97..98..99..100..101..102..103..104..105..106..107..108..109..110..111..112..113..114..115..116..117..118..119..120..121..122..123..124..125..126..127..128..129..130..131..132..133..134..135..136..137..138..139..140..141..142..143..144..145..146..147..148..149..150..151..152..153..154..155..156..157..158..159..160..161..162..163..164..165..166..167..168..169..170..171..172..173..174..175..176..177..178..179..180..181..182..183..184..185..186..187..188..189..190..191..192..193..194..195..196..197..198..199..200..201..202..203..204..205..206..207..208..209..210..211..212..213..214..215..216..217..218..219..220..221..222..223..224..225..226..227..228..229..230..231..232..233..234..235..236..237..238..239..240..241..242..243..244..245..246..247..248..249..250..251..252..253..254..255..256..257..258..259..260..261..262..263..264..265..266..267..268..269..270..271..272..273..274..275..276..277..278..279..280..281..282..283..284..285..286..287..288..289..290..291..292..293..294..295..296..297..298..299..300..301..302..303..304..305..306..307..308..309..310..311..312..313..314..315..316..317..318..319..320..321..322..323..324..325..326..327..328..329..330..331..332..333..334..335..336..337..338..339..340..341..342..343..344..345..346..347..348..349..350..351..352..353..354..355..356..357..358..359..360..361..362..363..364..365..366..367..368..369..370..371..372..373..374..375..376..377..378..379..380..381..382..383..384..385..386..387..388..389..
++ CPU time for realignment=0 s  [=0 s/sub-brick]
++ Min : roll=-0.113  pitch=-0.091  yaw=-0.521  dS=-0.654  dL=-0.118  dP=-0.162
++ Mean: roll=+0.019  pitch=+0.221  yaw=-0.149  dS=-0.234  dL=+0.057  dP=+0.041
++ Max : roll=+0.146  pitch=+0.789  yaw=+0.070  dS=+0.107  dL=+0.224  dP=+0.244
++ Max displacements (mm) for each sub-brick:
 2.05(0.00) 2.00(0.21) 2.06(0.22) 1.99(0.10) 1.96(0.13) 2.04(0.23) 1.96(0.11) 1.92(0.16) 2.00(0.15) 1.74(0.40) 1.86(0.24) 1.79(0.16) 1.71(0.28) 1.90(0.33) 1.76(0.18) 1.77(0.10) 1.88(0.29) 1.74(0.29) 1.89(0.24) 1.80(0.11) 1.71(0.20) 1.84(0.28) 1.65(0.21) 1.48(0.23) 1.72(0.32) 1.60(0.20) 1.53(0.10) 1.75(0.25) 1.72(0.06) 1.71(0.11) 1.64(0.17) 1.63(0.11) 1.75(0.28) 1.59(0.20) 1.56(0.21) 1.61(0.22) 1.76(0.22) 1.64(0.15) 1.66(0.26) 1.64(0.16) 1.68(0.16) 1.56(0.29) 1.61(0.14) 1.63(0.25) 1.59(0.10) 1.60(0.09) 1.57(0.08) 1.58(0.15) 1.56(0.16) 1.61(0.11) 1.60(0.08) 1.54(0.19) 1.55(0.24) 1.53(0.03) 1.53(0.10) 1.45(0.22) 1.55(0.22) 1.58(0.15) 1.41(0.32) 1.48(0.08) 1.51(0.17) 1.39(0.25) 1.43(0.08) 1.49(0.18) 1.39(0.17) 1.44(0.07) 1.56(0.28) 1.34(0.28) 1.42(0.08) 1.51(0.21) 1.34(0.27) 1.41(0.10) 1.44(0.07) 1.45(0.03) 1.54(0.11) 1.42(0.15) 1.35(0.16) 1.19(0.28) 1.29(0.30) 1.31(0.07) 1.17(0.26) 1.35(0.31) 1.21(0.15) 1.10(0.22) 1.28(0.32) 0.96(0.39) 1.02(0.07) 1.13(0.21) 0.93(0.32) 1.06(0.19) 1.07(0.09) 0.94(0.25) 1.16(0.31) 0.96(0.27) 1.01(0.12) 1.20(0.19) 1.10(0.23) 1.35(0.36) 1.45(0.19) 1.09(0.44) 0.80(0.39) 1.11(0.54) 1.18(0.29) 1.17(0.19) 1.08(0.15) 0.83(0.41) 0.94(0.24) 0.86(0.12) 0.83(0.14) 0.92(0.16) 0.81(0.14) 0.85(0.06) 0.70(0.23) 0.88(0.28) 0.76(0.16) 0.62(0.20) 0.82(0.31) 0.60(0.34) 0.79(0.27) 0.69(0.12) 0.67(0.17) 0.86(0.30) 0.72(0.35) 1.01(0.33) 1.38(0.38) 1.28(0.27) 1.22(0.20) 0.93(0.34) 0.97(0.23) 0.91(0.30) 1.02(0.22) 0.88(0.18) 0.90(0.05) 1.07(0.28) 1.04(0.08) 1.13(0.09) 0.98(0.21) 0.98(0.12) 1.07(0.31) 0.93(0.19) 0.80(0.20) 1.04(0.35) 0.88(0.21) 0.84(0.16) 0.93(0.22) 0.80(0.25) 0.84(0.12) 0.79(0.07) 0.71(0.18) 0.88(0.31) 0.68(0.35) 1.03(0.44) 1.06(0.21) 1.22(0.32) 1.06(0.33) 1.11(0.18) 1.13(0.09) 0.88(0.26) 0.93(0.14) 0.94(0.10) 0.99(0.19) 0.77(0.34) 0.80(0.13) 0.88(0.22) 0.61(0.48) 0.54(0.11) 0.76(0.36) 0.67(0.24) 0.70(0.11) 0.74(0.17) 0.64(0.24) 0.66(0.13) 0.73(0.18) 0.57(0.27) 0.57(0.04) 0.64(0.23) 0.57(0.13) 0.48(0.19) 0.50(0.18) 0.46(0.07) 0.41(0.21) 0.47(0.16) 0.56(0.15) 0.38(0.29) 0.44(0.13) 0.54(0.12) 0.48(0.26) 0.46(0.15) 0.53(0.17) 0.35(0.25) 0.46(0.17) 0.44(0.10) 0.52(0.12) 0.45(0.16) 0.54(0.19) 0.63(0.25) 0.52(0.25) 0.67(0.17) 0.80(0.35) 0.82(0.15) 0.89(0.21) 0.66(0.32) 0.61(0.16) 0.67(0.14) 0.62(0.14) 0.55(0.16) 0.63(0.26) 0.58(0.09) 0.43(0.28) 0.54(0.23) 0.53(0.10) 0.40(0.26) 0.51(0.29) 0.45(0.14) 0.47(0.06) 0.55(0.23) 0.47(0.22) 0.53(0.16) 0.58(0.08) 0.45(0.27) 0.50(0.17) 0.54(0.09) 0.38(0.29) 0.41(0.15) 0.54(0.17) 0.37(0.25) 0.37(0.09) 0.45(0.17) 0.36(0.18) 0.41(0.09) 0.54(0.22) 0.43(0.18) 0.40(0.10) 0.53(0.25) 0.42(0.25) 0.47(0.06) 0.52(0.15) 0.40(0.20) 0.46(0.14) 0.45(0.10) 0.45(0.10) 0.54(0.24) 0.33(0.24) 0.25(0.20) 0.33(0.11) 0.43(0.13) 0.40(0.12) 0.46(0.14) 0.48(0.11) 0.50(0.06) 0.37(0.18) 0.25(0.32) 0.28(0.22) 0.31(0.14) 0.23(0.34) 0.24(0.24) 0.28(0.06) 0.19(0.25) 0.27(0.27) 0.20(0.11) 0.14(0.16) 0.29(0.25) 0.16(0.17) 0.16(0.09) 0.38(0.29) 0.27(0.26) 0.35(0.15) 0.38(0.16) 0.23(0.23) 0.34(0.24) 0.33(0.10) 0.29(0.09) 0.62(0.47) 0.46(0.33) 0.53(0.18) 0.56(0.15) 0.38(0.38) 0.40(0.18) 0.43(0.08) 0.36(0.32) 0.33(0.15) 0.40(0.21) 0.31(0.23) 0.30(0.07) 0.43(0.19) 0.28(0.17) 0.25(0.11) 0.36(0.16) 0.25(0.26) 0.23(0.11) 0.26(0.15) 0.22(0.20) 0.27(0.24) 0.36(0.17) 0.28(0.28) 0.38(0.26) 0.33(0.06) 0.26(0.08) 0.27(0.21) 0.25(0.19) 0.31(0.10) 0.17(0.25) 0.21(0.14) 0.24(0.06) 0.16(0.21) 0.28(0.25) 0.16(0.15) 0.15(0.08) 0.29(0.24) 0.13(0.24) 0.14(0.06) 0.28(0.19) 0.06(0.25) 0.15(0.13) 0.23(0.10) 0.09(0.25) 0.10(0.15) 0.15(0.07) 0.10(0.23) 0.15(0.20) 0.08(0.10) 0.10(0.07) 0.12(0.08) 0.10(0.20) 0.17(0.23) 0.18(0.27) 0.13(0.15) 0.14(0.15) 0.10(0.23) 0.15(0.25) 0.00(0.15) 0.07(0.07) 0.16(0.11) 0.08(0.22) 0.12(0.16) 0.07(0.08) 0.08(0.11) 0.18(0.23) 0.09(0.20) 0.10(0.05) 0.14(0.06) 0.15(0.19) 0.19(0.20) 0.21(0.09) 0.20(0.15) 0.21(0.19) 0.20(0.10) 0.22(0.13) 0.21(0.22) 0.16(0.12) 0.13(0.04) 0.19(0.17) 0.13(0.16) 0.14(0.05) 0.15(0.08) 0.15(0.02) 0.14(0.19) 0.10(0.18) 0.18(0.12) 0.11(0.18) 0.19(0.18) 0.22(0.07) 0.14(0.25) 0.18(0.21) 0.16(0.10) 0.13(0.14) 0.22(0.23) 0.15(0.18) 0.14(0.09) 0.22(0.25) 0.16(0.24) 0.17(0.06) 0.20(0.11) 0.18(0.23) 0.23(0.25) 0.19(0.20) 0.16(0.06) 0.17(0.11) 0.20(0.22) 0.22(0.27) 0.19(0.16) 0.20(0.07) 0.24(0.19) 0.24(0.25) 0.30(0.17) 0.23(0.12) 0.17(0.10) 0.20(0.12) 0.19(0.23) 0.17(0.10)
++ Max displacement in automask = 2.06 (mm) at sub-brick 2
++ Max delta displ  in automask = 0.54 (mm) at sub-brick 101
++ Wrote dataset to disk in ./rm.epi.volreg.r02+orig.BRIK
3dcalc -overwrite -a pb01.sub-TAG132.r02.despike+orig -expr 1 -prefix rm.epi.all1
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
[7m*+ WARNING:[0m input 'a' is not used in the expression
++ Output dataset ./rm.epi.all1+orig.BRIK
cat_matvec -ONELINE sub-TAG132_SurfVol_al_junk_mat.aff12.1D -I mat.r02.vr.aff12.1D
3dAllineate -base sub-TAG132_SurfVol_ns+orig -input pb01.sub-TAG132.r02.despike+orig -1Dmatrix_apply mat.r02.warp.aff12.1D -mast_dxyz 2.5 -prefix rm.epi.nomask.r02
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb01.sub-TAG132.r02.despike+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb01.sub-TAG132.r02.despike+orig.BRIK is 6.596417 degrees from plumb.
++ Source dataset: ./pb01.sub-TAG132.r02.despike+orig.HEAD
++ Base dataset:   ./sub-TAG132_SurfVol_ns+orig.HEAD
++ Loading datasets
++ master dataset for output = base
++ changing output grid spacing to 2.5000 mm
++ OpenMP thread count = 1
++ ========== Applying transformation to 390 sub-bricks ==========
volume 0..1..2..3..4..5..6..7..8..9..10..11..12..13..14..15..16..17..18..19..20..21..22..23..24..25..26..27..28..29..30..31..32..33..34..35..36..37..38..39..40..41..42..43..44..45..46..47..48..49..50..51..52..53..54..55..56..57..58..59..60..61..62..63..64..65..66..67..68..69..70..71..72..73..74..75..76..77..78..79..80..81..82..83..84..85..86..87..88..89..90..91..92..93..94..95..96..97..98..99..100..101..102..103..104..105..106..107..108..109..110..111..112..113..114..115..116..117..118..119..120..121..122..123..124..125..126..127..128..129..130..131..132..133..134..135..136..137..138..139..140..141..142..143..144..145..146..147..148..149..150..151..152..153..154..155..156..157..158..159..160..161..162..163..164..165..166..167..168..169..170..171..172..173..174..175..176..177..178..179..180..181..182..183..184..185..186..187..188..189..190..191..192..193..194..195..196..197..198..199..200..201..202..203..204..205..206..207..208..209..210..211..212..213..214..215..216..217..218..219..220..221..222..223..224..225..226..227..228..229..230..231..232..233..234..235..236..237..238..239..240..241..242..243..244..245..246..247..248..249..250..251..252..253..254..255..256..257..258..259..260..261..262..263..264..265..266..267..268..269..270..271..272..273..274..275..276..277..278..279..280..281..282..283..284..285..286..287..288..289..290..291..292..293..294..295..296..297..298..299..300..301..302..303..304..305..306..307..308..309..310..311..312..313..314..315..316..317..318..319..320..321..322..323..324..325..326..327..328..329..330..331..332..333..334..335..336..337..338..339..340..341..342..343..344..345..346..347..348..349..350..351..352..353..354..355..356..357..358..359..360..361..362..363..364..365..366..367..368..369..370..371..372..373..374..375..376..377..378..379..380..381..382..383..384..385..386..387..388..389
++ Output dataset ./rm.epi.nomask.r02+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 53.8
++ ###########################################################
3dAllineate -base sub-TAG132_SurfVol_ns+orig -input rm.epi.all1+orig -1Dmatrix_apply mat.r02.warp.aff12.1D -mast_dxyz 2.5 -final NN -quiet -prefix rm.epi.1.r02
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./rm.epi.all1+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./rm.epi.all1+orig.BRIK is 6.596417 degrees from plumb.
++ Output dataset ./rm.epi.1.r02+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 44.8
3dTstat -min -prefix rm.epi.min.r02 rm.epi.1.r02+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTstat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: KR Hammett & RW Cox
++ Output dataset ./rm.epi.min.r02+orig.BRIK
end
cat dfile.r01.1D dfile.r02.1D
3dMean -datum short -prefix rm.epi.mean rm.epi.min.r01+orig.HEAD rm.epi.min.r02+orig.HEAD
++ 3dMean: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
3dcalc -a rm.epi.mean+orig -expr step(a-0.999) -prefix mask_epi_extents
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Output dataset ./mask_epi_extents+orig.BRIK
foreach run ( 01 02 )
3dcalc -a rm.epi.nomask.r01+orig -b mask_epi_extents+orig -expr a*b -prefix pb02.sub-TAG132.r01.volreg
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Output dataset ./pb02.sub-TAG132.r01.volreg+orig.BRIK
end
3dcalc -a rm.epi.nomask.r02+orig -b mask_epi_extents+orig -expr a*b -prefix pb02.sub-TAG132.r02.volreg
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Output dataset ./pb02.sub-TAG132.r02.volreg+orig.BRIK
end
cat_matvec -ONELINE sub-TAG132_SurfVol_al_junk_mat.aff12.1D -I
3dAllineate -base sub-TAG132_SurfVol_ns+orig -input vr_base_min_outlier+orig -1Dmatrix_apply mat.basewarp.aff12.1D -mast_dxyz 2.5 -prefix final_epi_vr_base_min_outlier
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./vr_base_min_outlier+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./vr_base_min_outlier+orig.BRIK is 6.596417 degrees from plumb.
++ Source dataset: ./vr_base_min_outlier+orig.HEAD
++ Base dataset:   ./sub-TAG132_SurfVol_ns+orig.HEAD
++ Loading datasets
++ master dataset for output = base
++ changing output grid spacing to 2.5000 mm
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ Output dataset ./final_epi_vr_base_min_outlier+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 0.4
++ ###########################################################
3dcopy sub-TAG132_SurfVol_ns+orig anat_final.sub-TAG132
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
tee out.allcostX.txt
3dAllineate -base final_epi_vr_base_min_outlier+orig -allcostX -input anat_final.sub-TAG132+orig
3dmask_tool -input copy_af_FSvent+orig -dilate_input -1 -prefix copy_af_FSvent_erode
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ no -frac option: defaulting to -union
++ processing 1 input datasets...
++ padding all datasets by 0 (for dilations)
++ frac 0 over 1 volumes gives min count 0
++ voxel limits: 0 clipped, 6618 survived, 16770598 were zero
++ writing result copy_af_FSvent_erode...
++ Output dataset ./copy_af_FSvent_erode+orig.BRIK
3dmask_tool -input copy_af_FSWe+orig -dilate_input -1 -prefix copy_af_FSWe_erode
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ no -frac option: defaulting to -union
++ processing 1 input datasets...
++ padding all datasets by 0 (for dilations)
++ frac 0 over 1 volumes gives min count 0
++ voxel limits: 0 clipped, 255868 survived, 16521348 were zero
++ writing result copy_af_FSWe_erode...
++ Output dataset ./copy_af_FSWe_erode+orig.BRIK
3dAllineate -source copy_af_aeseg+orig -master pb02.sub-TAG132.r01.volreg+orig -final NN -1Dparam_apply 1D: 12@0' -prefix follow_ROI_aeseg
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
++ Source dataset: ./copy_af_aeseg+orig.HEAD
++ Base dataset:   (not given)
++ Loading datasets
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ Output dataset ./follow_ROI_aeseg+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 0.9
++ ###########################################################
3dAllineate -source copy_af_FSvent_erode+orig -master pb02.sub-TAG132.r01.volreg+orig -final NN -1Dparam_apply 1D: 12@0' -prefix follow_ROI_FSvent
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
++ Source dataset: ./copy_af_FSvent_erode+orig.HEAD
++ Base dataset:   (not given)
++ Loading datasets
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ Output dataset ./follow_ROI_FSvent+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 0.7
++ ###########################################################
3dAllineate -source copy_af_FSWe_erode+orig -master pb02.sub-TAG132.r01.volreg+orig -final NN -1Dparam_apply 1D: 12@0' -prefix follow_ROI_FSWe
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
++ Source dataset: ./copy_af_FSWe_erode+orig.HEAD
++ Base dataset:   (not given)
++ Loading datasets
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ Output dataset ./follow_ROI_FSWe+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 0.7
++ ###########################################################
foreach run ( 01 02 )
3dmerge -1blur_fwhm 2 -doall -prefix pb03.sub-TAG132.r01.blur pb02.sub-TAG132.r01.volreg+orig
++ 3dmerge: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ default -1dindex = 0
++ default -1tindex = 1
-- Wrote edited dataset: ./pb03.sub-TAG132.r01.blur+orig.BRIK
end
3dmerge -1blur_fwhm 2 -doall -prefix pb03.sub-TAG132.r02.blur pb02.sub-TAG132.r02.volreg+orig
++ 3dmerge: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ default -1dindex = 0
++ default -1tindex = 1
-- Wrote edited dataset: ./pb03.sub-TAG132.r02.blur+orig.BRIK
end
foreach run ( 01 02 )
3dAutomask -prefix rm.mask_r01 pb03.sub-TAG132.r01.blur+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAutomask: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Emperor Zhark
++ Loading dataset pb03.sub-TAG132.r01.blur+orig
++ Forming automask
 + Fixed clip level = 2327.638916
 + Used gradual clip level = 2112.057129 .. 2418.769043
 + Number voxels above clip level = 99851
 + Clustering voxels ...
 + Largest cluster has 98064 voxels
 + Clustering voxels ...
 + Largest cluster has 97711 voxels
 + Filled   395 voxels in small holes; now have 98106 voxels
 + Filled  1401 voxels in large holes; now have 99507 voxels
 + Clustering voxels ...
 + Largest cluster has 99502 voxels
 + Clustering non-brain voxels ...
 + Clustering voxels ...
 + Largest cluster has 961706 voxels
 + Mask now has 99502 voxels
++ 99502 voxels in the mask [out of 1061208: 9.38%]
++ first  23 x-planes are zero [from R]
++ last   23 x-planes are zero [from L]
++ first  17 y-planes are zero [from S]
++ last   30 y-planes are zero [from I]
++ first   7 z-planes are zero [from P]
++ last   20 z-planes are zero [from A]
++ Output dataset ./rm.mask_r01+orig.BRIK
++ CPU time = 0.000000 sec
end
3dAutomask -prefix rm.mask_r02 pb03.sub-TAG132.r02.blur+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAutomask: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Emperor Zhark
++ Loading dataset pb03.sub-TAG132.r02.blur+orig
++ Forming automask
 + Fixed clip level = 2310.852539
 + Used gradual clip level = 2072.906982 .. 2411.789062
 + Number voxels above clip level = 100607
 + Clustering voxels ...
 + Largest cluster has 99029 voxels
 + Clustering voxels ...
 + Largest cluster has 98710 voxels
 + Filled   426 voxels in small holes; now have 99136 voxels
 + Filled  1502 voxels in large holes; now have 100638 voxels
 + Clustering voxels ...
 + Largest cluster has 100638 voxels
 + Clustering non-brain voxels ...
 + Clustering voxels ...
 + Largest cluster has 960570 voxels
 + Mask now has 100638 voxels
++ 100638 voxels in the mask [out of 1061208: 9.48%]
++ first  23 x-planes are zero [from R]
++ last   23 x-planes are zero [from L]
++ first  17 y-planes are zero [from S]
++ last   30 y-planes are zero [from I]
++ first   7 z-planes are zero [from P]
++ last   20 z-planes are zero [from A]
++ Output dataset ./rm.mask_r02+orig.BRIK
++ CPU time = 0.000000 sec
end
3dmask_tool -inputs rm.mask_r01+orig.HEAD rm.mask_r02+orig.HEAD -union -prefix full_mask.sub-TAG132
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ processing 2 input datasets...
++ padding all datasets by 0 (for dilations)
++ frac 0 over 2 volumes gives min count 0
++ voxel limits: 0 clipped, 101148 survived, 960060 were zero
++ writing result full_mask.sub-TAG132...
++ Output dataset ./full_mask.sub-TAG132+orig.BRIK
3dresample -master full_mask.sub-TAG132+orig -input sub-TAG132_SurfVol_ns+orig -prefix rm.resam.anat
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
3dmask_tool -dilate_input 5 -5 -fill_holes -input rm.resam.anat+orig -prefix mask_anat.sub-TAG132
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ no -frac option: defaulting to -union
++ processing 1 input datasets...
++ padding all datasets by 5 (for dilations)
++ frac 0 over 1 volumes gives min count 0
++ voxel limits: 0 clipped, 102151 survived, 959057 were zero
++ filled 0 holes (0 voxels)
++ writing result mask_anat.sub-TAG132...
++ Output dataset ./mask_anat.sub-TAG132+orig.BRIK
3dmask_tool -input full_mask.sub-TAG132+orig mask_anat.sub-TAG132+orig -inter -prefix mask_epi_anat.sub-TAG132
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ processing 2 input datasets...
++ padding all datasets by 0 (for dilations)
++ frac 1 over 2 volumes gives min count 2
++ voxel limits: 12655 clipped, 95322 survived, 953231 were zero
++ writing result mask_epi_anat.sub-TAG132...
++ Output dataset ./mask_epi_anat.sub-TAG132+orig.BRIK
tee out.mask_ae_overlap.txt
3dABoverlap -no_automask full_mask.sub-TAG132+orig mask_anat.sub-TAG132+orig
tee out.mask_ae_dice.txt
3ddot -dodice full_mask.sub-TAG132+orig mask_anat.sub-TAG132+orig
foreach run ( 01 02 )
3dTstat -prefix rm.mean_r01 pb03.sub-TAG132.r01.blur+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTstat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: KR Hammett & RW Cox
++ Output dataset ./rm.mean_r01+orig.BRIK
3dcalc -a pb03.sub-TAG132.r01.blur+orig -b rm.mean_r01+orig -c full_mask.sub-TAG132+orig -expr c * min(200, a/b*100)*step(a)*step(b) -prefix pb04.sub-TAG132.r01.scale
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Output dataset ./pb04.sub-TAG132.r01.scale+orig.BRIK
end
3dTstat -prefix rm.mean_r02 pb03.sub-TAG132.r02.blur+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTstat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: KR Hammett & RW Cox
++ Output dataset ./rm.mean_r02+orig.BRIK
3dcalc -a pb03.sub-TAG132.r02.blur+orig -b rm.mean_r02+orig -c full_mask.sub-TAG132+orig -expr c * min(200, a/b*100)*step(a)*step(b) -prefix pb04.sub-TAG132.r02.scale
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Output dataset ./pb04.sub-TAG132.r02.scale+orig.BRIK
end
1d_tool.py -infile dfile_rall.1D -set_nruns 2 -demean -write motion_demean.1D
1d_tool.py -infile dfile_rall.1D -set_nruns 2 -derivative -demean -write motion_deriv.1D
1d_tool.py -infile dfile_rall.1D -set_nruns 2 -show_censor_count -censor_prev_TR -censor_motion 0.2 motion_sub-TAG132
1deval -a motion_sub-TAG132_censor.1D -b outcount_sub-TAG132_censor.1D -expr a*b
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
foreach index ( `count -digits 1 1 $#runs` )
count -digits 1 1 2
set nt = 390
set run = 01
1dBport -nodata 390 0.78 -band 0.009 0.2 -invert -nozero
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Block length: 390
 + Frequency indexes: blocklen=390 :: 1 2 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195
1d_tool.py -infile rm.bpass.1D -pad_into_many_runs 01 2 -set_run_lengths 390 390 -write bpass.r01.1D
end
set nt = 390
set run = 02
1dBport -nodata 390 0.78 -band 0.009 0.2 -invert -nozero
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Block length: 390
 + Frequency indexes: blocklen=390 :: 1 2 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195
1d_tool.py -infile rm.bpass.1D -pad_into_many_runs 02 2 -set_run_lengths 390 390 -write bpass.r02.1D
end
1dcat bpass.r01.1D bpass.r02.1D
set ktrs = `1d_tool.py -infile censor_${subj}_combined_2.1D                
                       -show_trs_uncensored encoded`
1d_tool.py -infile censor_sub-TAG132_combined_2.1D -show_trs_uncensored encoded
foreach run ( 01 02 )
1d_tool.py -set_run_lengths 390 390 -select_runs 01 -infile censor_sub-TAG132_combined_2.1D -write rm.censor.r01.1D
3dTproject -polort 3 -prefix rm.det_pcin_r01 -censor rm.censor.r01.1D -cenmode KILL -input pb02.sub-TAG132.r01.volreg+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTproject: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Cox the Algebraic (Linear)
++ input time points = 390 ; censored = 115 ; remaining = 275
++ Setting up regressors
++ 1 Blocks * 4 polynomials -- 4 polort regressors
++ 275 retained time points MINUS 4 regressors ==> 271 D.O.F. left
++ no -mask option ==> processing all 1061208 voxels in dataset
++ Compute pseudo-inverse of fixed orts
++ Loading dataset
[7m*+ WARNING:[0m 3dTproject input data :: 659022 vectors are constant
++ Starting project-orization
++ Convert results to output dataset
++ Output dataset ./rm.det_pcin_r01+orig.BRIK
++ ===== clock time = 1h 49m 15s 492ms
end
1d_tool.py -set_run_lengths 390 390 -select_runs 02 -infile censor_sub-TAG132_combined_2.1D -write rm.censor.r02.1D
3dTproject -polort 3 -prefix rm.det_pcin_r02 -censor rm.censor.r02.1D -cenmode KILL -input pb02.sub-TAG132.r02.volreg+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTproject: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Cox the Algebraic (Linear)
++ input time points = 390 ; censored = 126 ; remaining = 264
++ Setting up regressors
++ 1 Blocks * 4 polynomials -- 4 polort regressors
++ 264 retained time points MINUS 4 regressors ==> 260 D.O.F. left
++ no -mask option ==> processing all 1061208 voxels in dataset
++ Compute pseudo-inverse of fixed orts
++ Loading dataset
[7m*+ WARNING:[0m 3dTproject input data :: 659022 vectors are constant
++ Starting project-orization
++ Convert results to output dataset
++ Output dataset ./rm.det_pcin_r02+orig.BRIK
++ ===== clock time = 2h 14m 44s 885ms
end
3dTcat -prefix rm.det_pcin_rall rm.det_pcin_r01+orig.HEAD rm.det_pcin_r02+orig.HEAD
++ 3dTcat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ elapsed time = 4.7 s
3dpc -mask follow_ROI_FSvent+orig -pcsave 3 -prefix rm.ROIPC.FSvent rm.det_pcin_rall+orig
++ 3dpc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
1d_tool.py -censor_fill_parent censor_sub-TAG132_combined_2.1D -infile rm.ROIPC.FSvent_vec.1D -write ROIPC.FSvent.1D
3dDeconvolve -input pb04.sub-TAG132.r01.scale+orig.HEAD pb04.sub-TAG132.r02.scale+orig.HEAD -mask full_mask.sub-TAG132+orig -censor censor_sub-TAG132_combined_2.1D -ortvec bandpass_rall.1D bandpass -ortvec ROIPC.FSvent.1D ROIPC.FSvent -polort 3 -num_stimts 12 -stim_file 1 motion_demean.1D[0] -stim_base 1 -stim_label 1 roll_01 -stim_file 2 motion_demean.1D[1] -stim_base 2 -stim_label 2 pitch_01 -stim_file 3 motion_demean.1D[2] -stim_base 3 -stim_label 3 yaw_01 -stim_file 4 motion_demean.1D[3] -stim_base 4 -stim_label 4 dS_01 -stim_file 5 motion_demean.1D[4] -stim_base 5 -stim_label 5 dL_01 -stim_file 6 motion_demean.1D[5] -stim_base 6 -stim_label 6 dP_01 -stim_file 7 motion_deriv.1D[0] -stim_base 7 -stim_label 7 roll_02 -stim_file 8 motion_deriv.1D[1] -stim_base 8 -stim_label 8 pitch_02 -stim_file 9 motion_deriv.1D[2] -stim_base 9 -stim_label 9 yaw_02 -stim_file 10 motion_deriv.1D[3] -stim_base 10 -stim_label 10 dS_02 -stim_file 11 motion_deriv.1D[4] -stim_base 11 -stim_label 11 dL_02 -stim_file 12 motion_deriv.1D[5] -stim_base 12 -stim_label 12 dP_02 -fout -tout -x1D X.xmat.1D -xjpeg X.jpg -x1D_uncensored X.nocensor.xmat.1D -fitts fitts.sub-TAG132 -errts errts.sub-TAG132 -x1D_stop -bucket stats.sub-TAG132
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dDeconvolve extending num_stimts from 12 to 557 due to -ortvec
++ 3dDeconvolve: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: B. Douglas Ward, et al.
++ Auto-catenated input datasets treated as multiple imaging runs
++ Auto-catenated datasets start at:  0 390
++ Skipping check for initial transients
++ Input polort=3; Longest run=304.2 s; Recommended minimum polort=3 ++ OK ++
++ Number of time points: 780 (before censor) ; 539 (after)
 + Number of parameters:  565 [565 baseline ; 0 signal]
[7m** ERROR:[0m  *** Censoring has made regression impossible :( ***
[7m** FATAL ERROR:[0m 3dDeconvolve dies: Insufficient data (539) for estimating 565 parameters
** Program compile date = Jul  6 2018
