echo auto-generated by afni_proc.py, Tue Jan 22 09:48:05 2019
echo (version 6.16, July 5, 2018)
echo execution started: `date`
date
afni -ver
afni_history -check_date 3 May 2018
if ( 0 ) then
if ( 0 > 0 ) then
set subj = sub-TAG022
endif
set output_dir = sub-TAG022.results
if ( -d sub-TAG022.results ) then
set runs = ( `count -digits 2 1 2` )
count -digits 2 1 2
mkdir sub-TAG022.results
mkdir sub-TAG022.results/stimuli
3dcopy /projects/dsnlab/shared/tag/bids_data/derivatives/freesurfer/sub-TAG022/SUMA/sub-TAG022_SurfVol.nii.gz sub-TAG022.results/sub-TAG022_SurfVol
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dcopy /projects/dsnlab/shared/tag/bids_data/derivatives/freesurfer/sub-TAG022/SUMA/aparc.a2009s+aseg_rank.nii.gz sub-TAG022.results/copy_af_aaseg
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dcopy /projects/dsnlab/shared/tag/bids_data/derivatives/freesurfer/sub-TAG022/SUMA/aparc.a2009s+aseg_rank.nii.gz sub-TAG022.results/copy_af_aeseg
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dcopy /projects/dsnlab/shared/tag/bids_data/derivatives/freesurfer/sub-TAG022/SUMA/sub-TAG022_vent.nii.gz sub-TAG022.results/copy_af_FSvent
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dcopy /projects/dsnlab/shared/tag/bids_data/derivatives/freesurfer/sub-TAG022/SUMA/sub-TAG022_WM.nii.gz sub-TAG022.results/copy_af_FSWe
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dTcat -prefix sub-TAG022.results/pb00.sub-TAG022.r01.tcat /projects/dsnlab/shared/tag/bids_data/sub-TAG022/ses-wave2/func/sub-TAG022_ses-wave2_task-rest_run-01_bold.nii.gz[5..$]
++ 3dTcat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ elapsed time = 4.6 s
3dTcat -prefix sub-TAG022.results/pb00.sub-TAG022.r02.tcat /projects/dsnlab/shared/tag/bids_data/sub-TAG022/ses-wave2/func/sub-TAG022_ses-wave2_task-rest_run-02_bold.nii.gz[5..$]
++ 3dTcat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ elapsed time = 4.7 s
set tr_counts = ( 390 390 )
cd sub-TAG022.results
touch out.pre_ss_warn.txt
foreach run ( 01 02 )
3dToutcount -automask -fraction -polort 3 -legendre pb00.sub-TAG022.r01.tcat+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dToutcount: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-TAG022.r01.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-TAG022.r01.tcat+orig.BRIK is 5.724164 degrees from plumb.
++ 81966 voxels passed mask/clip
1deval -a outcount.r01.1D -expr 1-step(a-0.1)
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
1deval -a outcount.r01.1D{0} -expr step(a-0.4)
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
end
3dToutcount -automask -fraction -polort 3 -legendre pb00.sub-TAG022.r02.tcat+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dToutcount: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-TAG022.r02.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-TAG022.r02.tcat+orig.BRIK is 5.724164 degrees from plumb.
++ 82209 voxels passed mask/clip
1deval -a outcount.r02.1D -expr 1-step(a-0.1)
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
1deval -a outcount.r02.1D{0} -expr step(a-0.4)
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
end
cat outcount.r01.1D outcount.r02.1D
cat rm.out.cen.r01.1D rm.out.cen.r02.1D
set minindex = `3dTstat -argmin -prefix - outcount_rall.1D\'`
3dTstat -argmin -prefix - outcount_rall.1D'
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTstat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: KR Hammett & RW Cox
[7m*+ WARNING:[0m Input dataset is not 3D+time; assuming TR=1.0
set ovals = ( `1d_tool.py -set_run_lengths $tr_counts                       
                          -index_to_run_tr $minindex` )
1d_tool.py -set_run_lengths 390 390 -index_to_run_tr 490
set minoutrun = 02
set minouttr = 100
tee out.min_outlier.txt
echo min outlier: run 02, TR 100
foreach run ( 01 02 )
3dDespike -NEW -nomask -prefix pb01.sub-TAG022.r01.despike pb00.sub-TAG022.r01.tcat+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dDespike: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-TAG022.r01.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-TAG022.r01.tcat+orig.BRIK is 5.724164 degrees from plumb.
++ Input dataset is in short format, but output will be in float format
++ ignoring first 0 time points, using last 390
++ using 390 time points => -corder 13
++ Loading dataset pb00.sub-TAG022.r01.tcat+orig
++ processing all 423360 voxels in dataset
++ Procesing time series with NEW model fit algorithm
++ smash edit thresholds: 3.1 .. 5.0 MADs
 +   [ 3.457% .. 0.072% of normal distribution]
 +   [ 8.839% .. 3.125% of Laplace distribution]
++ start OpenMP thread #0
.....................................................................................................................................................................................
++ Elapsed despike time =  31s 801ms

++ FINAL: 162973200 data points, 5627555 edits [3.453%], 280642 big edits [0.172%]
++ Output dataset ./pb01.sub-TAG022.r01.despike+orig.BRIK
end
3dDespike -NEW -nomask -prefix pb01.sub-TAG022.r02.despike pb00.sub-TAG022.r02.tcat+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dDespike: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-TAG022.r02.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-TAG022.r02.tcat+orig.BRIK is 5.724164 degrees from plumb.
++ Input dataset is in short format, but output will be in float format
++ ignoring first 0 time points, using last 390
++ using 390 time points => -corder 13
++ Loading dataset pb00.sub-TAG022.r02.tcat+orig
++ processing all 423360 voxels in dataset
++ Procesing time series with NEW model fit algorithm
++ smash edit thresholds: 3.1 .. 5.0 MADs
 +   [ 3.457% .. 0.072% of normal distribution]
 +   [ 8.839% .. 3.125% of Laplace distribution]
++ start OpenMP thread #0
.....................................................................................................................................................................................
++ Elapsed despike time =  31s 805ms

++ FINAL: 162973590 data points, 6675358 edits [4.096%], 609205 big edits [0.374%]
++ Output dataset ./pb01.sub-TAG022.r02.despike+orig.BRIK
end
3dbucket -prefix vr_base_min_outlier pb01.sub-TAG022.r02.despike+orig[100]
++ 3dbucket: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
align_epi_anat.py -anat2epi -anat sub-TAG022_SurfVol+orig -save_skullstrip -suffix _al_junk -epi vr_base_min_outlier+orig -epi_base 0 -epi_strip 3dAutomask -giant_move -cost lpc+ZZ -volreg off -tshift off
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
Warning 3dSkullStrip:****************
 Surface self intersecting! trying again:
 smoothing of 84, avoid_vent -1
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dWarp: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: RW Cox
++ Output dataset ./__tt_sub-TAG022_SurfVol_ns_ob+orig.BRIK
++ 3dbucket: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAutomask: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Emperor Zhark
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./__tt_vr_base_min_outlier_ts+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./__tt_vr_base_min_outlier_ts+orig.BRIK is 5.724164 degrees from plumb.
++ Loading dataset ./__tt_vr_base_min_outlier_ts+orig
++ Forming automask
 + Fixed clip level = 2588.544434
 + Used gradual clip level = 2455.887695 .. 2676.958252
 + Number voxels above clip level = 83926
 + Clustering voxels ...
 + Largest cluster has 82302 voxels
 + Clustering voxels ...
 + Largest cluster has 81606 voxels
 + Filled   710 voxels in small holes; now have 82316 voxels
 + Filled     3 voxels in large holes; now have 82319 voxels
 + Clustering voxels ...
 + Largest cluster has 82316 voxels
 + Clustering non-brain voxels ...
 + Clustering voxels ...
 + Largest cluster has 341044 voxels
 + Mask now has 82316 voxels
++ 82316 voxels in the mask [out of 423360: 19.44%]
++ first  17 x-planes are zero [from R]
++ last   16 x-planes are zero [from L]
++ first   6 y-planes are zero [from P]
++ last    9 y-planes are zero [from A]
++ first   0 z-planes are zero [from I]
++ last    6 z-planes are zero [from S]
++ applying mask to original data
++ Writing masked data
++ Output dataset ./__tt_vr_base_min_outlier_ts_ns+orig.BRIK
++ CPU time = 0.000000 sec
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Output dataset ././__tt_vr_base_min_outlier_ts_ns_wt+orig.BRIK
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
++ lpc+ parameters: hel=0.40 mi=0.20 nmi=0.20 crA=0.40 ov=0.40 [to be zeroed at Final iteration]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./__tt_vr_base_min_outlier_ts_ns_wt+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./__tt_vr_base_min_outlier_ts_ns_wt+orig.BRIK is 5.724164 degrees from plumb.
++ Oblique dataset:./__tt_vr_base_min_outlier_ts_ns+orig.BRIK is 5.724164 degrees from plumb.
++ Source dataset: ./__tt_sub-TAG022_SurfVol_ns_ob+orig.HEAD
++ Base dataset:   ./__tt_vr_base_min_outlier_ts_ns+orig.HEAD
++ Loading datasets
++ 1421209 voxels in -source_automask+2
++ Zero-pad: zbot=4 ztop=0
++ 82316 voxels [18.2%] in weight mask
++ Output dataset ./__tt_sub-TAG022_SurfVol_ns_ob_al_junk_wtal+orig.BRIK
++ Number of points for matching = 82316
++ NOTE: base and source coordinate systems have different handedness
 +       Orientations: base=Left handed (RPI); source=Right handed (RAI)
++ Local correlation: blok type = 'RHDD(9.225)'
++ -lpc+ parameters: hel=0.40 mi=0.20 nmi=0.20 crA=0.40 ov=0.40 [to be zeroed at Final iteration]
++ base center of mass = 42.426 38.499 33.408 (index)
 + source center of mass = 144.434 147.039 170.471 (index)
 + source-target CM = -0.544 -0.690 -2.762 (xyz)
 + center of mass shifts = -0.544 -0.690 -2.762
++ shift param auto-range: -67.2..66.1 -67.3..65.9 -53.3..47.8
 + Range param#4 [z-angle] = -6.000000 .. 6.000000
 + Range param#5 [x-angle] = -6.000000 .. 6.000000
 + Range param#6 [y-angle] = -6.000000 .. 6.000000
 + Range param#1 [x-shift] = -10.543854 .. 9.456146
 + Range param#2 [y-shift] = -10.689911 .. 9.310089
 + Range param#3 [z-shift] = -12.762466 .. 7.237534
 + Range param#4 [z-angle] = -45.000000 .. 45.000000
 + Range param#5 [x-angle] = -45.000000 .. 45.000000
 + Range param#6 [y-angle] = -45.000000 .. 45.000000
 + Range param#1 [x-shift] = -40.543854 .. 39.456146
 + Range param#2 [y-shift] = -40.689911 .. 39.310089
 + Range param#3 [z-shift] = -42.762466 .. 37.237534
 + 12 free parameters
++ Normalized convergence radius = 0.000451
++ changing output grid spacing to 1.0000 mm
++ OpenMP thread count = 1
++ ======= Allineation of 1 sub-bricks using Local Pearson Signed + Others =======
 + source mask has 1421209 [out of 21528444] voxels
 + base mask has 103526 [out of 451584] voxels
++ ========== sub-brick #0 ========== [total CPU to here=0.0 s]
++ *** Coarse pass begins ***
 + * Enter alignment setup routine
 + - copying base image
 + - copying source image
 + - Smoothing base; radius=2.50
 + - Smoothing source; radius=2.50
 + !source mask fill: ubot=25 usiz=52
 + - copying weight image
 + - using 82316 points from base image [use_all=2]
 + * Exit alignment setup routine
 + - Search for coarse starting parameters
 +  - histogram: source clip 31.0369 .. 133.488; base clip 1780.85 .. 6376.85
 +  - versus source range 0.0823433 .. 125.072; base range 0 .. 8229.49
 + 74983 total points stored in 718 'RHDD(9.55775)' bloks
 + - number of free params = 6
 + - Testing (64+61)*64 params:#o+oo-o+o.+.o-+-$oo+.. + - best 45 costs found:
    0 v= 0.464057:  -0.54  -0.69  -2.76   0.00   0.00   0.00  [grid]
    1 v= 0.771778: -14.75 -10.14   2.08  15.99  13.53 -29.93  [rand]
    2 v= 0.789303: -14.75   8.76  -7.60 -15.99 -13.53 -29.93  [rand]
    3 v= 0.794108:  13.66   8.76   2.08 -15.99 -13.53  29.93  [rand]
    4 v= 0.813301:  -4.62   5.54 -10.56  -4.32 -22.85 -18.95  [rand]
    5 v= 0.840479:  -4.62  -6.92   5.03  -4.32  22.85 -18.95  [rand]
    6 v= 0.857457:  12.79  12.64  10.57 -15.00 -15.00  30.00  [grid]
    7 v= 0.876150:   3.54  -6.92   5.03   4.32  22.85  18.95  [rand]
    8 v= 0.886860:  -4.62  -6.92   5.03   4.32  22.85 -18.95  [rand]
    9 v= 0.893549:  12.79  12.64  10.57 -30.00 -15.00  30.00  [grid]
   10 v= 0.897433:  26.12  12.64  10.57 -30.00 -15.00  30.00  [grid]
   11 v= 0.897887: -13.88 -14.02  10.57  15.00  15.00 -15.00  [grid]
   12 v= 0.898749: -14.75   8.76   2.08 -15.99 -13.53 -29.93  [rand]
   13 v= 0.906393: -14.75   8.76   2.08  15.99 -13.53 -29.93  [rand]
   14 v= 0.921544:   3.54   5.54   5.03   4.32 -22.85  18.95  [rand]
   15 v= 0.929610: -13.88 -14.02  10.57  15.00  15.00 -30.00  [grid]
   16 v= 0.930007:   3.54  -6.92   5.03  -4.32  22.85  18.95  [rand]
   17 v= 0.932839:  -4.62   5.54 -10.56   4.32 -22.85 -18.95  [rand]
   18 v= 0.935553:  18.95  15.98  -0.16 -30.54 -19.59  20.03  [rand]
   19 v= 0.936849:  13.66   8.76   2.08  15.99 -13.53  29.93  [rand]
   20 v= 0.939506: -24.74   9.65  -7.29  27.51 -29.30 -27.65  [rand]
   21 v= 0.950459: -24.74   9.65   1.76  27.51 -29.30 -27.65  [rand]
   22 v= 0.953402:   3.54   5.54   5.03  -4.32 -22.85  18.95  [rand]
   23 v= 0.957181:  26.12  12.64  10.57 -30.00 -30.00  30.00  [grid]
   24 v= 0.978757:  12.79  12.64  10.57 -30.00 -15.00  15.00  [grid]
   25 v= 0.980196: -14.75   8.76  -7.60  15.99 -13.53 -29.93  [rand]
   26 v= 0.990613:  12.79 -14.02  10.57 -15.00  15.00  15.00  [grid]
   27 v= 1.001557: -13.88 -14.02  10.57  15.00  30.00 -30.00  [grid]
   28 v= 1.007442:   3.54   5.54 -10.56   4.32 -22.85  18.95  [rand]
   29 v= 1.012131: -13.88 -14.02  10.57  30.00  15.00 -15.00  [grid]
   30 v= 1.023257:  12.79  12.64  10.57 -15.00 -30.00  30.00  [grid]
   31 v= 1.027785: -14.75 -10.14   2.08 -15.99  13.53 -29.93  [rand]
   32 v= 1.035398:  12.79 -14.02  10.57 -15.00  15.00  30.00  [grid]
   33 v= 1.038380: -27.21 -14.02  10.57  30.00  15.00 -30.00  [grid]
   34 v= 1.048397:  12.79  12.64  10.57 -15.00 -15.00  15.00  [grid]
   35 v= 1.048732: -13.88 -14.02  10.57  30.00  30.00 -15.00  [grid]
   36 v= 1.068252: -13.88 -14.02  10.57  15.00  30.00 -15.00  [grid]
   37 v= 1.073059:  22.99   7.86  13.21 -26.66 -31.62  32.06  [rand]
   38 v= 1.079739:  23.66   9.65   1.76 -27.51 -29.30  27.65  [rand]
   39 v= 1.111110: -32.38 -12.48  -0.02  23.31  -3.26 -40.47  [rand]
   40 v= 1.111529: -13.88  12.64 -16.10 -15.00 -30.00 -30.00  [grid]
   41 v= 1.113094:  12.79 -14.02  10.57  15.00  15.00  30.00  [grid]
   42 v= 1.117102:  13.66 -10.14   2.08  15.99  13.53  29.93  [rand]
   43 v= 1.126106: -20.03  15.98  -5.36  30.54 -19.59 -20.03  [rand]
   44 v= 1.141657:  12.79  12.64  10.57 -30.00 -30.00  30.00  [grid]
*[#8004=0.293697] *[#8012=0.288725] *[#8014=0.281585] *[#8015=0.278944] *[#8017=0.259916] *[#8021=0.258658] *[#8022=0.253479] *[#8027=0.247895] *[#8321=0.243109] *[#9205=0.240863]  + - costs of the above after a little optimization:
    0 v= 0.247895:  -0.45  -0.28   0.48  -0.12   0.12  -0.33  [grid]
    1 v= 0.270157:  -2.36  -0.50   0.06   0.56  -0.20  -2.67  [rand]
    2 v= 0.605440: -12.44   1.62  -4.49  -0.40  -6.50 -20.93  [rand]
    3 v= 0.260361:  -0.09  -1.39   0.72  -0.33   1.05  -0.04  [rand]
    4 v= 0.243109:  -1.49  -0.41   0.24   0.26  -0.09  -1.26  [rand]
    5 v= 0.247568:  -0.92  -1.24   0.48   0.76   0.62  -0.81  [rand]
    6 v= 0.599984:   9.38   1.66   0.62  -1.46  -6.02  19.27  [grid]
    7 v= 0.244211:  -1.49  -1.06   0.33   0.50   0.32  -1.57  [rand]
    8 v= 0.255266:  -1.32  -1.45  -0.20   0.31   0.48  -1.50  [rand]
    9 v= 0.725099:  17.14   8.65   7.89 -25.47 -10.93  27.46  [grid]
   10 v= 0.759986:  21.56   9.42  10.63 -29.48 -14.96  34.36  [grid]
   11 v= 0.257123:  -1.22   0.42  -0.13   0.44  -0.92  -1.20  [grid]
   12 v= 0.647936: -14.68   2.39  -4.55  -6.95  -6.39 -30.07  [rand]
   13 v= 0.617603: -12.82   2.00  -3.87  -1.13  -6.62 -24.86  [rand]
   14 v= 0.250596:  -1.02   0.09  -0.03   0.09  -0.42  -1.26  [rand]
   15 v= 0.629294: -15.69  -3.91  -1.99  12.71   0.21 -23.84  [grid]
   16 v= 0.251704:  -0.29  -1.31   0.50  -0.22   0.84  -0.19  [rand]
  *17 v= 0.240863:  -1.10  -0.55   0.13   0.08  -0.09  -1.23  [rand]
   18 v= 0.603579:   9.82   1.39   2.91  -5.41  -3.57  21.75  [rand]
   19 v= 0.255018:  -0.47   0.23   0.33  -0.20  -0.55  -0.45  [rand]
   20 v= 0.804306: -23.30   6.69  -3.27  24.99 -24.46 -26.41  [rand]
   21 v= 0.826502: -25.19   8.95  -2.25  26.91 -22.12 -27.99  [rand]
   22 v= 0.245316:  -1.48  -0.11   0.03   0.33  -0.28  -1.48  [rand]
   23 v= 0.770976:  22.84  11.95  12.50 -30.65 -14.95  36.87  [grid]
   24 v= 0.320811:   1.07  -0.10   1.23  -0.12  -0.41   1.48  [grid]
   25 v= 0.674121: -17.46   2.15  -3.97  11.56 -14.27 -24.71  [rand]
   26 v= 0.289114:   0.67   0.27   0.51  -0.57  -0.39   0.68  [grid]
   27 v= 0.608752: -12.69  -4.25  -2.99   9.08   1.39 -19.94  [grid]
   28 v= 0.336847:  -0.18   0.71  -0.42   1.56  -1.88  -0.63  [rand]
   29 v= 0.253061:  -1.99  -0.46   0.06   0.28   0.14  -1.76  [grid]
   30 v= 0.774899:  16.49  10.46   4.02 -17.27 -23.20  24.92  [grid]
   31 v= 0.260003:  -2.18  -0.32   0.23   0.35  -0.24  -2.30  [rand]
   32 v= 0.342215:   1.22  -0.06  -0.00  -1.14  -0.62   1.55  [grid]
   33 v= 0.600979: -12.85  -3.08  -4.29   4.24   0.47 -19.87  [grid]
   34 v= 0.278554:  -0.30  -0.07   0.23   0.35  -0.43   0.27  [grid]
   35 v= 0.498167:  -5.67  -3.43  -0.30   2.11   2.49  -8.02  [grid]
   36 v= 0.383108:  -3.93  -3.19   0.16   1.41   1.53  -2.83  [grid]
   37 v= 0.745029:  22.47   8.64  15.92 -29.37 -12.53  43.67  [rand]
   38 v= 0.673505:  16.46   4.14   8.64 -17.16  -4.93  31.37  [rand]
   39 v= 0.698180: -26.68  -1.94   1.64  20.07  -4.64 -41.79  [rand]
   40 v= 0.287033:  -2.29   0.94  -0.38   0.56  -1.53  -2.27  [grid]
   41 v= 0.247186:  -0.66  -0.15   0.08   0.07  -0.42  -0.68  [grid]
   42 v= 0.243182:  -0.63  -0.39   0.35  -0.16   0.18  -0.55  [rand]
   43 v= 0.655750: -16.81   1.39  -4.07   9.34 -11.40 -21.60  [rand]
   44 v= 0.720824:  20.83   6.91  13.80 -23.43 -10.22  42.77  [grid]
 + - save #17 for twobest
 + - skip # 4 for twobest: too close to set #17
 + - skip #42 for twobest: too close to set #17
 + - skip # 7 for twobest: too close to set #17
 + - skip #22 for twobest: too close to set #17
 + - skip #41 for twobest: too close to set #17
 + - skip # 5 for twobest: too close to set #17
 + - skip # 0 for twobest: too close to set #17
 + - skip #14 for twobest: too close to set #17
 + - skip #16 for twobest: too close to set #17
 + - skip #29 for twobest: too close to set #17
 + - skip #19 for twobest: too close to set #17
 + - skip # 8 for twobest: too close to set #17
 + - skip #11 for twobest: too close to set #17
 + - skip #31 for twobest: too close to set #17
 + - skip # 3 for twobest: too close to set #17
 + - skip # 1 for twobest: too close to set #17
 + - skip #34 for twobest: too close to set #17
 + - skip #40 for twobest: too close to set #17
 + - skip #26 for twobest: too close to set #17
 + - skip #24 for twobest: too close to set #17
 + - skip #28 for twobest: too close to set #17
 + - skip #32 for twobest: too close to set #17
 + - skip #36 for twobest: too close to set #17
 + - save #35 for twobest
 + - save # 6 for twobest
 + - save #33 for twobest
 + - skip #18 for twobest: too close to set # 6
 + - save # 2 for twobest
 + - save #27 for twobest
 + - skip #13 for twobest: too close to set # 2
 + - skip #15 for twobest: too close to set #27
 + - save #12 for twobest
 + - save #43 for twobest
 + - save #38 for twobest
 + - skip #25 for twobest: too close to set #43
 + - save #39 for twobest
 + - save #44 for twobest
 + - save # 9 for twobest
 + - save #37 for twobest
 + - save #10 for twobest
 + - skip #23 for twobest: too close to set #10
 + - save #30 for twobest
 + - save #20 for twobest
 + - skip #21 for twobest: too close to set #20
 + - Coarse startup search net CPU time = 0.0 s
++ Start refinement #1 on 12 coarse parameter sets
 + * Enter alignment setup routine
 + - Smoothing base; radius=1.94
 + - Smoothing source; radius=1.94
 + !source mask fill: ubot=25 usiz=52
 + - retaining old weight image
 + - using 82316 points from base image [use_all=2]
 + * Exit alignment setup routine
 +  - histogram: source clip 30.9661 .. 133.804; base clip 1784.82 .. 6462.67
 +  - versus source range 0.0110813 .. 125.02; base range 0 .. 8244.5
 + 76125 total points stored in 743 'RHDD(9.42766)' bloks
 + - param set #1 has cost=0.253336
 + -- Parameters = -1.0241 -0.9899 0.6399 0.2753 0.3347 -1.1387 0.9996 1.0053 0.9925 -0.0019 0.0069 -0.0033
 + - param set #2 has cost=0.270436
 + -- Parameters = -1.0984 -1.5373 0.1070 0.3050 1.0717 -1.1007 0.9991 0.9967 1.0048 0.0019 0.0090 0.0085
 + - param set #3 has cost=0.451953
 + -- Parameters = 4.0922 -2.1196 1.1255 -1.6894 1.9359 4.0060 0.9668 0.9896 1.0254 -0.0255 -0.0064 0.0007
 + - param set #4 has cost=0.555555
 + -- Parameters = -10.5332 -4.2688 -4.3593 3.1460 0.4513 -16.5043 0.9738 1.0109 0.9573 -0.0062 0.0164 -0.0099
 + - param set #5 has cost=0.461102
 + -- Parameters = -5.4661 1.1724 2.0311 -1.0782 -3.7351 -6.1914 0.9826 0.9976 0.9657 0.0086 0.0226 0.0212
 + - param set #6 has cost=0.342197
 + -- Parameters = -2.8183 -0.9985 -1.0291 1.6596 -0.7772 -3.1689 0.9587 1.0068 1.0215 0.0058 0.0305 -0.0128
 + - param set #7 has cost=0.561776
 + -- Parameters = -14.0835 4.5018 -2.0001 -5.1083 -7.8702 -22.7295 0.9776 0.9809 0.9709 0.0051 0.0043 -0.0092
 + - param set #8 has cost=0.557410
 + -- Parameters = -10.2995 7.1540 -2.1963 4.3630 -14.1711 -10.1232 1.0092 0.9741 0.9224 0.0055 0.0042 0.0201
 + - param set #9 has cost=0.577890
 + -- Parameters = 16.0225 5.2290 8.3401 -15.2580 -1.6114 24.1147 0.9809 0.9702 0.9677 -0.0023 -0.0092 -0.0137
 + - param set #10 has cost=0.580986
 + -- Parameters = -25.7473 -1.1003 2.7679 17.4170 -1.9092 -40.7079 0.9608 0.9694 0.9708 -0.0168 -0.0048 -0.0131
 + - param set #11 has cost=0.593999
 + -- Parameters = 21.3443 5.7199 14.9318 -22.3464 -1.5459 44.7606 0.9535 0.9532 0.9651 0.0095 0.0117 0.0135
 + - param set #12 has cost=0.257055
 + -- Parameters = -1.0196 -0.7732 0.2370 0.3036 0.2006 -0.9945 0.9978 1.0043 0.9972 0.0022 -0.0022 -0.0029
 + - sorting parameter sets by cost
 + -- scanning for distances from #1
 + --- dist(#2,#1) = 0.0413 
 + --- dist(#3,#1) = 0.053 
 + --- dist(#4,#1) = 0.112 
 + --- dist(#5,#1) = 0.106 
 + --- dist(#6,#1) = 0.11 
 + --- dist(#7,#1) = 0.171 
 + --- dist(#8,#1) = 0.191 
 + --- dist(#9,#1) = 0.24 
 + --- dist(#10,#1) = 0.281 
 + --- dist(#11,#1) = 0.44 
 + --- dist(#12,#1) = 0.51 
++ Start refinement #2 on 12 coarse parameter sets
 + * Enter alignment setup routine
 + - Smoothing base; radius=1.51
 + - Smoothing source; radius=1.51
 + !source mask fill: ubot=25 usiz=52
 + - retaining old weight image
 + - using 82316 points from base image [use_all=2]
 + * Exit alignment setup routine
 +  - histogram: source clip 31.0441 .. 134.142; base clip 1790.36 .. 6543.75
 +  - versus source range 0.000281232 .. 125.026; base range 0 .. 8254.69
 + 74931 total points stored in 767 'RHDD(9.3481)' bloks
 + - param set #1 has cost=0.288420
 + -- Parameters = -1.0915 -0.9649 0.6928 0.3337 0.2997 -1.1550 0.9979 1.0047 0.9896 -0.0035 0.0073 -0.0039
 + - param set #2 has cost=0.290234
 + -- Parameters = -1.1626 -0.8205 0.3529 0.4320 0.2431 -1.1143 0.9951 1.0053 0.9967 0.0024 0.0043 -0.0020
 + - param set #3 has cost=0.292738
 + -- Parameters = -1.1353 -1.4334 0.6053 0.4386 0.9290 -1.1895 0.9927 1.0062 0.9920 -0.0001 0.0093 0.0075
 + - param set #4 has cost=0.301524
 + -- Parameters = -1.7223 -0.2437 0.2797 0.2886 -0.4848 -2.0431 0.9937 1.0005 1.0005 0.0028 0.0334 -0.0205
 + - param set #5 has cost=0.332015
 + -- Parameters = -0.6516 -1.2427 0.5432 0.1780 0.7836 -0.5099 0.9677 0.9989 0.9950 -0.0279 -0.0118 0.0097
 + - param set #6 has cost=0.299730
 + -- Parameters = -1.8684 -1.2342 1.4870 0.4901 0.3762 -2.1008 0.9929 1.0129 0.9712 0.0065 0.0270 -0.0030
 + - param set #7 has cost=0.414569
 + -- Parameters = -4.2763 -0.3696 -0.5991 1.8388 -1.5021 -4.1408 0.9541 1.0283 0.9892 -0.0070 0.0131 -0.0000
 + - param set #8 has cost=0.530374
 + -- Parameters = -9.3958 3.9751 3.3006 3.8325 -7.1087 -8.9496 1.0227 0.9470 0.9312 0.0106 0.0029 0.0176
 + - param set #9 has cost=0.560424
 + -- Parameters = -12.8807 4.7257 0.1244 -7.2850 -8.7394 -17.8635 0.9783 0.9765 0.9501 0.0128 -0.0018 -0.0090
 + - param set #10 has cost=0.575266
 + -- Parameters = 15.9740 4.6944 6.5013 -14.2410 -1.6548 22.4955 0.9767 0.9731 0.9545 -0.0171 -0.0223 -0.0203
 + - param set #11 has cost=0.583284
 + -- Parameters = -23.3388 -1.5426 2.8228 17.0809 -2.6679 -41.7735 0.9597 0.9732 0.9720 -0.0178 -0.0048 -0.0129
 + - param set #12 has cost=0.592214
 + -- Parameters = 18.6380 6.8299 14.5626 -22.1960 -1.2380 44.9249 0.9505 0.9513 0.9638 0.0087 0.0104 0.0142
 + - sorting parameter sets by cost
 + -- scanning for distances from #1
 + --- dist(#2,#1) = 0.0268 
 + --- dist(#3,#1) = 0.0515 
 + --- dist(#4,#1) = 0.0888 
 + --- dist(#5,#1) = 0.118 
 + --- dist(#6,#1) = 0.109 
 + --- dist(#7,#1) = 0.119 
 + --- dist(#8,#1) = 0.159 
 + --- dist(#9,#1) = 0.186 
 + --- dist(#10,#1) = 0.263 
 + --- dist(#11,#1) = 0.451 
 + --- dist(#12,#1) = 0.512 
++ Start refinement #3 on 12 coarse parameter sets
 + * Enter alignment setup routine
 + - Smoothing base; radius=1.18
 + - Smoothing source; radius=1.18
 + !source mask fill: ubot=25 usiz=52
 + - retaining old weight image
 + - using 82316 points from base image [use_all=2]
 + * Exit alignment setup routine
 +  - histogram: source clip 31.1246 .. 134.489; base clip 1791.65 .. 6600.07
 +  - versus source range 3.97679e-06 .. 125.044; base range 0 .. 8264.12
 + 75706 total points stored in 776 'RHDD(9.29965)' bloks
 + - param set #1 has cost=0.299784
 + -- Parameters = -1.1006 -0.9012 0.6986 0.3033 0.2512 -1.1652 0.9959 1.0050 0.9894 -0.0037 0.0062 -0.0041
 + - param set #2 has cost=0.299599
 + -- Parameters = -1.0758 -0.6718 0.5353 0.4187 0.1465 -1.0356 0.9941 1.0049 0.9933 0.0027 0.0049 -0.0044
 + - param set #3 has cost=0.303929
 + -- Parameters = -1.2291 -1.4398 0.6179 0.4717 0.8955 -1.2424 0.9936 1.0069 0.9911 0.0043 0.0093 0.0072
 + - param set #4 has cost=0.304098
 + -- Parameters = -1.7596 -0.8517 1.1562 0.3792 0.2288 -1.9341 0.9967 1.0129 0.9802 0.0020 0.0244 -0.0050
 + - param set #5 has cost=0.299967
 + -- Parameters = -1.6562 -0.0806 0.7363 0.4805 -0.5747 -1.8459 0.9954 1.0047 0.9898 0.0036 0.0224 -0.0202
 + - param set #6 has cost=0.309416
 + -- Parameters = -0.5009 -1.4810 0.7081 0.0237 0.8134 -0.4868 0.9940 1.0105 0.9878 -0.0223 -0.0096 0.0047
 + - param set #7 has cost=0.323339
 + -- Parameters = -1.3232 -0.1146 -0.3003 0.3277 -0.5519 -1.1848 0.9724 1.0098 1.0112 0.0001 0.0075 -0.0104
 + - param set #8 has cost=0.450098
 + -- Parameters = -6.7679 0.3759 4.6563 0.2778 -0.9861 -7.8927 1.0541 0.9761 0.9138 0.0163 0.1009 -0.0061
 + - param set #9 has cost=0.546960
 + -- Parameters = -10.2525 3.4455 2.4680 -4.2860 -10.7091 -13.8450 0.9974 0.9708 0.9264 0.0086 0.0452 0.0267
 + - param set #10 has cost=0.576411
 + -- Parameters = 16.0585 4.2575 6.7272 -13.8456 -1.4430 22.3743 0.9842 0.9767 0.9488 -0.0179 -0.0252 -0.0226
 + - param set #11 has cost=0.582508
 + -- Parameters = -22.7646 -1.1989 2.7001 16.2542 -2.2080 -41.8613 0.9589 0.9727 0.9823 -0.0307 -0.0052 -0.0186
 + - param set #12 has cost=0.589214
 + -- Parameters = 17.7758 7.1688 12.6427 -22.2491 -1.4083 44.9868 0.9514 0.9525 0.9642 0.0092 0.0104 0.0140
 + - sorting parameter sets by cost
 + -- scanning for distances from #1
 + --- dist(#2,#1) = 0.0289 
 + --- dist(#3,#1) = 0.0787 
 + --- dist(#4,#1) = 0.0522 
 + --- dist(#5,#1) = 0.0879 
 + --- dist(#6,#1) = 0.112 
 + --- dist(#7,#1) = 0.0593 
 + --- dist(#8,#1) = 0.432 
 + --- dist(#9,#1) = 0.182 
 + --- dist(#10,#1) = 0.26 
 + --- dist(#11,#1) = 0.454 
 + --- dist(#12,#1) = 0.511 
 + - Total coarse refinement net CPU time = 0.0 s; 3256 funcs
++ *** Fine pass begins ***
 + * Enter alignment setup routine
 + - Smoothing base; radius=1.00
 + - Smoothing source; radius=1.00
 + !source mask fill: ubot=25 usiz=52
 + - retaining old weight image
 + * Exit alignment setup routine
++ Picking best parameter set out of 13 cases
 +  - histogram: source clip 31.1456 .. 134.58; base clip 1791.65 .. 6600.07
 +  - versus source range 7.29119e-08 .. 125.015; base range 0 .. 8264.12
 + 75058 total points stored in 783 'RHDD(9.27904)' bloks
 + - cost(#1)=0.300292 *
 + -- Parameters = -1.0758 -0.6718 0.5353 0.4187 0.1465 -1.0356 0.9941 1.0049 0.9933 0.0027 0.0049 -0.0044
 + - cost(#2)=0.300753  
 + -- Parameters = -1.1006 -0.9012 0.6986 0.3033 0.2512 -1.1652 0.9959 1.0050 0.9894 -0.0037 0.0062 -0.0041
 + - cost(#3)=0.300358  
 + -- Parameters = -1.6562 -0.0806 0.7363 0.4805 -0.5747 -1.8459 0.9954 1.0047 0.9898 0.0036 0.0224 -0.0202
 + - cost(#4)=0.304656  
 + -- Parameters = -1.2291 -1.4398 0.6179 0.4717 0.8955 -1.2424 0.9936 1.0069 0.9911 0.0043 0.0093 0.0072
 + - cost(#5)=0.304520  
 + -- Parameters = -1.7596 -0.8517 1.1562 0.3792 0.2288 -1.9341 0.9967 1.0129 0.9802 0.0020 0.0244 -0.0050
 + - cost(#6)=0.311188  
 + -- Parameters = -0.5009 -1.4810 0.7081 0.0237 0.8134 -0.4868 0.9940 1.0105 0.9878 -0.0223 -0.0096 0.0047
 + - cost(#7)=0.325602  
 + -- Parameters = -1.3232 -0.1146 -0.3003 0.3277 -0.5519 -1.1848 0.9724 1.0098 1.0112 0.0001 0.0075 -0.0104
 + - cost(#8)=0.448696  
 + -- Parameters = -6.7679 0.3759 4.6563 0.2778 -0.9861 -7.8927 1.0541 0.9761 0.9138 0.0163 0.1009 -0.0061
 + - cost(#9)=0.545913  
 + -- Parameters = -10.2525 3.4455 2.4680 -4.2860 -10.7091 -13.8450 0.9974 0.9708 0.9264 0.0086 0.0452 0.0267
 + - cost(#10)=0.577189  
 + -- Parameters = 16.0585 4.2575 6.7272 -13.8456 -1.4430 22.3743 0.9842 0.9767 0.9488 -0.0179 -0.0252 -0.0226
 + - cost(#11)=0.582383  
 + -- Parameters = -22.7646 -1.1989 2.7001 16.2542 -2.2080 -41.8613 0.9589 0.9727 0.9823 -0.0307 -0.0052 -0.0186
 + - cost(#12)=0.588785  
 + -- Parameters = 17.7758 7.1688 12.6427 -22.2491 -1.4083 44.9868 0.9514 0.9525 0.9642 0.0092 0.0104 0.0140
 + - cost(#13)=0.495651  
 + -- Parameters = -0.5439 -0.6899 -2.7625 0.0000 0.0000 0.0000 1.0000 1.0000 1.0000 0.0000 0.0000 0.0000
 + -num_rtb 99 ==> refine all 13 cases
 + - cost(#1)=0.300005 *
 + -- Parameters = -1.0514 -0.6681 0.5364 0.4082 0.1365 -1.0511 0.9942 1.0046 0.9930 0.0025 0.0047 -0.0083
 + - cost(#2)=0.300204  
 + -- Parameters = -1.1006 -0.8512 0.6768 0.3671 0.2130 -1.1614 0.9958 1.0065 0.9892 -0.0030 0.0068 -0.0051
 + - cost(#3)=0.299033 *
 + -- Parameters = -1.5699 -0.0056 0.7526 0.4846 -0.6164 -1.7105 0.9963 1.0049 0.9882 0.0034 0.0192 -0.0197
 + - cost(#4)=0.303707  
 + -- Parameters = -1.2184 -1.3457 0.6385 0.4744 0.8606 -1.2492 0.9940 1.0094 0.9900 0.0044 0.0088 0.0072
 + - cost(#5)=0.302308  
 + -- Parameters = -1.5574 -0.8011 1.0872 0.3998 0.1977 -1.7243 0.9971 1.0118 0.9810 0.0023 0.0192 -0.0052
 + - cost(#6)=0.303971  
 + -- Parameters = -0.5126 -1.1334 0.7822 0.1956 0.5110 -0.4418 0.9958 1.0065 0.9873 -0.0094 -0.0104 -0.0002
 + - cost(#7)=0.303516  
 + -- Parameters = -1.1714 -0.1094 0.2112 0.5973 -0.4926 -1.1917 0.9893 1.0035 0.9999 0.0075 0.0081 -0.0163
 + - cost(#8)=0.382984  
 + -- Parameters = -4.5312 1.8153 4.1684 0.5468 -2.8927 -5.4055 1.0154 1.0052 0.9147 0.0170 0.0893 -0.0604
 + - cost(#9)=0.372254  
 + -- Parameters = -3.5568 -0.3148 3.6283 1.0168 -1.0449 -4.2906 1.0211 1.0093 0.9316 -0.0042 0.0622 -0.0404
 + - cost(#10)=0.566563  
 + -- Parameters = 16.4288 -1.3232 6.1035 -9.1676 -1.1420 21.7274 0.9806 0.9704 0.9332 -0.0283 -0.0225 -0.0291
 + - cost(#11)=0.582267  
 + -- Parameters = -22.7650 -1.1667 2.6858 16.1994 -2.2619 -41.8547 0.9589 0.9729 0.9823 -0.0271 -0.0052 -0.0187
 + - cost(#12)=0.587132  
 + -- Parameters = 17.7698 7.6667 12.5038 -21.6136 -0.5739 44.9956 0.9499 0.9514 0.9611 0.0010 0.0134 0.0130
 + - cost(#13)=0.304424  
 + -- Parameters = -0.8282 -0.8307 0.2255 0.4237 0.2945 -0.7909 0.9921 1.0021 0.9985 -0.0003 -0.0000 -0.0005
 + - case #3 is now the best
 + - Initial  cost = 0.299033
 + - Initial fine Parameters = -1.5699 -0.0056 0.7526 0.4846 -0.6164 -1.7105 0.9963 1.0049 0.9882 0.0034 0.0192 -0.0197
 + - Finalish cost = 0.298382 ; 96 funcs
 +  - Set lpc+ parameters back to pure lpc before Final
 +  - histogram: source clip 31.1547 .. 134.619; base clip 1791.65 .. 6600.07
 +  - versus source range 7.29119e-08 .. 125.015; base range 0 .. 8264.12
*[#15694=-0.256811] *[#15701=-0.258776] *[#15702=-0.259589] *[#15725=-0.261628] *[#15746=-0.261634] *[#15753=-0.261644] *[#15754=-0.261969] *[#15760=-0.262153] *[#15773=-0.262209] *[#15781=-0.26229] *[#15782=-0.262298] *[#15799=-0.26233] *[#15807=-0.26238] *[#15811=-0.262484] *[#15822=-0.262493] *[#15823=-0.262583] *[#15832=-0.262639] *[#15834=-0.262837] *[#15855=-0.262867] *[#15861=-0.262947] *[#15862=-0.263016] *[#15877=-0.263072] *[#15890=-0.263089] *[#15894=-0.263153] *[#15895=-0.263161] *[#15904=-0.263179] *[#15905=-0.26322] *[#15908=-0.263246] *[#15909=-0.263252] *[#15910=-0.26328] *[#15913=-0.263282] *[#15914=-0.263292] *[#15917=-0.263301] *[#15918=-0.263341] *[#15919=-0.263357] *[#15921=-0.263389] *[#15922=-0.263466] *[#15923=-0.263487] *[#15924=-0.263541] *[#15927=-0.263588] *[#15928=-0.263597] *[#15929=-0.263621] *[#15932=-0.263626] *[#15933=-0.263662] *[#15934=-0.263698] *[#15937=-0.263757] *[#15938=-0.263786] *[#15939=-0.263807] *[#15944=-0.263852] *[#15945=-0.263883] *[#15949=-0.263902] *[#15950=-0.263956] *[#15951=-0.263958] *[#15956=-0.263975] *[#15959=-0.264033] *[#15960=-0.26406] *[#15961=-0.264074] *[#15962=-0.264084] *[#15963=-0.2641] *[#15964=-0.264125] *[#15965=-0.264144] *[#15968=-0.26415] *[#15969=-0.264159] *[#15972=-0.264163] *[#15973=-0.264201] *[#15974=-0.264221] *[#15977=-0.264234] *[#15978=-0.264234] *[#15980=-0.264251] *[#15981=-0.264258] *[#15984=-0.264268] *[#15987=-0.264284] *[#15990=-0.26429] *[#15991=-0.264295] *[#15992=-0.264296] *[#15996=-0.264318] *[#15997=-0.264331] *[#15998=-0.264341] *[#15999=-0.264349] *[#16000=-0.264361] *[#16001=-0.264372] *[#16008=-0.26439] *[#16009=-0.264392] *[#16014=-0.264399] *[#16015=-0.2644] *[#16016=-0.264404] *[#16017=-0.264406] *[#16018=-0.264413] *[#16021=-0.264415] *[#16022=-0.264418] *[#16025=-0.264418] *[#16027=-0.264428] *[#16028=-0.26443] *[#16029=-0.264436] *[#16030=-0.264438] *[#16031=-0.264443] *[#16032=-0.264452] *[#16035=-0.264456] *[#16038=-0.264459] *[#16041=-0.264459] *[#16043=-0.264466] *[#16048=-0.264468] *[#16049=-0.26447] *[#16050=-0.26447] *[#16054=-0.264472] *[#16055=-0.264475] *[#16058=-0.264475] *[#16062=-0.264478] *[#16069=-0.264479] *[#16078=-0.264482] *[#16083=-0.264484] *[#16084=-0.264484] *[#16092=-0.264485] *[#16093=-0.264485] *[#16100=-0.264485] *[#16102=-0.264485] *[#16119=-0.264486] *[#16124=-0.264487] *[#16125=-0.264488] *[#16128=-0.264488] *[#16130=-0.264489] *[#16133=-0.26449] *[#16134=-0.264491] *[#16135=-0.264492] *[#16142=-0.264492] *[#16150=-0.264497] *[#16163=-0.264498] *[#16166=-0.2645] *[#16169=-0.264503] *[#16170=-0.264504] *[#16171=-0.264506] *[#16176=-0.264507] *[#16179=-0.264509] *[#16186=-0.264511] *[#16191=-0.264511] *[#16197=-0.264511] *[#16201=-0.264513] *[#16206=-0.264515] *[#16209=-0.264515] *[#16211=-0.264516] *[#16216=-0.264517] *[#16221=-0.264517] *[#16239=-0.264518] *[#16242=-0.264519] *[#16247=-0.264519] *[#16263=-0.26452] *[#16275=-0.26452] *[#16280=-0.264521] *[#16284=-0.264522] *[#16303=-0.264523] 
 + - Final    cost = -0.264523 ; 617 funcs
 + Final fine fit Parameters:
       x-shift=-1.2862   y-shift= 0.1846   z-shift= 0.4691
       z-angle= 0.2642   x-angle=-0.9832   y-angle=-1.4762
       x-scale= 1.0085   y-scale= 1.0211   z-scale= 0.9968
     y/x-shear=-0.0027 z/x-shear= 0.0127 z/y-shear=-0.0269
 + - Fine net CPU time = 0.0 s
++ Computing output image
++ image warp: parameters = -1.2862 0.1846 0.4691 0.2642 -0.9832 -1.4762 1.0085 1.0211 0.9968 -0.0027 0.0127 -0.0269
++ Output dataset ./__tt_sub-TAG022_SurfVol_ns_ob_temp_al_junk+orig.BRIK
++ Wrote -1Dmatrix_save ./sub-TAG022_SurfVol_al_junk_e2a_only_mat.aff12.1D
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 138.4
++ ###########################################################
++ #   Please check results visually for alignment quality   #
++ ###########################################################
++ #   '-autoweight' is recommended when using -lpc or -lpa  #
++ #   If your results are not good, please try again.       #
++ ###########################################################
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./__tt_vr_base_min_outlier_ts_ns+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./__tt_vr_base_min_outlier_ts_ns+orig.BRIK is 5.724164 degrees from plumb.
++ Source dataset: ./__tt_sub-TAG022_SurfVol_ns+orig.HEAD
++ Base dataset:   ./__tt_vr_base_min_outlier_ts_ns+orig.HEAD
++ Loading datasets
 + Range param#4 [z-angle] = -6.000000 .. 6.000000
 + Range param#5 [x-angle] = -6.000000 .. 6.000000
 + Range param#6 [y-angle] = -6.000000 .. 6.000000
 + Range param#1 [x-shift] = -10.000000 .. 10.000000
 + Range param#2 [y-shift] = -10.000000 .. 10.000000
 + Range param#3 [z-shift] = -10.000000 .. 10.000000
 + Range param#4 [z-angle] = -45.000000 .. 45.000000
 + Range param#5 [x-angle] = -45.000000 .. 45.000000
 + Range param#6 [y-angle] = -45.000000 .. 45.000000
 + Range param#1 [x-shift] = -40.000000 .. 40.000000
 + Range param#2 [y-shift] = -40.000000 .. 40.000000
 + Range param#3 [z-shift] = -40.000000 .. 40.000000
++ changing output grid spacing to 1.0000 mm
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ ========== sub-brick #0 ========== [total CPU to here=0.0 s]
 + * Enter alignment setup routine
 + - copying base image
 + - copying source image
 + - no weight image
 + - using 11 points from base image [use_all=0]
 + * Exit alignment setup routine
++ using -1Dmatrix_apply
++ Computing output image
++ image warp: parameters = 1.0036 0.0935 0.0533 9.0461 0.0397 -0.0178 -0.9962 158.0383 -0.0893 1.0165 0.0053 30.1879
++ Output dataset ./sub-TAG022_SurfVol_al_junk+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 0.9
++ ###########################################################
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
foreach run ( 01 02 )
3dvolreg -verbose -zpad 1 -base vr_base_min_outlier+orig -1Dfile dfile.r01.1D -prefix rm.epi.volreg.r01 -Fourier -1Dmatrix_save mat.r01.vr.aff12.1D pb01.sub-TAG022.r01.despike+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dvolreg: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./vr_base_min_outlier+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./vr_base_min_outlier+orig.BRIK is 5.724164 degrees from plumb.
++ Reading in base dataset ./vr_base_min_outlier+orig.BRIK
++ Oblique dataset:./pb01.sub-TAG022.r01.despike+orig.BRIK is 5.724164 degrees from plumb.
++ Reading input dataset ./pb01.sub-TAG022.r01.despike+orig.BRIK
++ Edging: x=4 y=4 z=3
++ Creating mask for -maxdisp
 + Automask has 86608 voxels
 + 9844 voxels left in -maxdisp mask after erosion
++ Initializing alignment base
++ Starting final pass on 390 sub-bricks: 0..1..2..3..4..5..6..7..8..9..10..11..12..13..14..15..16..17..18..19..20..21..22..23..24..25..26..27..28..29..30..31..32..33..34..35..36..37..38..39..40..41..42..43..44..45..46..47..48..49..50..51..52..53..54..55..56..57..58..59..60..61..62..63..64..65..66..67..68..69..70..71..72..73..74..75..76..77..78..79..80..81..82..83..84..85..86..87..88..89..90..91..92..93..94..95..96..97..98..99..100..101..102..103..104..105..106..107..108..109..110..111..112..113..114..115..116..117..118..119..120..121..122..123..124..125..126..127..128..129..130..131..132..133..134..135..136..137..138..139..140..141..142..143..144..145..146..147..148..149..150..151..152..153..154..155..156..157..158..159..160..161..162..163..164..165..166..167..168..169..170..171..172..173..174..175..176..177..178..179..180..181..182..183..184..185..186..187..188..189..190..191..192..193..194..195..196..197..198..199..200..201..202..203..204..205..206..207..208..209..210..211..212..213..214..215..216..217..218..219..220..221..222..223..224..225..226..227..228..229..230..231..232..233..234..235..236..237..238..239..240..241..242..243..244..245..246..247..248..249..250..251..252..253..254..255..256..257..258..259..260..261..262..263..264..265..266..267..268..269..270..271..272..273..274..275..276..277..278..279..280..281..282..283..284..285..286..287..288..289..290..291..292..293..294..295..296..297..298..299..300..301..302..303..304..305..306..307..308..309..310..311..312..313..314..315..316..317..318..319..320..321..322..323..324..325..326..327..328..329..330..331..332..333..334..335..336..337..338..339..340..341..342..343..344..345..346..347..348..349..350..351..352..353..354..355..356..357..358..359..360..361..362..363..364..365..366..367..368..369..370..371..372..373..374..375..376..377..378..379..380..381..382..383..384..385..386..387..388..389..
++ CPU time for realignment=0 s  [=0 s/sub-brick]
++ Min : roll=+0.333  pitch=-0.233  yaw=-1.303  dS=-1.191  dL=+0.240  dP=-0.304
++ Mean: roll=+0.658  pitch=+0.192  yaw=-1.186  dS=-0.848  dL=+0.385  dP=-0.048
++ Max : roll=+1.024  pitch=+0.623  yaw=-1.038  dS=-0.588  dL=+0.605  dP=+0.194
++ Max displacements (mm) for each sub-brick:
 3.27(0.00) 3.24(0.06) 3.28(0.28) 3.26(0.28) 3.30(0.11) 3.29(0.15) 3.27(0.36) 3.30(0.04) 3.32(0.24) 3.31(0.15) 3.32(0.28) 3.33(0.29) 3.34(0.15) 3.27(0.41) 3.29(0.13) 3.30(0.32) 3.27(0.25) 3.32(0.11) 3.32(0.31) 3.25(0.17) 3.28(0.22) 3.32(0.34) 3.30(0.07) 3.26(0.41) 3.28(0.28) 3.27(0.16) 3.20(0.37) 3.22(0.05) 3.23(0.36) 3.22(0.13) 3.27(0.31) 3.30(0.34) 3.32(0.09) 3.29(0.39) 3.30(0.20) 3.35(0.23) 3.29(0.28) 3.30(0.08) 3.30(0.29) 3.26(0.24) 3.29(0.13) 3.30(0.35) 3.29(0.10) 3.31(0.27) 3.32(0.25) 3.32(0.16) 3.29(0.35) 3.29(0.09) 3.32(0.32) 3.29(0.25) 3.32(0.13) 3.30(0.30) 3.27(0.11) 3.32(0.31) 3.29(0.27) 3.30(0.12) 3.29(0.28) 3.33(0.07) 3.32(0.24) 3.33(0.07) 3.34(0.32) 3.32(0.16) 3.35(0.25) 3.36(0.11) 3.37(0.32) 3.34(0.20) 3.32(0.23) 3.28(0.34) 3.29(0.11) 3.27(0.31) 3.28(0.10) 3.25(0.27) 3.22(0.07) 3.23(0.25) 3.23(0.06) 3.26(0.33) 3.23(0.36) 3.26(0.14) 3.25(0.38) 3.26(0.08) 3.26(0.28) 3.20(0.25) 3.21(0.22) 3.22(0.36) 3.19(0.15) 3.22(0.32) 3.19(0.41) 3.25(0.08) 3.26(0.34) 3.24(0.16) 3.20(0.25) 3.14(0.22) 3.15(0.20) 3.15(0.27) 3.13(0.13) 3.10(0.30) 3.10(0.12) 3.11(0.31) 3.04(0.30) 3.04(0.20) 3.01(0.37) 3.02(0.09) 3.01(0.23) 3.04(0.18) 3.02(0.27) 2.98(0.12) 2.92(0.33) 2.94(0.17) 2.97(0.23) 2.88(0.27) 2.92(0.11) 2.93(0.29) 2.90(0.08) 2.89(0.32) 2.85(0.18) 2.88(0.19) 2.84(0.27) 2.86(0.04) 2.87(0.27) 2.88(0.10) 2.83(0.27) 2.83(0.25) 2.79(0.19) 2.72(0.37) 2.81(0.13) 2.84(0.30) 2.79(0.25) 2.79(0.13) 2.81(0.33) 2.77(0.07) 2.77(0.33) 2.79(0.21) 2.88(0.26) 2.77(0.22) 2.72(0.27) 2.75(0.31) 2.79(0.10) 2.80(0.30) 2.84(0.06) 2.84(0.27) 2.83(0.07) 2.89(0.35) 2.87(0.19) 2.89(0.25) 2.85(0.21) 2.89(0.17) 2.92(0.27) 2.90(0.07) 2.84(0.34) 2.81(0.20) 2.87(0.25) 2.81(0.17) 2.77(0.27) 2.75(0.23) 2.77(0.15) 2.79(0.15) 2.79(0.36) 2.90(0.17) 2.86(0.31) 2.86(0.13) 2.78(0.35) 2.80(0.05) 2.82(0.35) 2.75(0.25) 2.76(0.15) 2.79(0.36) 2.79(0.08) 2.76(0.35) 2.77(0.18) 2.83(0.37) 2.70(0.42) 2.67(0.19) 2.72(0.40) 2.70(0.06) 2.69(0.35) 2.74(0.25) 2.84(0.29) 2.76(0.27) 2.77(0.17) 2.86(0.37) 2.88(0.12) 2.78(0.44) 2.74(0.10) 2.81(0.43) 2.78(0.13) 2.78(0.32) 2.82(0.27) 2.85(0.17) 2.76(0.30) 2.76(0.10) 2.79(0.24) 2.88(0.13) 2.78(0.29) 2.81(0.06) 2.95(0.43) 2.88(0.07) 2.82(0.40) 2.88(0.27) 2.95(0.22) 2.85(0.19) 2.85(0.23) 2.87(0.23) 2.93(0.25) 2.77(0.34) 2.76(0.08) 2.86(0.37) 2.83(0.07) 2.71(0.41) 2.77(0.20) 2.89(0.28) 2.79(0.30) 2.76(0.12) 2.89(0.35) 2.87(0.08) 2.85(0.29) 2.89(0.19) 3.01(0.28) 2.85(0.27) 2.85(0.20) 2.96(0.32) 3.04(0.14) 2.84(0.41) 2.89(0.07) 3.07(0.41) 2.95(0.16) 2.82(0.36) 2.97(0.31) 2.98(0.18) 2.81(0.41) 2.88(0.20) 3.05(0.34) 2.93(0.39) 2.96(0.07) 3.07(0.37) 2.97(0.12) 2.90(0.32) 2.97(0.23) 3.01(0.18) 2.87(0.31) 2.93(0.15) 3.00(0.30) 2.99(0.06) 2.88(0.33) 2.99(0.20) 3.05(0.29) 2.93(0.39) 2.94(0.10) 3.04(0.37) 3.03(0.07) 2.98(0.32) 2.99(0.07) 3.09(0.34) 2.99(0.13) 2.96(0.35) 3.03(0.23) 3.09(0.22) 2.90(0.36) 2.93(0.12) 3.09(0.33) 3.01(0.10) 2.96(0.30) 3.03(0.24) 3.07(0.17) 2.89(0.38) 2.93(0.05) 3.07(0.37) 2.92(0.24) 2.94(0.18) 3.07(0.31) 3.02(0.11) 2.96(0.28) 2.99(0.16) 3.14(0.35) 2.98(0.27) 2.88(0.20) 3.04(0.34) 3.12(0.14) 2.95(0.44) 2.97(0.05) 3.10(0.34) 3.03(0.10) 2.93(0.33) 3.00(0.24) 3.16(0.31) 3.00(0.34) 3.00(0.12) 3.10(0.31) 3.15(0.11) 2.97(0.40) 2.97(0.02) 3.12(0.33) 3.14(0.04) 2.99(0.38) 3.03(0.10) 3.21(0.36) 3.11(0.19) 3.04(0.26) 3.14(0.31) 3.15(0.08) 3.04(0.34) 3.08(0.10) 3.20(0.28) 3.02(0.31) 2.95(0.08) 3.03(0.29) 3.03(0.10) 2.94(0.27) 3.03(0.26) 3.08(0.13) 2.93(0.36) 2.96(0.08) 3.11(0.33) 3.04(0.18) 2.94(0.27) 3.06(0.32) 3.04(0.04) 2.93(0.35) 3.02(0.27) 3.16(0.29) 2.97(0.42) 2.98(0.06) 3.11(0.34) 3.04(0.17) 2.94(0.25) 3.08(0.34) 3.05(0.06) 2.89(0.36) 3.02(0.34) 3.05(0.10) 2.88(0.41) 2.98(0.21) 3.05(0.19) 2.88(0.37) 2.92(0.07) 3.03(0.31) 2.82(0.36) 2.85(0.06) 3.00(0.33) 2.85(0.32) 2.89(0.07) 3.03(0.35) 2.89(0.28) 2.87(0.12) 3.03(0.38) 2.85(0.31) 2.82(0.16) 2.97(0.38) 2.90(0.09) 2.75(0.33) 2.94(0.41) 2.81(0.19) 2.63(0.37) 2.75(0.36) 2.75(0.11) 2.65(0.43) 2.79(0.22) 2.89(0.31) 2.70(0.30) 2.70(0.16) 2.83(0.33) 2.79(0.08) 2.71(0.28) 2.83(0.26) 2.93(0.21) 2.75(0.40) 2.79(0.08) 2.95(0.29) 2.71(0.41) 2.72(0.06) 2.86(0.37) 2.70(0.32) 2.70(0.11) 2.99(0.47) 2.76(0.38) 2.72(0.14) 2.83(0.33) 2.78(0.07) 2.67(0.27) 2.85(0.34) 2.85(0.11) 2.66(0.43) 2.91(0.37) 3.09(0.34) 2.77(0.55) 2.76(0.07) 2.94(0.39) 2.75(0.34) 2.60(0.27) 2.79(0.40) 2.66(0.17)
++ Max displacement in automask = 3.37 (mm) at sub-brick 64
++ Max delta displ  in automask = 0.55 (mm) at sub-brick 383
++ Wrote dataset to disk in ./rm.epi.volreg.r01+orig.BRIK
3dcalc -overwrite -a pb01.sub-TAG022.r01.despike+orig -expr 1 -prefix rm.epi.all1
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
[7m*+ WARNING:[0m input 'a' is not used in the expression
++ Output dataset ./rm.epi.all1+orig.BRIK
cat_matvec -ONELINE sub-TAG022_SurfVol_al_junk_mat.aff12.1D -I mat.r01.vr.aff12.1D
3dAllineate -base sub-TAG022_SurfVol_ns+orig -input pb01.sub-TAG022.r01.despike+orig -1Dmatrix_apply mat.r01.warp.aff12.1D -mast_dxyz 2.5 -prefix rm.epi.nomask.r01
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb01.sub-TAG022.r01.despike+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb01.sub-TAG022.r01.despike+orig.BRIK is 5.724164 degrees from plumb.
++ Source dataset: ./pb01.sub-TAG022.r01.despike+orig.HEAD
++ Base dataset:   ./sub-TAG022_SurfVol_ns+orig.HEAD
++ Loading datasets
++ master dataset for output = base
++ changing output grid spacing to 2.5000 mm
++ OpenMP thread count = 1
++ ========== Applying transformation to 390 sub-bricks ==========
volume 0..1..2..3..4..5..6..7..8..9..10..11..12..13..14..15..16..17..18..19..20..21..22..23..24..25..26..27..28..29..30..31..32..33..34..35..36..37..38..39..40..41..42..43..44..45..46..47..48..49..50..51..52..53..54..55..56..57..58..59..60..61..62..63..64..65..66..67..68..69..70..71..72..73..74..75..76..77..78..79..80..81..82..83..84..85..86..87..88..89..90..91..92..93..94..95..96..97..98..99..100..101..102..103..104..105..106..107..108..109..110..111..112..113..114..115..116..117..118..119..120..121..122..123..124..125..126..127..128..129..130..131..132..133..134..135..136..137..138..139..140..141..142..143..144..145..146..147..148..149..150..151..152..153..154..155..156..157..158..159..160..161..162..163..164..165..166..167..168..169..170..171..172..173..174..175..176..177..178..179..180..181..182..183..184..185..186..187..188..189..190..191..192..193..194..195..196..197..198..199..200..201..202..203..204..205..206..207..208..209..210..211..212..213..214..215..216..217..218..219..220..221..222..223..224..225..226..227..228..229..230..231..232..233..234..235..236..237..238..239..240..241..242..243..244..245..246..247..248..249..250..251..252..253..254..255..256..257..258..259..260..261..262..263..264..265..266..267..268..269..270..271..272..273..274..275..276..277..278..279..280..281..282..283..284..285..286..287..288..289..290..291..292..293..294..295..296..297..298..299..300..301..302..303..304..305..306..307..308..309..310..311..312..313..314..315..316..317..318..319..320..321..322..323..324..325..326..327..328..329..330..331..332..333..334..335..336..337..338..339..340..341..342..343..344..345..346..347..348..349..350..351..352..353..354..355..356..357..358..359..360..361..362..363..364..365..366..367..368..369..370..371..372..373..374..375..376..377..378..379..380..381..382..383..384..385..386..387..388..389
++ Output dataset ./rm.epi.nomask.r01+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 54.5
++ ###########################################################
3dAllineate -base sub-TAG022_SurfVol_ns+orig -input rm.epi.all1+orig -1Dmatrix_apply mat.r01.warp.aff12.1D -mast_dxyz 2.5 -final NN -quiet -prefix rm.epi.1.r01
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./rm.epi.all1+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./rm.epi.all1+orig.BRIK is 5.724164 degrees from plumb.
++ Output dataset ./rm.epi.1.r01+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 43.4
3dTstat -min -prefix rm.epi.min.r01 rm.epi.1.r01+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTstat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: KR Hammett & RW Cox
++ Output dataset ./rm.epi.min.r01+orig.BRIK
end
3dvolreg -verbose -zpad 1 -base vr_base_min_outlier+orig -1Dfile dfile.r02.1D -prefix rm.epi.volreg.r02 -Fourier -1Dmatrix_save mat.r02.vr.aff12.1D pb01.sub-TAG022.r02.despike+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dvolreg: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./vr_base_min_outlier+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./vr_base_min_outlier+orig.BRIK is 5.724164 degrees from plumb.
++ Reading in base dataset ./vr_base_min_outlier+orig.BRIK
++ Oblique dataset:./pb01.sub-TAG022.r02.despike+orig.BRIK is 5.724164 degrees from plumb.
++ Reading input dataset ./pb01.sub-TAG022.r02.despike+orig.BRIK
++ Edging: x=4 y=4 z=3
++ Creating mask for -maxdisp
 + Automask has 86928 voxels
 + 9845 voxels left in -maxdisp mask after erosion
++ Initializing alignment base
++ Starting final pass on 390 sub-bricks: 0..1..2..3..4..5..6..7..8..9..10..11..12..13..14..15..16..17..18..19..20..21..22..23..24..25..26..27..28..29..30..31..32..33..34..35..36..37..38..39..40..41..42..43..44..45..46..47..48..49..50..51..52..53..54..55..56..57..58..59..60..61..62..63..64..65..66..67..68..69..70..71..72..73..74..75..76..77..78..79..80..81..82..83..84..85..86..87..88..89..90..91..92..93..94..95..96..97..98..99..100..101..102..103..104..105..106..107..108..109..110..111..112..113..114..115..116..117..118..119..120..121..122..123..124..125..126..127..128..129..130..131..132..133..134..135..136..137..138..139..140..141..142..143..144..145..146..147..148..149..150..151..152..153..154..155..156..157..158..159..160..161..162..163..164..165..166..167..168..169..170..171..172..173..174..175..176..177..178..179..180..181..182..183..184..185..186..187..188..189..190..191..192..193..194..195..196..197..198..199..200..201..202..203..204..205..206..207..208..209..210..211..212..213..214..215..216..217..218..219..220..221..222..223..224..225..226..227..228..229..230..231..232..233..234..235..236..237..238..239..240..241..242..243..244..245..246..247..248..249..250..251..252..253..254..255..256..257..258..259..260..261..262..263..264..265..266..267..268..269..270..271..272..273..274..275..276..277..278..279..280..281..282..283..284..285..286..287..288..289..290..291..292..293..294..295..296..297..298..299..300..301..302..303..304..305..306..307..308..309..310..311..312..313..314..315..316..317..318..319..320..321..322..323..324..325..326..327..328..329..330..331..332..333..334..335..336..337..338..339..340..341..342..343..344..345..346..347..348..349..350..351..352..353..354..355..356..357..358..359..360..361..362..363..364..365..366..367..368..369..370..371..372..373..374..375..376..377..378..379..380..381..382..383..384..385..386..387..388..389..
++ CPU time for realignment=0 s  [=0 s/sub-brick]
++ Min : roll=-0.410  pitch=-0.228  yaw=-1.101  dS=-1.023  dL=-0.299  dP=-0.179
++ Mean: roll=-0.071  pitch=+0.090  yaw=+0.093  dS=-0.201  dL=-0.072  dP=+0.058
++ Max : roll=+0.599  pitch=+0.444  yaw=+0.744  dS=+0.419  dL=+0.349  dP=+0.326
++ Max displacements (mm) for each sub-brick:
 2.55(0.00) 2.75(0.46) 2.52(0.36) 2.50(0.17) 2.58(0.31) 2.57(0.09) 2.34(0.37) 2.48(0.33) 2.39(0.12) 2.30(0.20) 2.49(0.34) 2.41(0.11) 2.18(0.41) 2.31(0.31) 2.28(0.10) 2.01(0.45) 2.17(0.34) 2.17(0.23) 1.81(0.56) 1.80(0.18) 1.86(0.33) 1.44(0.53) 1.31(0.15) 1.58(0.41) 1.52(0.23) 1.40(0.31) 1.59(0.42) 1.67(0.14) 1.39(0.53) 1.44(0.15) 1.66(0.35) 1.57(0.31) 1.63(0.12) 2.08(0.64) 1.76(0.45) 1.64(0.25) 1.87(0.43) 1.55(0.43) 1.44(0.25) 1.75(0.46) 1.52(0.27) 1.40(0.28) 1.56(0.34) 1.45(0.12) 1.29(0.36) 1.44(0.23) 1.55(0.24) 1.30(0.41) 1.27(0.11) 1.61(0.55) 1.45(0.24) 1.08(0.52) 1.27(0.45) 1.15(0.15) 0.94(0.41) 1.01(0.42) 1.35(0.59) 0.87(0.65) 0.81(0.15) 1.46(0.82) 1.22(0.24) 0.85(0.57) 0.97(0.20) 1.79(0.87) 1.26(0.76) 1.27(0.18) 1.97(0.89) 1.47(0.65) 1.21(0.35) 1.68(0.80) 1.05(0.71) 1.06(0.43) 1.63(0.60) 1.00(0.68) 0.89(0.29) 1.43(0.66) 0.98(0.52) 1.16(0.23) 1.06(0.18) 0.64(0.71) 0.68(0.27) 1.32(0.69) 0.75(0.59) 0.59(0.22) 1.03(0.64) 0.45(0.64) 0.30(0.65) 0.83(0.65) 0.98(0.36) 0.25(0.81) 0.24(0.27) 0.44(0.31) 0.11(0.49) 0.14(0.09) 0.74(0.73) 0.32(0.45) 0.11(0.34) 0.51(0.60) 0.45(0.20) 0.05(0.45) 0.00(0.05) 0.74(0.74) 0.94(0.41) 0.40(0.69) 0.24(0.33) 0.54(0.40) 0.32(0.40) 0.31(0.26) 0.31(0.35) 0.46(0.48) 0.37(0.14) 0.32(0.21) 0.43(0.21) 0.43(0.04) 0.33(0.52) 0.26(0.09) 0.39(0.41) 0.36(0.06) 0.38(0.43) 0.22(0.22) 0.60(0.61) 0.25(0.51) 0.25(0.12) 0.81(0.68) 0.31(0.60) 0.33(0.07) 0.90(0.67) 0.57(0.48) 0.40(0.32) 0.52(0.38) 0.47(0.09) 0.41(0.26) 0.47(0.25) 0.65(0.24) 0.42(0.41) 0.38(0.10) 0.68(0.55) 0.69(0.15) 0.46(0.56) 0.41(0.29) 0.62(0.31) 0.43(0.49) 0.41(0.08) 0.68(0.60) 0.88(0.37) 0.57(0.61) 0.73(0.38) 1.16(0.53) 0.82(0.61) 1.03(0.42) 1.07(0.11) 0.71(0.59) 0.63(0.22) 1.48(0.99) 0.94(0.67) 0.80(0.27) 1.01(0.45) 1.01(0.34) 0.76(0.61) 0.72(0.27) 1.02(0.49) 0.80(0.52) 0.78(0.13) 1.02(0.56) 0.83(0.33) 0.76(0.33) 0.77(0.27) 1.04(0.46) 0.84(0.41) 0.80(0.30) 0.75(0.17) 0.80(0.34) 0.73(0.32) 0.78(0.23) 0.96(0.53) 1.21(0.32) 0.87(0.78) 0.82(0.22) 0.96(0.41) 0.79(0.42) 0.79(0.14) 1.05(0.47) 0.83(0.51) 0.85(0.05) 1.29(0.66) 1.01(0.41) 0.87(0.27) 0.96(0.51) 0.91(0.28) 0.87(0.38) 0.86(0.42) 1.21(0.58) 0.88(0.63) 0.82(0.20) 0.83(0.21) 0.82(0.48) 0.84(0.06) 0.83(0.47) 0.76(0.10) 0.79(0.49) 0.77(0.10) 0.98(0.55) 0.83(0.44) 0.82(0.23) 1.00(0.59) 0.98(0.16) 0.93(0.61) 0.95(0.53) 1.14(0.34) 0.85(0.58) 0.88(0.24) 1.22(0.53) 0.98(0.69) 1.00(0.31) 1.06(0.90) 1.24(0.25) 0.93(0.56) 0.93(0.05) 0.99(0.40) 1.16(0.29) 0.96(0.74) 0.93(0.25) 1.28(0.62) 1.04(0.60) 0.93(0.38) 0.88(0.51) 1.04(0.27) 0.97(0.36) 0.95(0.30) 0.95(0.16) 1.21(0.52) 1.18(0.21) 1.05(0.41) 1.01(0.37) 1.11(0.36) 0.95(0.66) 0.89(0.21) 0.72(0.37) 0.82(0.26) 0.85(0.22) 0.83(0.14) 0.95(0.41) 0.86(0.37) 0.88(0.37) 0.83(0.39) 0.86(0.31) 0.83(0.53) 0.82(0.05) 0.82(0.29) 0.87(0.10) 0.89(0.45) 0.87(0.26) 0.95(0.42) 0.85(0.40) 0.85(0.08) 0.94(0.44) 0.88(0.30) 0.87(0.23) 0.95(0.44) 0.94(0.09) 0.89(0.34) 1.10(0.53) 1.29(0.26) 1.06(0.54) 1.24(0.44) 1.11(0.23) 1.00(0.32) 1.10(0.43) 1.04(0.14) 1.20(0.29) 1.05(0.27) 0.95(0.39) 1.07(0.49) 1.31(0.47) 0.90(0.65) 0.91(0.09) 0.94(0.46) 1.17(0.65) 1.19(0.21) 0.99(0.51) 1.26(0.49) 1.03(0.65) 1.00(0.15) 0.97(0.40) 1.01(0.09) 1.02(0.44) 0.98(0.22) 1.12(0.51) 0.98(0.41) 0.95(0.27) 1.06(0.50) 1.01(0.24) 0.99(0.30) 1.00(0.46) 0.97(0.12) 0.97(0.34) 0.97(0.40) 1.00(0.15) 0.92(0.32) 0.94(0.13) 0.94(0.36) 0.96(0.08) 0.97(0.45) 0.93(0.40) 1.27(0.52) 1.00(0.66) 0.98(0.14) 1.34(0.55) 1.24(0.39) 1.09(0.46) 1.22(0.44) 1.59(0.50) 1.19(0.64) 1.10(0.25) 1.24(0.64) 1.82(0.70) 1.40(0.69) 1.22(0.20) 1.11(0.47) 1.05(0.09) 1.02(0.39) 0.98(0.16) 1.02(0.39) 0.93(0.34) 0.98(0.19) 0.97(0.40) 0.96(0.06) 0.93(0.44) 0.94(0.20) 1.04(0.42) 0.94(0.37) 0.92(0.16) 0.84(0.57) 0.82(0.22) 0.75(0.48) 0.82(0.41) 0.85(0.09) 0.73(0.51) 0.73(0.17) 0.84(0.31) 0.75(0.37) 0.82(0.08) 0.92(0.53) 0.77(0.28) 0.79(0.36) 1.03(0.59) 0.96(0.18) 0.86(0.43) 0.95(0.45) 0.97(0.08) 0.85(0.42) 0.93(0.39) 0.87(0.21) 0.86(0.32) 0.87(0.54) 0.90(0.20) 1.20(0.97) 1.01(0.40) 1.11(0.48) 1.01(0.34) 0.97(0.31) 1.31(0.73) 1.33(0.14) 1.07(0.64) 1.14(0.43) 1.29(0.27) 1.12(0.67) 1.06(0.22) 1.21(0.41) 1.08(0.35) 1.06(0.24) 1.04(0.30) 1.09(0.22) 1.05(0.40) 1.06(0.09) 1.23(0.63) 1.11(0.27) 1.01(0.33) 1.20(0.44) 1.79(0.71) 1.25(0.75) 1.13(0.20) 1.11(0.25) 1.11(0.19) 1.03(0.43) 1.02(0.04) 1.02(0.38) 1.05(0.09) 0.99(0.43) 1.00(0.18)
++ Max displacement in automask = 2.75 (mm) at sub-brick 1
++ Max delta displ  in automask = 0.99 (mm) at sub-brick 153
++ Wrote dataset to disk in ./rm.epi.volreg.r02+orig.BRIK
3dcalc -overwrite -a pb01.sub-TAG022.r02.despike+orig -expr 1 -prefix rm.epi.all1
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
[7m*+ WARNING:[0m input 'a' is not used in the expression
++ Output dataset ./rm.epi.all1+orig.BRIK
cat_matvec -ONELINE sub-TAG022_SurfVol_al_junk_mat.aff12.1D -I mat.r02.vr.aff12.1D
3dAllineate -base sub-TAG022_SurfVol_ns+orig -input pb01.sub-TAG022.r02.despike+orig -1Dmatrix_apply mat.r02.warp.aff12.1D -mast_dxyz 2.5 -prefix rm.epi.nomask.r02
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb01.sub-TAG022.r02.despike+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb01.sub-TAG022.r02.despike+orig.BRIK is 5.724164 degrees from plumb.
++ Source dataset: ./pb01.sub-TAG022.r02.despike+orig.HEAD
++ Base dataset:   ./sub-TAG022_SurfVol_ns+orig.HEAD
++ Loading datasets
++ master dataset for output = base
++ changing output grid spacing to 2.5000 mm
++ OpenMP thread count = 1
++ ========== Applying transformation to 390 sub-bricks ==========
volume 0..1..2..3..4..5..6..7..8..9..10..11..12..13..14..15..16..17..18..19..20..21..22..23..24..25..26..27..28..29..30..31..32..33..34..35..36..37..38..39..40..41..42..43..44..45..46..47..48..49..50..51..52..53..54..55..56..57..58..59..60..61..62..63..64..65..66..67..68..69..70..71..72..73..74..75..76..77..78..79..80..81..82..83..84..85..86..87..88..89..90..91..92..93..94..95..96..97..98..99..100..101..102..103..104..105..106..107..108..109..110..111..112..113..114..115..116..117..118..119..120..121..122..123..124..125..126..127..128..129..130..131..132..133..134..135..136..137..138..139..140..141..142..143..144..145..146..147..148..149..150..151..152..153..154..155..156..157..158..159..160..161..162..163..164..165..166..167..168..169..170..171..172..173..174..175..176..177..178..179..180..181..182..183..184..185..186..187..188..189..190..191..192..193..194..195..196..197..198..199..200..201..202..203..204..205..206..207..208..209..210..211..212..213..214..215..216..217..218..219..220..221..222..223..224..225..226..227..228..229..230..231..232..233..234..235..236..237..238..239..240..241..242..243..244..245..246..247..248..249..250..251..252..253..254..255..256..257..258..259..260..261..262..263..264..265..266..267..268..269..270..271..272..273..274..275..276..277..278..279..280..281..282..283..284..285..286..287..288..289..290..291..292..293..294..295..296..297..298..299..300..301..302..303..304..305..306..307..308..309..310..311..312..313..314..315..316..317..318..319..320..321..322..323..324..325..326..327..328..329..330..331..332..333..334..335..336..337..338..339..340..341..342..343..344..345..346..347..348..349..350..351..352..353..354..355..356..357..358..359..360..361..362..363..364..365..366..367..368..369..370..371..372..373..374..375..376..377..378..379..380..381..382..383..384..385..386..387..388..389
++ Output dataset ./rm.epi.nomask.r02+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 53.6
++ ###########################################################
3dAllineate -base sub-TAG022_SurfVol_ns+orig -input rm.epi.all1+orig -1Dmatrix_apply mat.r02.warp.aff12.1D -mast_dxyz 2.5 -final NN -quiet -prefix rm.epi.1.r02
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./rm.epi.all1+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./rm.epi.all1+orig.BRIK is 5.724164 degrees from plumb.
++ Output dataset ./rm.epi.1.r02+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 43.5
3dTstat -min -prefix rm.epi.min.r02 rm.epi.1.r02+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTstat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: KR Hammett & RW Cox
++ Output dataset ./rm.epi.min.r02+orig.BRIK
end
cat dfile.r01.1D dfile.r02.1D
3dMean -datum short -prefix rm.epi.mean rm.epi.min.r01+orig.HEAD rm.epi.min.r02+orig.HEAD
++ 3dMean: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
3dcalc -a rm.epi.mean+orig -expr step(a-0.999) -prefix mask_epi_extents
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Output dataset ./mask_epi_extents+orig.BRIK
foreach run ( 01 02 )
3dcalc -a rm.epi.nomask.r01+orig -b mask_epi_extents+orig -expr a*b -prefix pb02.sub-TAG022.r01.volreg
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Output dataset ./pb02.sub-TAG022.r01.volreg+orig.BRIK
end
3dcalc -a rm.epi.nomask.r02+orig -b mask_epi_extents+orig -expr a*b -prefix pb02.sub-TAG022.r02.volreg
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Output dataset ./pb02.sub-TAG022.r02.volreg+orig.BRIK
end
cat_matvec -ONELINE sub-TAG022_SurfVol_al_junk_mat.aff12.1D -I
3dAllineate -base sub-TAG022_SurfVol_ns+orig -input vr_base_min_outlier+orig -1Dmatrix_apply mat.basewarp.aff12.1D -mast_dxyz 2.5 -prefix final_epi_vr_base_min_outlier
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./vr_base_min_outlier+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./vr_base_min_outlier+orig.BRIK is 5.724164 degrees from plumb.
++ Source dataset: ./vr_base_min_outlier+orig.HEAD
++ Base dataset:   ./sub-TAG022_SurfVol_ns+orig.HEAD
++ Loading datasets
++ master dataset for output = base
++ changing output grid spacing to 2.5000 mm
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ Output dataset ./final_epi_vr_base_min_outlier+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 0.4
++ ###########################################################
3dcopy sub-TAG022_SurfVol_ns+orig anat_final.sub-TAG022
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
tee out.allcostX.txt
3dAllineate -base final_epi_vr_base_min_outlier+orig -allcostX -input anat_final.sub-TAG022+orig
3dmask_tool -input copy_af_FSvent+orig -dilate_input -1 -prefix copy_af_FSvent_erode
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ no -frac option: defaulting to -union
++ processing 1 input datasets...
++ padding all datasets by 0 (for dilations)
++ frac 0 over 1 volumes gives min count 0
++ voxel limits: 0 clipped, 12292 survived, 16764924 were zero
++ writing result copy_af_FSvent_erode...
++ Output dataset ./copy_af_FSvent_erode+orig.BRIK
3dmask_tool -input copy_af_FSWe+orig -dilate_input -1 -prefix copy_af_FSWe_erode
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ no -frac option: defaulting to -union
++ processing 1 input datasets...
++ padding all datasets by 0 (for dilations)
++ frac 0 over 1 volumes gives min count 0
++ voxel limits: 0 clipped, 196256 survived, 16580960 were zero
++ writing result copy_af_FSWe_erode...
++ Output dataset ./copy_af_FSWe_erode+orig.BRIK
3dAllineate -source copy_af_aeseg+orig -master pb02.sub-TAG022.r01.volreg+orig -final NN -1Dparam_apply 1D: 12@0' -prefix follow_ROI_aeseg
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
++ Source dataset: ./copy_af_aeseg+orig.HEAD
++ Base dataset:   (not given)
++ Loading datasets
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ Output dataset ./follow_ROI_aeseg+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 0.9
++ ###########################################################
3dAllineate -source copy_af_FSvent_erode+orig -master pb02.sub-TAG022.r01.volreg+orig -final NN -1Dparam_apply 1D: 12@0' -prefix follow_ROI_FSvent
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
++ Source dataset: ./copy_af_FSvent_erode+orig.HEAD
++ Base dataset:   (not given)
++ Loading datasets
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ Output dataset ./follow_ROI_FSvent+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 0.6
++ ###########################################################
3dAllineate -source copy_af_FSWe_erode+orig -master pb02.sub-TAG022.r01.volreg+orig -final NN -1Dparam_apply 1D: 12@0' -prefix follow_ROI_FSWe
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
++ Source dataset: ./copy_af_FSWe_erode+orig.HEAD
++ Base dataset:   (not given)
++ Loading datasets
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ Output dataset ./follow_ROI_FSWe+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 0.6
++ ###########################################################
foreach run ( 01 02 )
3dmerge -1blur_fwhm 2 -doall -prefix pb03.sub-TAG022.r01.blur pb02.sub-TAG022.r01.volreg+orig
++ 3dmerge: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ default -1dindex = 0
++ default -1tindex = 1
-- Wrote edited dataset: ./pb03.sub-TAG022.r01.blur+orig.BRIK
end
3dmerge -1blur_fwhm 2 -doall -prefix pb03.sub-TAG022.r02.blur pb02.sub-TAG022.r02.volreg+orig
++ 3dmerge: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ default -1dindex = 0
++ default -1tindex = 1
-- Wrote edited dataset: ./pb03.sub-TAG022.r02.blur+orig.BRIK
end
foreach run ( 01 02 )
3dAutomask -prefix rm.mask_r01 pb03.sub-TAG022.r01.blur+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAutomask: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Emperor Zhark
++ Loading dataset pb03.sub-TAG022.r01.blur+orig
++ Forming automask
 + Fixed clip level = 2580.855225
 + Used gradual clip level = 2473.378906 .. 2686.555176
 + Number voxels above clip level = 85148
 + Clustering voxels ...
 + Largest cluster has 84373 voxels
 + Clustering voxels ...
 + Largest cluster has 84082 voxels
 + Filled   382 voxels in small holes; now have 84464 voxels
 + Filled   900 voxels in large holes; now have 85364 voxels
 + Clustering voxels ...
 + Largest cluster has 85363 voxels
 + Clustering non-brain voxels ...
 + Clustering voxels ...
 + Largest cluster has 975845 voxels
 + Mask now has 85363 voxels
++ 85363 voxels in the mask [out of 1061208: 8.04%]
++ first  25 x-planes are zero [from R]
++ last   25 x-planes are zero [from L]
++ first  10 y-planes are zero [from S]
++ last   37 y-planes are zero [from I]
++ first  14 z-planes are zero [from P]
++ last   18 z-planes are zero [from A]
++ Output dataset ./rm.mask_r01+orig.BRIK
++ CPU time = 0.000000 sec
end
3dAutomask -prefix rm.mask_r02 pb03.sub-TAG022.r02.blur+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAutomask: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Emperor Zhark
++ Loading dataset pb03.sub-TAG022.r02.blur+orig
++ Forming automask
 + Fixed clip level = 2576.974365
 + Used gradual clip level = 2471.908447 .. 2668.296875
 + Number voxels above clip level = 85206
 + Clustering voxels ...
 + Largest cluster has 84557 voxels
 + Clustering voxels ...
 + Largest cluster has 84265 voxels
 + Filled   346 voxels in small holes; now have 84611 voxels
 + Filled   934 voxels in large holes; now have 85545 voxels
 + Clustering voxels ...
 + Largest cluster has 85544 voxels
 + Clustering non-brain voxels ...
 + Clustering voxels ...
 + Largest cluster has 975664 voxels
 + Mask now has 85544 voxels
++ 85544 voxels in the mask [out of 1061208: 8.06%]
++ first  25 x-planes are zero [from R]
++ last   25 x-planes are zero [from L]
++ first  10 y-planes are zero [from S]
++ last   37 y-planes are zero [from I]
++ first  14 z-planes are zero [from P]
++ last   18 z-planes are zero [from A]
++ Output dataset ./rm.mask_r02+orig.BRIK
++ CPU time = 0.000000 sec
end
3dmask_tool -inputs rm.mask_r01+orig.HEAD rm.mask_r02+orig.HEAD -union -prefix full_mask.sub-TAG022
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ processing 2 input datasets...
++ padding all datasets by 0 (for dilations)
++ frac 0 over 2 volumes gives min count 0
++ voxel limits: 0 clipped, 85861 survived, 975347 were zero
++ writing result full_mask.sub-TAG022...
++ Output dataset ./full_mask.sub-TAG022+orig.BRIK
3dresample -master full_mask.sub-TAG022+orig -input sub-TAG022_SurfVol_ns+orig -prefix rm.resam.anat
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
3dmask_tool -dilate_input 5 -5 -fill_holes -input rm.resam.anat+orig -prefix mask_anat.sub-TAG022
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ no -frac option: defaulting to -union
++ processing 1 input datasets...
++ padding all datasets by 5 (for dilations)
++ frac 0 over 1 volumes gives min count 0
++ voxel limits: 0 clipped, 87251 survived, 973957 were zero
++ filled 0 holes (0 voxels)
++ writing result mask_anat.sub-TAG022...
++ Output dataset ./mask_anat.sub-TAG022+orig.BRIK
3dmask_tool -input full_mask.sub-TAG022+orig mask_anat.sub-TAG022+orig -inter -prefix mask_epi_anat.sub-TAG022
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ processing 2 input datasets...
++ padding all datasets by 0 (for dilations)
++ frac 1 over 2 volumes gives min count 2
++ voxel limits: 11276 clipped, 80918 survived, 969014 were zero
++ writing result mask_epi_anat.sub-TAG022...
++ Output dataset ./mask_epi_anat.sub-TAG022+orig.BRIK
tee out.mask_ae_overlap.txt
3dABoverlap -no_automask full_mask.sub-TAG022+orig mask_anat.sub-TAG022+orig
tee out.mask_ae_dice.txt
3ddot -dodice full_mask.sub-TAG022+orig mask_anat.sub-TAG022+orig
foreach run ( 01 02 )
3dTstat -prefix rm.mean_r01 pb03.sub-TAG022.r01.blur+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTstat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: KR Hammett & RW Cox
++ Output dataset ./rm.mean_r01+orig.BRIK
3dcalc -a pb03.sub-TAG022.r01.blur+orig -b rm.mean_r01+orig -c full_mask.sub-TAG022+orig -expr c * min(200, a/b*100)*step(a)*step(b) -prefix pb04.sub-TAG022.r01.scale
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Output dataset ./pb04.sub-TAG022.r01.scale+orig.BRIK
end
3dTstat -prefix rm.mean_r02 pb03.sub-TAG022.r02.blur+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTstat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: KR Hammett & RW Cox
++ Output dataset ./rm.mean_r02+orig.BRIK
3dcalc -a pb03.sub-TAG022.r02.blur+orig -b rm.mean_r02+orig -c full_mask.sub-TAG022+orig -expr c * min(200, a/b*100)*step(a)*step(b) -prefix pb04.sub-TAG022.r02.scale
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Output dataset ./pb04.sub-TAG022.r02.scale+orig.BRIK
end
1d_tool.py -infile dfile_rall.1D -set_nruns 2 -demean -write motion_demean.1D
1d_tool.py -infile dfile_rall.1D -set_nruns 2 -derivative -demean -write motion_deriv.1D
1d_tool.py -infile dfile_rall.1D -set_nruns 2 -show_censor_count -censor_prev_TR -censor_motion 0.2 motion_sub-TAG022
1deval -a motion_sub-TAG022_censor.1D -b outcount_sub-TAG022_censor.1D -expr a*b
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
foreach index ( `count -digits 1 1 $#runs` )
count -digits 1 1 2
set nt = 390
set run = 01
1dBport -nodata 390 0.78 -band 0.009 0.2 -invert -nozero
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Block length: 390
 + Frequency indexes: blocklen=390 :: 1 2 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195
1d_tool.py -infile rm.bpass.1D -pad_into_many_runs 01 2 -set_run_lengths 390 390 -write bpass.r01.1D
end
set nt = 390
set run = 02
1dBport -nodata 390 0.78 -band 0.009 0.2 -invert -nozero
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Block length: 390
 + Frequency indexes: blocklen=390 :: 1 2 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195
1d_tool.py -infile rm.bpass.1D -pad_into_many_runs 02 2 -set_run_lengths 390 390 -write bpass.r02.1D
end
1dcat bpass.r01.1D bpass.r02.1D
set ktrs = `1d_tool.py -infile censor_${subj}_combined_2.1D                
                       -show_trs_uncensored encoded`
1d_tool.py -infile censor_sub-TAG022_combined_2.1D -show_trs_uncensored encoded
foreach run ( 01 02 )
1d_tool.py -set_run_lengths 390 390 -select_runs 01 -infile censor_sub-TAG022_combined_2.1D -write rm.censor.r01.1D
3dTproject -polort 3 -prefix rm.det_pcin_r01 -censor rm.censor.r01.1D -cenmode KILL -input pb02.sub-TAG022.r01.volreg+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTproject: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Cox the Algebraic (Linear)
++ input time points = 390 ; censored = 332 ; remaining = 58
++ Setting up regressors
++ 1 Blocks * 4 polynomials -- 4 polort regressors
++ 58 retained time points MINUS 4 regressors ==> 54 D.O.F. left
++ no -mask option ==> processing all 1061208 voxels in dataset
++ Compute pseudo-inverse of fixed orts
++ Loading dataset
[7m*+ WARNING:[0m 3dTproject input data :: 642397 vectors are constant
++ Starting project-orization
++ Convert results to output dataset
++ Output dataset ./rm.det_pcin_r01+orig.BRIK
++ ===== clock time = 1h 55m 57s 527ms
end
1d_tool.py -set_run_lengths 390 390 -select_runs 02 -infile censor_sub-TAG022_combined_2.1D -write rm.censor.r02.1D
3dTproject -polort 3 -prefix rm.det_pcin_r02 -censor rm.censor.r02.1D -cenmode KILL -input pb02.sub-TAG022.r02.volreg+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTproject: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Cox the Algebraic (Linear)
++ input time points = 390 ; censored = 369 ; remaining = 21
++ Setting up regressors
++ 1 Blocks * 4 polynomials -- 4 polort regressors
++ 21 retained time points MINUS 4 regressors ==> 17 D.O.F. left
[7m*+ WARNING:[0m Statistics using data with so few D.O.F. might be meretricious!
++ no -mask option ==> processing all 1061208 voxels in dataset
++ Compute pseudo-inverse of fixed orts
++ Loading dataset
[7m*+ WARNING:[0m 3dTproject input data :: 642397 vectors are constant
++ Starting project-orization
++ Convert results to output dataset
++ Output dataset ./rm.det_pcin_r02+orig.BRIK
++ ===== clock time = 2h 9m 56s 230ms
end
3dTcat -prefix rm.det_pcin_rall rm.det_pcin_r01+orig.HEAD rm.det_pcin_r02+orig.HEAD
++ 3dTcat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ elapsed time = 1.2 s
3dpc -mask follow_ROI_FSvent+orig -pcsave 3 -prefix rm.ROIPC.FSvent rm.det_pcin_rall+orig
++ 3dpc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
1d_tool.py -censor_fill_parent censor_sub-TAG022_combined_2.1D -infile rm.ROIPC.FSvent_vec.1D -write ROIPC.FSvent.1D
3dDeconvolve -input pb04.sub-TAG022.r01.scale+orig.HEAD pb04.sub-TAG022.r02.scale+orig.HEAD -mask full_mask.sub-TAG022+orig -censor censor_sub-TAG022_combined_2.1D -ortvec bandpass_rall.1D bandpass -ortvec ROIPC.FSvent.1D ROIPC.FSvent -polort 3 -num_stimts 12 -stim_file 1 motion_demean.1D[0] -stim_base 1 -stim_label 1 roll_01 -stim_file 2 motion_demean.1D[1] -stim_base 2 -stim_label 2 pitch_01 -stim_file 3 motion_demean.1D[2] -stim_base 3 -stim_label 3 yaw_01 -stim_file 4 motion_demean.1D[3] -stim_base 4 -stim_label 4 dS_01 -stim_file 5 motion_demean.1D[4] -stim_base 5 -stim_label 5 dL_01 -stim_file 6 motion_demean.1D[5] -stim_base 6 -stim_label 6 dP_01 -stim_file 7 motion_deriv.1D[0] -stim_base 7 -stim_label 7 roll_02 -stim_file 8 motion_deriv.1D[1] -stim_base 8 -stim_label 8 pitch_02 -stim_file 9 motion_deriv.1D[2] -stim_base 9 -stim_label 9 yaw_02 -stim_file 10 motion_deriv.1D[3] -stim_base 10 -stim_label 10 dS_02 -stim_file 11 motion_deriv.1D[4] -stim_base 11 -stim_label 11 dL_02 -stim_file 12 motion_deriv.1D[5] -stim_base 12 -stim_label 12 dP_02 -fout -tout -x1D X.xmat.1D -xjpeg X.jpg -x1D_uncensored X.nocensor.xmat.1D -fitts fitts.sub-TAG022 -errts errts.sub-TAG022 -x1D_stop -bucket stats.sub-TAG022
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dDeconvolve extending num_stimts from 12 to 557 due to -ortvec
++ 3dDeconvolve: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: B. Douglas Ward, et al.
++ Auto-catenated input datasets treated as multiple imaging runs
++ Auto-catenated datasets start at:  0 390
++ Skipping check for initial transients
++ Input polort=3; Longest run=304.2 s; Recommended minimum polort=3 ++ OK ++
++ Number of time points: 780 (before censor) ; 79 (after)
 + Number of parameters:  565 [565 baseline ; 0 signal]
[7m** ERROR:[0m  *** Censoring has made regression impossible :( ***
[7m** FATAL ERROR:[0m 3dDeconvolve dies: Insufficient data (79) for estimating 565 parameters
** Program compile date = Jul  6 2018
slurmstepd: error: Detected 1 oom-kill event(s) in step 3129512.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.
