echo auto-generated by afni_proc.py, Tue Jan 22 09:48:11 2019
echo (version 6.16, July 5, 2018)
echo execution started: `date`
date
afni -ver
afni_history -check_date 3 May 2018
if ( 0 ) then
if ( 0 > 0 ) then
set subj = sub-TAG089
endif
set output_dir = sub-TAG089.results
if ( -d sub-TAG089.results ) then
set runs = ( `count -digits 2 1 2` )
count -digits 2 1 2
mkdir sub-TAG089.results
mkdir sub-TAG089.results/stimuli
3dcopy /projects/dsnlab/shared/tag/bids_data/derivatives/freesurfer/sub-TAG089/SUMA/sub-TAG089_SurfVol.nii.gz sub-TAG089.results/sub-TAG089_SurfVol
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dcopy /projects/dsnlab/shared/tag/bids_data/derivatives/freesurfer/sub-TAG089/SUMA/aparc.a2009s+aseg_rank.nii.gz sub-TAG089.results/copy_af_aaseg
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dcopy /projects/dsnlab/shared/tag/bids_data/derivatives/freesurfer/sub-TAG089/SUMA/aparc.a2009s+aseg_rank.nii.gz sub-TAG089.results/copy_af_aeseg
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dcopy /projects/dsnlab/shared/tag/bids_data/derivatives/freesurfer/sub-TAG089/SUMA/sub-TAG089_vent.nii.gz sub-TAG089.results/copy_af_FSvent
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dcopy /projects/dsnlab/shared/tag/bids_data/derivatives/freesurfer/sub-TAG089/SUMA/sub-TAG089_WM.nii.gz sub-TAG089.results/copy_af_FSWe
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
3dTcat -prefix sub-TAG089.results/pb00.sub-TAG089.r01.tcat /projects/dsnlab/shared/tag/bids_data/sub-TAG089/ses-wave2/func/sub-TAG089_ses-wave2_task-rest_run-01_bold.nii.gz[5..$]
++ 3dTcat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ elapsed time = 7.0 s
3dTcat -prefix sub-TAG089.results/pb00.sub-TAG089.r02.tcat /projects/dsnlab/shared/tag/bids_data/sub-TAG089/ses-wave2/func/sub-TAG089_ses-wave2_task-rest_run-02_bold.nii.gz[5..$]
++ 3dTcat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ elapsed time = 6.2 s
set tr_counts = ( 390 390 )
cd sub-TAG089.results
touch out.pre_ss_warn.txt
foreach run ( 01 02 )
3dToutcount -automask -fraction -polort 3 -legendre pb00.sub-TAG089.r01.tcat+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dToutcount: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-TAG089.r01.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-TAG089.r01.tcat+orig.BRIK is 8.709736 degrees from plumb.
++ 69715 voxels passed mask/clip
1deval -a outcount.r01.1D -expr 1-step(a-0.1)
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
1deval -a outcount.r01.1D{0} -expr step(a-0.4)
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
end
3dToutcount -automask -fraction -polort 3 -legendre pb00.sub-TAG089.r02.tcat+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dToutcount: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-TAG089.r02.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-TAG089.r02.tcat+orig.BRIK is 8.709736 degrees from plumb.
++ 70783 voxels passed mask/clip
1deval -a outcount.r02.1D -expr 1-step(a-0.1)
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
1deval -a outcount.r02.1D{0} -expr step(a-0.4)
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
end
cat outcount.r01.1D outcount.r02.1D
cat rm.out.cen.r01.1D rm.out.cen.r02.1D
set minindex = `3dTstat -argmin -prefix - outcount_rall.1D\'`
3dTstat -argmin -prefix - outcount_rall.1D'
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTstat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: KR Hammett & RW Cox
[7m*+ WARNING:[0m Input dataset is not 3D+time; assuming TR=1.0
set ovals = ( `1d_tool.py -set_run_lengths $tr_counts                       
                          -index_to_run_tr $minindex` )
1d_tool.py -set_run_lengths 390 390 -index_to_run_tr 15
set minoutrun = 01
set minouttr = 15
tee out.min_outlier.txt
echo min outlier: run 01, TR 15
foreach run ( 01 02 )
3dDespike -NEW -nomask -prefix pb01.sub-TAG089.r01.despike pb00.sub-TAG089.r01.tcat+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dDespike: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-TAG089.r01.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-TAG089.r01.tcat+orig.BRIK is 8.709736 degrees from plumb.
++ Input dataset is in short format, but output will be in float format
++ ignoring first 0 time points, using last 390
++ using 390 time points => -corder 13
++ Loading dataset pb00.sub-TAG089.r01.tcat+orig
++ processing all 423360 voxels in dataset
++ Procesing time series with NEW model fit algorithm
++ smash edit thresholds: 3.1 .. 5.0 MADs
 +   [ 3.457% .. 0.072% of normal distribution]
 +   [ 8.839% .. 3.125% of Laplace distribution]
++ start OpenMP thread #0
.....................................................................................................................................................................................
++ Elapsed despike time =  32s 522ms

++ FINAL: 162912750 data points, 6745055 edits [4.140%], 759972 big edits [0.466%]
++ Output dataset ./pb01.sub-TAG089.r01.despike+orig.BRIK
end
3dDespike -NEW -nomask -prefix pb01.sub-TAG089.r02.despike pb00.sub-TAG089.r02.tcat+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dDespike: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb00.sub-TAG089.r02.tcat+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb00.sub-TAG089.r02.tcat+orig.BRIK is 8.709736 degrees from plumb.
++ Input dataset is in short format, but output will be in float format
++ ignoring first 0 time points, using last 390
++ using 390 time points => -corder 13
++ Loading dataset pb00.sub-TAG089.r02.tcat+orig
++ processing all 423360 voxels in dataset
++ Procesing time series with NEW model fit algorithm
++ smash edit thresholds: 3.1 .. 5.0 MADs
 +   [ 3.457% .. 0.072% of normal distribution]
 +   [ 8.839% .. 3.125% of Laplace distribution]
++ start OpenMP thread #0
.....................................................................................................................................................................................
++ Elapsed despike time =  32s 654ms

++ FINAL: 162912750 data points, 10321800 edits [6.336%], 2793445 big edits [1.715%]
++ Output dataset ./pb01.sub-TAG089.r02.despike+orig.BRIK
end
3dbucket -prefix vr_base_min_outlier pb01.sub-TAG089.r01.despike+orig[15]
++ 3dbucket: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
align_epi_anat.py -anat2epi -anat sub-TAG089_SurfVol+orig -save_skullstrip -suffix _al_junk -epi vr_base_min_outlier+orig -epi_base 0 -epi_strip 3dAutomask -giant_move -cost lpc+ZZ -volreg off -tshift off
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
Warning 3dSkullStrip:****************
 Surface self intersecting! trying again:
 smoothing of 84, avoid_vent -1
Warning 3dSkullStrip:****************
 Surface self intersecting! trying again:
 smoothing of 96, avoid_vent -1
Warning 3dSkullStrip:****************
 Surface self intersecting! trying again:
 smoothing of 108, avoid_vent -1
Warning 3dSkullStrip:****************
 Surface self intersecting! trying again:
 smoothing of 120, avoid_vent -1
Warning 3dSkullStrip: Stubborn intersection remaining at smoothing of 120. Ignoring it.++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dWarp: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: RW Cox
++ Output dataset ./__tt_sub-TAG089_SurfVol_ns_ob+orig.BRIK
++ 3dbucket: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAutomask: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Emperor Zhark
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./__tt_vr_base_min_outlier_ts+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./__tt_vr_base_min_outlier_ts+orig.BRIK is 8.709736 degrees from plumb.
++ Loading dataset ./__tt_vr_base_min_outlier_ts+orig
++ Forming automask
 + Fixed clip level = 2064.812012
 + Used gradual clip level = 1834.041626 .. 2157.774902
 + Number voxels above clip level = 72725
 + Clustering voxels ...
 + Largest cluster has 70121 voxels
 + Clustering voxels ...
 + Largest cluster has 68716 voxels
 + Filled   793 voxels in small holes; now have 69509 voxels
 + Filled     4 voxels in large holes; now have 69513 voxels
 + Clustering voxels ...
 + Largest cluster has 69511 voxels
 + Clustering non-brain voxels ...
 + Clustering voxels ...
 + Largest cluster has 353849 voxels
 + Mask now has 69511 voxels
++ 69511 voxels in the mask [out of 423360: 16.42%]
++ first  17 x-planes are zero [from R]
++ last   17 x-planes are zero [from L]
++ first  10 y-planes are zero [from P]
++ last   11 y-planes are zero [from A]
++ first   0 z-planes are zero [from I]
++ last    6 z-planes are zero [from S]
++ applying mask to original data
++ Writing masked data
++ Output dataset ./__tt_vr_base_min_outlier_ts_ns+orig.BRIK
++ CPU time = 0.000000 sec
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Output dataset ././__tt_vr_base_min_outlier_ts_ns_wt+orig.BRIK
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
++ lpc+ parameters: hel=0.40 mi=0.20 nmi=0.20 crA=0.40 ov=0.40 [to be zeroed at Final iteration]
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./__tt_vr_base_min_outlier_ts_ns_wt+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./__tt_vr_base_min_outlier_ts_ns_wt+orig.BRIK is 8.709736 degrees from plumb.
++ Oblique dataset:./__tt_vr_base_min_outlier_ts_ns+orig.BRIK is 8.709736 degrees from plumb.
++ Source dataset: ./__tt_sub-TAG089_SurfVol_ns_ob+orig.HEAD
++ Base dataset:   ./__tt_vr_base_min_outlier_ts_ns+orig.HEAD
++ Loading datasets
++ 1201088 voxels in -source_automask+2
++ Zero-pad: zbot=4 ztop=0
++ 69511 voxels [15.4%] in weight mask
++ Output dataset ./__tt_sub-TAG089_SurfVol_ns_ob_al_junk_wtal+orig.BRIK
++ Number of points for matching = 69511
++ NOTE: base and source coordinate systems have different handedness
 +       Orientations: base=Left handed (RPI); source=Right handed (RAI)
++ Local correlation: blok type = 'RHDD(9.225)'
++ -lpc+ parameters: hel=0.40 mi=0.20 nmi=0.20 crA=0.40 ov=0.40 [to be zeroed at Final iteration]
++ base center of mass = 41.221 38.517 34.209 (index)
 + source center of mass = 146.475 150.594 174.352 (index)
 + source-target CM = 0.507 -0.901 -4.630 (xyz)
 + center of mass shifts = 0.507 -0.901 -4.630
++ shift param auto-range: -66.1..67.1 -67.5..65.7 -55.2..45.9
 + Range param#4 [z-angle] = -6.000000 .. 6.000000
 + Range param#5 [x-angle] = -6.000000 .. 6.000000
 + Range param#6 [y-angle] = -6.000000 .. 6.000000
 + Range param#1 [x-shift] = -9.492790 .. 10.507210
 + Range param#2 [y-shift] = -10.900574 .. 9.099426
 + Range param#3 [z-shift] = -14.629925 .. 5.370075
 + Range param#4 [z-angle] = -45.000000 .. 45.000000
 + Range param#5 [x-angle] = -45.000000 .. 45.000000
 + Range param#6 [y-angle] = -45.000000 .. 45.000000
 + Range param#1 [x-shift] = -39.492790 .. 40.507210
 + Range param#2 [y-shift] = -40.900574 .. 39.099426
 + Range param#3 [z-shift] = -44.629925 .. 35.370075
 + 12 free parameters
++ Normalized convergence radius = 0.000468
++ changing output grid spacing to 1.0000 mm
++ OpenMP thread count = 1
++ ======= Allineation of 1 sub-bricks using Local Pearson Signed + Others =======
 + source mask has 1201088 [out of 26613216] voxels
 + base mask has 88890 [out of 451584] voxels
++ ========== sub-brick #0 ========== [total CPU to here=0.0 s]
++ *** Coarse pass begins ***
 + * Enter alignment setup routine
 + - copying base image
 + - copying source image
 + - Smoothing base; radius=2.50
 + - Smoothing source; radius=2.50
 + !source mask fill: ubot=23 usiz=54.5
 + - copying weight image
 + - using 69511 points from base image [use_all=2]
 + * Exit alignment setup routine
 + - Search for coarse starting parameters
 +  - histogram: source clip 32.148 .. 134.456; base clip 1423.29 .. 4965.75
 +  - versus source range 0.00251579 .. 126.185; base range 0 .. 6575.91
 + 63320 total points stored in 613 'RHDD(9.55775)' bloks
 + - number of free params = 6
 + - Testing (64+61)*64 params:#oooo+o..-o.-o...+o$-oo.+ + - best 45 costs found:
    0 v= 0.448353:   0.51  -0.90  -4.63   0.00   0.00   0.00  [grid]
    1 v= 0.763695:   4.59   5.33 -12.43   4.32 -22.85  18.95  [rand]
    2 v= 0.767850:  -3.57   5.33 -12.43  -4.32 -22.85 -18.95  [rand]
    3 v= 0.863608: -13.70   8.55  -9.47 -15.99 -13.53 -29.93  [rand]
    4 v= 0.881984: -12.83  12.43 -17.96 -15.00 -30.00 -30.00  [grid]
    5 v= 0.884533:  -3.57  -7.13   3.17  -4.32  22.85 -18.95  [rand]
    6 v= 0.886641:  13.84  12.43 -17.96 -30.00 -15.00 -15.00  [grid]
    7 v= 0.891945:  14.71   8.55   0.21 -15.99 -13.53  29.93  [rand]
    8 v= 0.892537:  27.17  12.43   8.70 -30.00 -15.00  30.00  [grid]
    9 v= 0.909391: -12.83 -14.23   8.70  15.00  15.00 -15.00  [grid]
   10 v= 0.929229:  -3.57  -7.13   3.17   4.32  22.85 -18.95  [rand]
   11 v= 0.943703:   4.59  -7.13   3.17   4.32  22.85  18.95  [rand]
   12 v= 0.961603:  20.00  15.77  -2.03 -30.54 -19.59  20.03  [rand]
   13 v= 0.963036:  13.84 -14.23   8.70 -15.00  15.00  15.00  [grid]
   14 v= 0.972595:  13.84  12.43 -17.96 -30.00 -30.00 -15.00  [grid]
   15 v= 0.973674:   4.59   5.33 -12.43  -4.32 -22.85  18.95  [rand]
   16 v= 0.984382:  14.54  14.82 -19.30 -24.25 -37.55  -4.41  [rand]
   17 v= 0.992689:  14.71   8.55  -9.47  15.99 -13.53  29.93  [rand]
   18 v= 0.993464:  -3.57   5.33 -12.43   4.32 -22.85 -18.95  [rand]
   19 v= 1.004656: -12.83  12.43 -17.96  15.00 -30.00 -15.00  [grid]
   20 v= 1.017553:  13.84  12.43 -17.96 -15.00 -30.00  15.00  [grid]
   21 v= 1.018056:   4.59  -7.13   3.17  -4.32  22.85 -18.95  [rand]
   22 v= 1.027144:  13.84  12.43 -17.96  15.00 -30.00  30.00  [grid]
   23 v= 1.027726: -12.83  12.43 -17.96  30.00 -30.00  15.00  [grid]
   24 v= 1.029523: -12.83  12.43 -17.96 -15.00 -15.00 -30.00  [grid]
   25 v= 1.030736: -12.83 -14.23   8.70  15.00  15.00 -30.00  [grid]
   26 v= 1.032696: -12.83  12.43 -17.96  30.00 -15.00  15.00  [grid]
   27 v= 1.032844:  20.00  15.77  -7.23 -30.54 -19.59  20.03  [rand]
   28 v= 1.043591:   4.59  -7.13   3.17  -4.32  22.85  18.95  [rand]
   29 v= 1.048043: -13.52  14.82 -19.30  24.25 -37.55   4.41  [rand]
   30 v= 1.054006: -13.70   8.55   0.21  15.99 -13.53 -29.93  [rand]
   31 v= 1.054165: -27.68  13.32 -18.11  11.27 -31.24 -23.90  [rand]
   32 v= 1.064017: -26.16  12.43   8.70  30.00 -15.00 -30.00  [grid]
   33 v= 1.073071:  -3.57  -7.13   3.17   4.32  22.85  18.95  [rand]
   34 v= 1.087501: -13.70 -10.35   0.21  15.99  13.53 -29.93  [rand]
   35 v= 1.098166: -26.16  12.43 -17.96  15.00 -30.00 -15.00  [grid]
   36 v= 1.099684:  14.54  14.82 -19.30 -24.25 -37.55   4.41  [rand]
   37 v= 1.113209:  24.71   9.44  -0.11 -27.51 -29.30  27.65  [rand]
   38 v= 1.128130:  13.84 -14.23   8.70 -15.00  15.00  30.00  [grid]
   39 v= 1.129769: -18.98  15.77  -2.03  30.54 -19.59 -20.03  [rand]
   40 v= 1.130460: -12.83 -14.23   8.70  15.00  15.00  15.00  [grid]
   41 v= 1.140340: -18.98  15.77  -7.23  30.54 -19.59 -20.03  [rand]
   42 v= 1.144997:  22.86  15.48 -20.46 -41.11 -22.86  -3.97  [rand]
   43 v= 1.145116: -13.52  14.82 -19.30  24.25 -37.55  -4.41  [rand]
   44 v= 1.170705: -26.16  12.43 -17.96  15.00 -30.00 -30.00  [grid]
*[#8004=0.342521] *[#8013=0.338347] *[#8014=0.328473] *[#8018=0.320481] *[#8019=0.31621] *[#8020=0.307423] *[#8023=0.307098] *[#8027=0.306135] *[#8029=0.303459] *[#8111=0.301862] *[#8114=0.301731] *[#8177=0.295514] *[#8184=0.293827] *[#8650=0.290447] *[#8651=0.284839] *[#9281=0.284763] *[#9282=0.282406] *[#9289=0.280693] *[#9291=0.280272]  + - costs of the above after a little optimization:
    0 v= 0.303459:   0.18  -0.86  -1.27  -0.07   0.97  -0.73  [grid]
    1 v= 0.301731:   0.95  -2.49  -0.61  -1.34   2.28   0.30  [rand]
    2 v= 0.293827:   0.11  -1.40  -1.14  -0.18   1.24  -0.28  [rand]
    3 v= 0.652013: -11.38   4.68  -9.71  -6.63 -12.28 -28.92  [rand]
    4 v= 0.609411: -13.43   0.27  -6.89   4.31  -8.78 -20.45  [grid]
    5 v= 0.298190:  -0.01  -3.70  -0.05   0.21   3.62  -0.73  [rand]
    6 v= 0.738170:   9.76   4.90 -13.67 -27.41 -12.21 -15.89  [grid]
    7 v= 0.643159:  17.20   2.06  -1.99 -12.96  -7.05  19.42  [rand]
    8 v= 0.756896:  30.17   7.34   5.04 -28.29 -13.68  30.39  [grid]
    9 v= 0.585362: -10.26  -5.53  -0.49   6.84   5.47 -15.67  [grid]
   10 v= 0.284839:   0.10  -2.79  -0.41   0.03   2.91  -0.66  [rand]
   11 v= 0.311768:   1.46  -4.19   0.22  -0.66   3.95   0.62  [rand]
   12 v= 0.683171:  22.44   5.16  -4.08 -20.49 -12.72  18.64  [rand]
   13 v= 0.602124:  12.97  -4.52   0.58  -9.87   4.77  11.96  [grid]
   14 v= 0.582454:  11.37   2.11  -8.30 -10.35  -7.07   6.77  [grid]
   15 v= 0.287299:   0.39  -1.44  -0.99  -0.25   1.49  -0.16  [rand]
   16 v= 0.446484:   4.80   1.15  -1.38  -4.01   0.12   1.94  [rand]
   17 v= 0.335554:   1.48   0.06  -1.64  -1.10   0.32   0.45  [rand]
  *18 v= 0.280272:   0.45  -1.92  -0.93  -0.38   1.97  -0.22  [rand]
   19 v= 0.663186: -14.97   5.01 -11.44  11.44 -20.11 -14.45  [grid]
   20 v= 0.582560:   9.37   1.11  -5.82 -14.62  -8.10   1.56  [grid]
   21 v= 0.291965:  -0.31  -1.60  -0.87   0.08   1.94  -0.73  [rand]
   22 v= 0.623544:   5.99  -0.31  -5.70   5.03  -4.28  19.74  [grid]
   23 v= 0.308646:   1.22  -0.70  -1.16  -0.67   1.02   0.17  [grid]
   24 v= 0.369702:  -1.03  -3.40  -1.69   0.19   2.28  -2.39  [grid]
   25 v= 0.611440: -11.27  -5.70   1.25   7.78   7.37 -19.11  [grid]
   26 v= 0.682782: -12.36   1.80  -9.46  14.36  -8.53   4.83  [grid]
   27 v= 0.642434:  16.19   4.39  -7.80 -15.89 -13.76  14.53  [rand]
   28 v= 0.325208:   1.93  -3.62  -0.69  -0.42   2.51   1.17  [rand]
   29 v= 0.577517:  -9.51   1.48  -6.09  11.04  -9.60  -4.71  [rand]
   30 v= 0.640605: -16.70   3.24  -4.67  11.22  -9.97 -21.03  [rand]
   31 v= 0.560255:  -6.47  -0.04  -3.39   9.83  -3.83  -3.81  [rand]
   32 v= 0.755751: -30.75   5.93   1.41  25.07 -12.92 -35.25  [grid]
   33 v= 0.287951:   0.68  -3.03  -0.05  -0.54   3.12  -0.11  [rand]
   34 v= 0.537758:  -7.96  -2.68  -1.23   2.92   2.37  -8.82  [rand]
   35 v= 0.640361: -15.23   3.45  -4.65  15.11  -6.49 -15.21  [grid]
   36 v= 0.576457:  10.21   1.53  -6.33  -6.65  -7.19  10.11  [rand]
   37 v= 0.703321:  25.38   3.57   3.37 -24.87  -5.66  25.13  [rand]
   38 v= 0.618272:  16.37  -2.86  -0.33 -13.08   1.22  15.51  [grid]
   39 v= 0.635026: -17.50   1.90  -5.78  12.25  -9.00 -20.29  [rand]
   40 v= 0.289942:  -0.31  -2.80  -0.52  -0.17   2.44  -0.84  [grid]
   41 v= 0.719701: -21.74   6.51  -8.75  21.24 -19.91 -13.48  [rand]
   42 v= 0.802303:  20.65  11.73 -10.92 -36.28 -17.61  -2.49  [rand]
   43 v= 0.554944:  -8.42  -0.40  -6.56   8.46  -6.48  -4.19  [rand]
   44 v= 0.623229: -14.51  -0.65  -6.24   2.46  -6.41 -23.12  [grid]
 + - save #18 for twobest
 + - skip #10 for twobest: too close to set #18
 + - skip #15 for twobest: too close to set #18
 + - skip #33 for twobest: too close to set #18
 + - skip #40 for twobest: too close to set #18
 + - skip #21 for twobest: too close to set #18
 + - skip # 2 for twobest: too close to set #18
 + - skip # 5 for twobest: too close to set #18
 + - skip # 1 for twobest: too close to set #18
 + - skip # 0 for twobest: too close to set #18
 + - skip #23 for twobest: too close to set #18
 + - skip #11 for twobest: too close to set #18
 + - skip #28 for twobest: too close to set #18
 + - skip #17 for twobest: too close to set #18
 + - skip #24 for twobest: too close to set #18
 + - skip #16 for twobest: too close to set # 1
 + - save #34 for twobest
 + - save #43 for twobest
 + - skip #31 for twobest: too close to set #43
 + - save #36 for twobest
 + - skip #29 for twobest: too close to set #43
 + - skip #14 for twobest: too close to set #36
 + - save #20 for twobest
 + - save # 9 for twobest
 + - save #13 for twobest
 + - save # 4 for twobest
 + - skip #25 for twobest: too close to set # 9
 + - skip #38 for twobest: too close to set #13
 + - skip #44 for twobest: too close to set # 4
 + - save #22 for twobest
 + - save #39 for twobest
 + - save #35 for twobest
 + - skip #30 for twobest: too close to set #39
 + - save #27 for twobest
 + - save # 7 for twobest
 + - save # 3 for twobest
 + - save #19 for twobest
 + - save #26 for twobest
 + - save #12 for twobest
 + - save #37 for twobest
 + - save #41 for twobest
 + - save # 6 for twobest
 + - save #32 for twobest
 + - save # 8 for twobest
 + - Coarse startup search net CPU time = 0.0 s
++ Start refinement #1 on 12 coarse parameter sets
 + * Enter alignment setup routine
 + - Smoothing base; radius=1.94
 + - Smoothing source; radius=1.94
 + !source mask fill: ubot=23 usiz=54.5
 + - retaining old weight image
 + - using 69511 points from base image [use_all=2]
 + * Exit alignment setup routine
 +  - histogram: source clip 32.2074 .. 135.015; base clip 1426.73 .. 5048.3
 +  - versus source range 0.000126786 .. 126.178; base range 0 .. 6588.04
 + 64437 total points stored in 636 'RHDD(9.42766)' bloks
*[#11302=0.279345] *[#11303=0.279344] *[#11305=0.278913] *[#11306=0.278316] *[#11307=0.278238] *[#11310=0.27502] *[#11311=0.274915] *[#11312=0.272848] *[#11315=0.27233] *[#11317=0.271992] *[#11320=0.270884] *[#11322=0.268809] *[#11324=0.267298] *[#11327=0.266302] *[#11328=0.265083] *[#11329=0.264508] *[#11330=0.262755] *[#11335=0.261351] *[#11338=0.260361] *[#11340=0.260272] *[#11341=0.260152] *[#11345=0.259675] *[#11348=0.258457] 
 + - param set #1 has cost=0.258457
 + -- Parameters = 0.7280 -2.9163 -0.2284 -0.3273 2.4831 0.0754 0.9896 1.0166 0.9888 -0.0028 -0.0042 0.0014
 + - param set #2 has cost=0.309143
 + -- Parameters = -0.7617 -2.1889 -0.4358 0.1084 3.3887 -1.4419 0.9883 0.9907 0.9981 0.0084 0.0221 0.0158
 + - param set #3 has cost=0.413158
 + -- Parameters = -1.1873 -0.0537 -2.8438 1.2088 -0.9599 -1.3536 0.9485 0.9811 1.0559 0.0266 0.0060 -0.0518
 + - param set #4 has cost=0.429712
 + -- Parameters = 4.8064 -0.4250 -2.5920 -4.5335 0.3170 3.7102 0.9626 0.9691 1.0323 -0.1013 -0.0650 0.0031
 + - param set #5 has cost=0.311229
 + -- Parameters = 0.5867 -1.2672 -0.1428 0.0331 1.3549 -0.2268 1.0060 0.9855 0.9921 0.0031 0.0057 -0.0103
 + - param set #6 has cost=0.392230
 + -- Parameters = -3.4924 -3.2927 -0.7316 1.3737 2.7735 -3.9728 0.9798 1.0033 1.0106 -0.0030 0.0222 -0.0193
 + - param set #7 has cost=0.403337
 + -- Parameters = 3.2204 -2.1741 2.5851 -1.3143 5.4299 3.1365 0.9722 0.9611 0.9681 0.0087 -0.0197 0.0119
 + - param set #8 has cost=0.541606
 + -- Parameters = -9.0616 -1.0081 -5.0545 4.9430 -8.1516 -11.3170 0.9560 0.9924 0.9924 0.0392 0.0122 0.0171
 + - param set #9 has cost=0.305630
 + -- Parameters = 1.0134 -2.4599 -0.3993 -1.2267 1.4879 -0.9655 0.9765 1.0212 0.9786 -0.0051 0.0228 0.0063
 + - param set #10 has cost=0.560274
 + -- Parameters = -13.3530 1.4899 -5.2807 9.2003 -11.5397 -13.6785 0.9768 0.9588 0.9844 0.0098 -0.0005 0.0110
 + - param set #11 has cost=0.490144
 + -- Parameters = -6.3166 2.8032 1.0074 6.4230 -0.0317 -6.3734 0.9831 1.0025 0.9721 0.0013 0.0472 -0.0206
 + - param set #12 has cost=0.264391
 + -- Parameters = 0.5739 -2.5090 -0.2920 -0.3352 2.1178 -0.1545 0.9970 1.0155 0.9855 -0.0071 -0.0002 0.0023
 + - sorting parameter sets by cost
 + -- scanning for distances from #1
 + --- dist(#2,#1) = 0.0202 
 + --- dist(#3,#1) = 0.122 
 + --- dist(#4,#1) = 0.118 
 + --- dist(#5,#1) = 0.0848 
 + --- dist(#6,#1) = 0.119 
 + --- dist(#7,#1) = 0.151 
 + --- dist(#8,#1) = 0.24 
 + --- dist(#9,#1) = 0.444 
 + --- dist(#10,#1) = 0.231 
 + --- dist(#11,#1) = 0.189 
 + --- dist(#12,#1) = 0.176 
++ Start refinement #2 on 12 coarse parameter sets
 + * Enter alignment setup routine
 + - Smoothing base; radius=1.51
 + - Smoothing source; radius=1.51
 + !source mask fill: ubot=23 usiz=54.5
 + - retaining old weight image
 + - using 69511 points from base image [use_all=2]
 + * Exit alignment setup routine
 +  - histogram: source clip 32.3177 .. 135.451; base clip 1430.14 .. 5134.89
 +  - versus source range 0 .. 126.187; base range 0 .. 6600.96
 + 63530 total points stored in 658 'RHDD(9.3481)' bloks
 + - param set #1 has cost=0.288967
 + -- Parameters = 0.7622 -2.8493 0.0156 -0.2624 2.3407 0.0311 0.9900 1.0188 0.9850 0.0049 -0.0051 -0.0013
 + - param set #2 has cost=0.289005
 + -- Parameters = 0.5319 -3.0605 0.4207 -0.1999 2.8876 -0.1640 0.9874 1.0174 0.9780 0.0008 -0.0013 0.0025
 + - param set #3 has cost=0.287920
 + -- Parameters = 0.3223 -2.5261 0.1618 -0.5105 1.9817 -0.6495 0.9859 1.0185 0.9842 -0.0112 0.0105 -0.0112
 + - param set #4 has cost=0.290034
 + -- Parameters = -0.2510 -3.9616 0.1072 -0.2237 3.2563 -1.1653 0.9830 1.0271 0.9850 0.0076 0.0207 0.0095
 + - param set #5 has cost=0.288608
 + -- Parameters = 0.7729 -2.4921 0.0382 -0.3783 1.7774 -0.0949 0.9910 1.0210 0.9854 0.0011 -0.0001 -0.0172
 + - param set #6 has cost=0.307014
 + -- Parameters = -1.1630 -2.1291 -0.3483 -0.1205 1.5168 -2.3813 0.9811 1.0146 0.9933 0.0024 0.0475 -0.0149
 + - param set #7 has cost=0.310815
 + -- Parameters = 2.3663 -4.9062 0.8153 -0.7159 4.5865 1.7509 0.9978 1.0269 0.9632 -0.0089 -0.0343 0.0351
 + - param set #8 has cost=0.335253
 + -- Parameters = -0.7175 -0.0478 -0.7773 0.1549 0.0474 -1.3494 0.9864 0.9886 1.0077 0.0236 0.0173 -0.0460
 + - param set #9 has cost=0.399573
 + -- Parameters = 4.2034 -2.1855 -0.5628 -2.9844 1.4308 3.3327 0.9704 1.0081 1.0030 -0.0936 -0.0659 -0.0051
 + - param set #10 has cost=0.341901
 + -- Parameters = -1.7904 -1.2220 0.7584 0.4658 1.0665 -2.8577 0.9649 0.9972 0.9775 0.0279 0.0651 -0.0405
 + - param set #11 has cost=0.464256
 + -- Parameters = -1.2953 -3.0215 -0.9233 1.2394 1.4776 -0.0912 0.8723 1.0633 1.0112 0.0367 -0.0285 -0.0105
 + - param set #12 has cost=0.558682
 + -- Parameters = -9.3799 2.5662 -6.9664 6.1284 -12.5286 -10.3823 0.9602 0.9450 1.0048 0.0227 0.0000 0.0158
 + - sorting parameter sets by cost
 + -- scanning for distances from #1
 + --- dist(#2,#1) = 0.0551 
 + --- dist(#3,#1) = 0.0721 
 + --- dist(#4,#1) = 0.0614 
 + --- dist(#5,#1) = 0.0931 
 + --- dist(#6,#1) = 0.166 
 + --- dist(#7,#1) = 0.208 
 + --- dist(#8,#1) = 0.157 
 + --- dist(#9,#1) = 0.246 
 + --- dist(#10,#1) = 0.371 
 + --- dist(#11,#1) = 0.31 
 + --- dist(#12,#1) = 0.2 
++ Start refinement #3 on 12 coarse parameter sets
 + * Enter alignment setup routine
 + - Smoothing base; radius=1.18
 + - Smoothing source; radius=1.18
 + !source mask fill: ubot=23 usiz=54.5
 + - retaining old weight image
 + - using 69511 points from base image [use_all=2]
 + * Exit alignment setup routine
 +  - histogram: source clip 32.4099 .. 135.799; base clip 1431.3 .. 5195.29
 +  - versus source range 0 .. 126.146; base range 0 .. 6606.16
 + 64029 total points stored in 661 'RHDD(9.29965)' bloks
 + - param set #1 has cost=0.293479
 + -- Parameters = 0.3148 -2.5457 0.2355 -0.4553 1.8380 -0.6427 0.9868 1.0204 0.9833 -0.0057 0.0073 -0.0150
 + - param set #2 has cost=0.288902
 + -- Parameters = 0.5478 -2.8368 0.5251 -0.4102 1.9945 -0.2186 0.9881 1.0240 0.9756 -0.0040 -0.0009 -0.0126
 + - param set #3 has cost=0.287153
 + -- Parameters = 0.7323 -2.8874 0.7325 -0.2341 1.9914 -0.0441 0.9892 1.0278 0.9712 0.0004 -0.0051 -0.0116
 + - param set #4 has cost=0.287412
 + -- Parameters = 0.3424 -3.0178 0.8038 -0.1693 2.2400 -0.4268 0.9885 1.0271 0.9692 0.0026 -0.0002 -0.0075
 + - param set #5 has cost=0.291665
 + -- Parameters = -0.1991 -3.8475 0.5195 -0.2797 2.9384 -1.2400 0.9874 1.0301 0.9738 0.0001 0.0210 0.0057
 + - param set #6 has cost=0.302298
 + -- Parameters = -0.6938 -2.1635 0.4341 -0.1474 1.4547 -1.9231 0.9910 1.0155 0.9800 0.0061 0.0377 -0.0241
 + - param set #7 has cost=0.303706
 + -- Parameters = 1.1759 -4.8797 0.9507 -0.4309 4.1585 0.6084 0.9880 1.0328 0.9640 -0.0078 -0.0297 0.0228
 + - param set #8 has cost=0.310220
 + -- Parameters = -1.0003 -1.2294 0.4503 0.0929 0.4139 -1.7298 0.9873 1.0109 0.9829 0.0163 0.0225 -0.0446
 + - param set #9 has cost=0.311638
 + -- Parameters = -1.6314 -1.6244 1.0776 0.4257 0.5379 -2.7495 0.9932 1.0223 0.9637 0.0245 0.0499 -0.0377
 + - param set #10 has cost=0.334289
 + -- Parameters = 2.5913 -3.3347 0.2642 -1.1076 2.5591 2.1495 0.9827 1.0228 0.9803 -0.0349 -0.0593 0.0072
 + - param set #11 has cost=0.357282
 + -- Parameters = 0.4242 -3.5291 0.4245 0.9177 2.0880 0.4528 0.9587 1.0524 0.9736 0.0528 -0.0301 -0.0010
 + - param set #12 has cost=0.548051
 + -- Parameters = -6.8849 0.0956 -5.9291 4.7924 -10.2453 -8.5202 0.9434 0.9173 1.0194 0.0174 -0.0017 0.0141
 + - sorting parameter sets by cost
 + -- scanning for distances from #1
 + --- dist(#2,#1) = 0.0222 
 + --- dist(#3,#1) = 0.0197 XXX
 + --- dist(#4,#1) = 0.0562 
 + --- dist(#5,#1) = 0.193 
 + --- dist(#6,#1) = 0.155 
 + --- dist(#7,#1) = 0.148 
 + --- dist(#8,#1) = 0.248 
 + --- dist(#9,#1) = 0.244 
 + --- dist(#10,#1) = 0.236 
 + --- dist(#11,#1) = 0.301 
 + - cast out 1 parameter set for being too close to best set
 + - Total coarse refinement net CPU time = 0.0 s; 3502 funcs
++ *** Fine pass begins ***
 + * Enter alignment setup routine
 + - Smoothing base; radius=1.00
 + - Smoothing source; radius=1.00
 + !source mask fill: ubot=23 usiz=54.5
 + - retaining old weight image
 + * Exit alignment setup routine
++ Picking best parameter set out of 12 cases
 +  - histogram: source clip 32.4692 .. 135.968; base clip 1431.3 .. 5195.29
 +  - versus source range 0 .. 126.137; base range 0 .. 6610.94
 + 63570 total points stored in 669 'RHDD(9.27904)' bloks
 + - cost(#1)=0.285932 *
 + -- Parameters = 0.7323 -2.8874 0.7325 -0.2341 1.9914 -0.0441 0.9892 1.0278 0.9712 0.0004 -0.0051 -0.0116
 + - cost(#2)=0.286812  
 + -- Parameters = 0.3424 -3.0178 0.8038 -0.1693 2.2400 -0.4268 0.9885 1.0271 0.9692 0.0026 -0.0002 -0.0075
 + - cost(#3)=0.292100  
 + -- Parameters = -0.1991 -3.8475 0.5195 -0.2797 2.9384 -1.2400 0.9874 1.0301 0.9738 0.0001 0.0210 0.0057
 + - cost(#4)=0.294754  
 + -- Parameters = 0.3148 -2.5457 0.2355 -0.4553 1.8380 -0.6427 0.9868 1.0204 0.9833 -0.0057 0.0073 -0.0150
 + - cost(#5)=0.304049  
 + -- Parameters = -0.6938 -2.1635 0.4341 -0.1474 1.4547 -1.9231 0.9910 1.0155 0.9800 0.0061 0.0377 -0.0241
 + - cost(#6)=0.303696  
 + -- Parameters = 1.1759 -4.8797 0.9507 -0.4309 4.1585 0.6084 0.9880 1.0328 0.9640 -0.0078 -0.0297 0.0228
 + - cost(#7)=0.310682  
 + -- Parameters = -1.0003 -1.2294 0.4503 0.0929 0.4139 -1.7298 0.9873 1.0109 0.9829 0.0163 0.0225 -0.0446
 + - cost(#8)=0.311652  
 + -- Parameters = -1.6314 -1.6244 1.0776 0.4257 0.5379 -2.7495 0.9932 1.0223 0.9637 0.0245 0.0499 -0.0377
 + - cost(#9)=0.335837  
 + -- Parameters = 2.5913 -3.3347 0.2642 -1.1076 2.5591 2.1495 0.9827 1.0228 0.9803 -0.0349 -0.0593 0.0072
 + - cost(#10)=0.356420  
 + -- Parameters = 0.4242 -3.5291 0.4245 0.9177 2.0880 0.4528 0.9587 1.0524 0.9736 0.0528 -0.0301 -0.0010
 + - cost(#11)=0.549558  
 + -- Parameters = -6.8849 0.0956 -5.9291 4.7924 -10.2453 -8.5202 0.9434 0.9173 1.0194 0.0174 -0.0017 0.0141
 + - cost(#12)=0.474910  
 + -- Parameters = 0.5072 -0.9006 -4.6299 0.0000 0.0000 0.0000 1.0000 1.0000 1.0000 0.0000 0.0000 0.0000
 + -num_rtb 99 ==> refine all 12 cases
 + - cost(#1)=0.284605 *
 + -- Parameters = 0.7010 -3.0175 0.8034 -0.2627 2.0769 -0.0399 0.9901 1.0289 0.9707 0.0013 -0.0051 -0.0120
 + - cost(#2)=0.284340 *
 + -- Parameters = 0.4147 -3.1619 1.0154 -0.2876 2.2305 -0.4385 0.9904 1.0294 0.9678 0.0031 0.0039 -0.0103
 + - cost(#3)=0.290566  
 + -- Parameters = -0.1500 -3.7313 0.6662 -0.2930 2.8783 -1.1147 0.9872 1.0291 0.9731 0.0005 0.0196 0.0014
 + - cost(#4)=0.291118  
 + -- Parameters = 0.2750 -2.5819 0.2980 -0.3712 1.7394 -0.5959 0.9868 1.0250 0.9794 -0.0028 0.0088 -0.0151
 + - cost(#5)=0.293536  
 + -- Parameters = -0.5037 -2.2975 0.6297 -0.1510 1.3540 -1.4755 0.9877 1.0240 0.9746 -0.0003 0.0254 -0.0240
 + - cost(#6)=0.295090  
 + -- Parameters = 1.1900 -4.7531 1.0779 -0.6056 3.7970 0.4652 0.9898 1.0356 0.9618 -0.0118 -0.0144 0.0186
 + - cost(#7)=0.298722  
 + -- Parameters = -0.4377 -1.5825 0.7833 0.0479 0.7126 -1.3293 0.9912 1.0199 0.9754 0.0153 0.0280 -0.0403
 + - cost(#8)=0.301651  
 + -- Parameters = -1.1658 -1.9768 1.1775 0.0384 0.9642 -2.2139 0.9922 1.0215 0.9647 0.0141 0.0443 -0.0373
 + - cost(#9)=0.319929  
 + -- Parameters = 2.3551 -3.7169 0.6236 -1.1017 2.7062 1.8109 0.9767 1.0334 0.9744 -0.0310 -0.0492 0.0020
 + - cost(#10)=0.296074  
 + -- Parameters = 0.8392 -3.4629 0.9733 0.0485 2.3141 0.3913 0.9857 1.0373 0.9641 0.0198 -0.0209 -0.0045
 + - cost(#11)=0.434779  
 + -- Parameters = 0.9886 1.6422 -1.1162 -2.5684 -4.2214 -0.4962 0.9307 1.0529 1.0045 0.0109 -0.0084 -0.1023
 + - cost(#12)=0.295352  
 + -- Parameters = 0.6932 -2.4911 0.1812 -0.3107 1.8121 -0.0323 0.9895 1.0220 0.9849 0.0005 -0.0023 -0.0140
 + - case #2 is now the best
 + - Initial  cost = 0.284340
 + - Initial fine Parameters = 0.4147 -3.1619 1.0154 -0.2876 2.2305 -0.4385 0.9904 1.0294 0.9678 0.0031 0.0039 -0.0103
 + - Finalish cost = 0.284097 ; 104 funcs
 +  - Set lpc+ parameters back to pure lpc before Final
 +  - histogram: source clip 32.4768 .. 135.939; base clip 1431.3 .. 5195.29
 +  - versus source range 0 .. 126.137; base range 0 .. 6610.94
*[#16199=-0.269151] *[#16206=-0.272313] *[#16230=-0.275304] *[#16247=-0.278502] *[#16256=-0.279103] *[#16265=-0.279762] *[#16268=-0.279927] *[#16273=-0.280025] *[#16275=-0.280385] *[#16276=-0.280686] *[#16278=-0.28078] *[#16279=-0.280887] *[#16287=-0.281113] *[#16288=-0.281272] *[#16293=-0.281309] *[#16295=-0.281409] *[#16298=-0.281681] *[#16299=-0.281705] *[#16309=-0.281877] *[#16310=-0.281933] *[#16318=-0.282059] *[#16321=-0.2822] *[#16330=-0.282377] *[#16333=-0.282452] *[#16337=-0.282469] *[#16340=-0.282621] *[#16341=-0.28271] *[#16347=-0.282779] *[#16353=-0.283009] *[#16354=-0.283216] *[#16355=-0.28338] *[#16356=-0.283668] *[#16357=-0.283906] *[#16364=-0.284255] *[#16367=-0.284285] *[#16369=-0.284511] *[#16370=-0.284574] *[#16372=-0.284604] *[#16374=-0.284725] *[#16375=-0.284808] *[#16376=-0.284882] *[#16377=-0.284891] *[#16391=-0.2849] *[#16393=-0.28507] *[#16398=-0.285261] *[#16399=-0.285316] *[#16400=-0.285374] *[#16403=-0.285466] *[#16406=-0.285568] *[#16407=-0.285679] *[#16430=-0.285692] *[#16432=-0.285856] *[#16447=-0.285883] *[#16448=-0.285958] *[#16452=-0.286014] *[#16456=-0.286047] *[#16459=-0.286114] *[#16463=-0.286152] *[#16480=-0.286239] *[#16485=-0.286287] *[#16490=-0.28629] *[#16496=-0.286356] *[#16500=-0.286366] *[#16502=-0.28642] *[#16503=-0.286424] *[#16509=-0.286432] *[#16510=-0.286487] *[#16514=-0.286521] *[#16527=-0.286537] *[#16535=-0.286553] *[#16541=-0.286604] *[#16551=-0.28661] *[#16554=-0.286623] *[#16559=-0.286642] *[#16560=-0.286646] *[#16567=-0.286653] *[#16574=-0.286654] *[#16576=-0.286656] *[#16583=-0.286657] *[#16585=-0.286658] *[#16586=-0.286661] *[#16589=-0.286661] *[#16593=-0.286665] *[#16596=-0.286666] *[#16603=-0.286669] *[#16604=-0.28667] *[#16609=-0.286674] *[#16618=-0.286677] *[#16625=-0.286681] *[#16628=-0.286682] *[#16633=-0.286686] *[#16634=-0.286688] *[#16637=-0.286693] *[#16646=-0.286701] *[#16649=-0.286702] *[#16652=-0.286702] *[#16658=-0.286711] *[#16661=-0.286712] *[#16663=-0.286712] *[#16665=-0.286716] *[#16666=-0.28672] *[#16669=-0.286723] *[#16670=-0.286728] *[#16675=-0.28673] *[#16680=-0.286732] *[#16683=-0.286734] *[#16684=-0.286738] *[#16685=-0.28674] *[#16686=-0.286741] *[#16688=-0.286755] *[#16693=-0.286757] *[#16700=-0.286762] *[#16705=-0.286766] *[#16708=-0.286767] *[#16709=-0.286769] *[#16710=-0.28677] *[#16713=-0.286773] *[#16718=-0.286775] *[#16721=-0.286782] *[#16722=-0.286782] *[#16728=-0.28679] *[#16729=-0.286796] *[#16732=-0.2868] *[#16733=-0.286803] *[#16738=-0.286808] *[#16743=-0.286813] *[#16744=-0.286817] *[#16747=-0.28682] *[#16750=-0.286822] *[#16753=-0.286824] *[#16754=-0.286824] *[#16755=-0.286825] *[#16758=-0.286826] *[#16761=-0.286828] *[#16762=-0.286828] *[#16766=-0.286829] *[#16772=-0.28683] *[#16775=-0.286831] *[#16778=-0.286831] *[#16780=-0.286831] *[#16784=-0.286833] *[#16793=-0.286835] *[#16804=-0.286835] *[#16806=-0.286835] *[#16816=-0.286836] *[#16819=-0.286836] *[#16827=-0.286838] *[#16828=-0.28684] *[#16829=-0.28684] *[#16832=-0.286841] *[#16837=-0.286844] *[#16840=-0.286844] *[#16842=-0.286845] *[#16852=-0.286846] *[#16856=-0.286846] *[#16859=-0.286847] *[#16863=-0.286847] *[#16868=-0.28685] *[#16898=-0.28685] 
 + - Final    cost = -0.286850 ; 705 funcs
 + Final fine fit Parameters:
       x-shift= 0.7831   y-shift=-3.3594   z-shift= 0.2183
       z-angle=-0.3273   x-angle= 1.9084   y-angle=-0.0384
       x-scale= 1.0078   y-scale= 1.0477   z-scale= 0.9885
     y/x-shear=-0.0007 z/x-shear=-0.0042 z/y-shear=-0.0127
 + - Fine net CPU time = 0.0 s
++ Computing output image
++ image warp: parameters = 0.7831 -3.3594 0.2183 -0.3273 1.9084 -0.0384 1.0078 1.0477 0.9885 -0.0007 -0.0042 -0.0127
++ Output dataset ./__tt_sub-TAG089_SurfVol_ns_ob_temp_al_junk+orig.BRIK
++ Wrote -1Dmatrix_save ./sub-TAG089_SurfVol_al_junk_e2a_only_mat.aff12.1D
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 148.9
++ ###########################################################
++ #   Please check results visually for alignment quality   #
++ ###########################################################
++ #   '-autoweight' is recommended when using -lpc or -lpa  #
++ #   If your results are not good, please try again.       #
++ ###########################################################
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./__tt_vr_base_min_outlier_ts_ns+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./__tt_vr_base_min_outlier_ts_ns+orig.BRIK is 8.709736 degrees from plumb.
++ Source dataset: ./__tt_sub-TAG089_SurfVol_ns+orig.HEAD
++ Base dataset:   ./__tt_vr_base_min_outlier_ts_ns+orig.HEAD
++ Loading datasets
 + Range param#4 [z-angle] = -6.000000 .. 6.000000
 + Range param#5 [x-angle] = -6.000000 .. 6.000000
 + Range param#6 [y-angle] = -6.000000 .. 6.000000
 + Range param#1 [x-shift] = -10.000000 .. 10.000000
 + Range param#2 [y-shift] = -10.000000 .. 10.000000
 + Range param#3 [z-shift] = -10.000000 .. 10.000000
 + Range param#4 [z-angle] = -45.000000 .. 45.000000
 + Range param#5 [x-angle] = -45.000000 .. 45.000000
 + Range param#6 [y-angle] = -45.000000 .. 45.000000
 + Range param#1 [x-shift] = -40.000000 .. 40.000000
 + Range param#2 [y-shift] = -40.000000 .. 40.000000
 + Range param#3 [z-shift] = -40.000000 .. 40.000000
++ changing output grid spacing to 1.0000 mm
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ ========== sub-brick #0 ========== [total CPU to here=0.0 s]
 + * Enter alignment setup routine
 + - copying base image
 + - copying source image
 + - no weight image
 + - using 11 points from base image [use_all=0]
 + * Exit alignment setup routine
++ using -1Dmatrix_apply
++ Computing output image
++ image warp: parameters = 1.0035 0.0828 -0.0517 21.0979 -0.0560 0.0912 -0.9818 172.4624 -0.0748 1.0409 0.0989 32.4876
++ Output dataset ./sub-TAG089_SurfVol_al_junk+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 1.0
++ ###########################################################
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
foreach run ( 01 02 )
3dvolreg -verbose -zpad 1 -base vr_base_min_outlier+orig -1Dfile dfile.r01.1D -prefix rm.epi.volreg.r01 -Fourier -1Dmatrix_save mat.r01.vr.aff12.1D pb01.sub-TAG089.r01.despike+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dvolreg: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./vr_base_min_outlier+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./vr_base_min_outlier+orig.BRIK is 8.709736 degrees from plumb.
++ Reading in base dataset ./vr_base_min_outlier+orig.BRIK
++ Oblique dataset:./pb01.sub-TAG089.r01.despike+orig.BRIK is 8.709736 degrees from plumb.
++ Reading input dataset ./pb01.sub-TAG089.r01.despike+orig.BRIK
++ Edging: x=4 y=4 z=3
++ Creating mask for -maxdisp
 + Automask has 79215 voxels
 + 11703 voxels left in -maxdisp mask after erosion
++ Initializing alignment base
++ Starting final pass on 390 sub-bricks: 0..1..2..3..4..5..6..7..8..9..10..11..12..13..14..15..16..17..18..19..20..21..22..23..24..25..26..27..28..29..30..31..32..33..34..35..36..37..38..39..40..41..42..43..44..45..46..47..48..49..50..51..52..53..54..55..56..57..58..59..60..61..62..63..64..65..66..67..68..69..70..71..72..73..74..75..76..77..78..79..80..81..82..83..84..85..86..87..88..89..90..91..92..93..94..95..96..97..98..99..100..101..102..103..104..105..106..107..108..109..110..111..112..113..114..115..116..117..118..119..120..121..122..123..124..125..126..127..128..129..130..131..132..133..134..135..136..137..138..139..140..141..142..143..144..145..146..147..148..149..150..151..152..153..154..155..156..157..158..159..160..161..162..163..164..165..166..167..168..169..170..171..172..173..174..175..176..177..178..179..180..181..182..183..184..185..186..187..188..189..190..191..192..193..194..195..196..197..198..199..200..201..202..203..204..205..206..207..208..209..210..211..212..213..214..215..216..217..218..219..220..221..222..223..224..225..226..227..228..229..230..231..232..233..234..235..236..237..238..239..240..241..242..243..244..245..246..247..248..249..250..251..252..253..254..255..256..257..258..259..260..261..262..263..264..265..266..267..268..269..270..271..272..273..274..275..276..277..278..279..280..281..282..283..284..285..286..287..288..289..290..291..292..293..294..295..296..297..298..299..300..301..302..303..304..305..306..307..308..309..310..311..312..313..314..315..316..317..318..319..320..321..322..323..324..325..326..327..328..329..330..331..332..333..334..335..336..337..338..339..340..341..342..343..344..345..346..347..348..349..350..351..352..353..354..355..356..357..358..359..360..361..362..363..364..365..366..367..368..369..370..371..372..373..374..375..376..377..378..379..380..381..382..383..384..385..386..387..388..389..
++ CPU time for realignment=0 s  [=0 s/sub-brick]
++ Min : roll=-0.102  pitch=-0.478  yaw=-0.329  dS=-0.729  dL=-0.217  dP=-0.377
++ Mean: roll=+0.092  pitch=+0.090  yaw=+0.134  dS=+0.105  dL=-0.012  dP=+0.005
++ Max : roll=+0.576  pitch=+1.311  yaw=+0.385  dS=+0.452  dL=+0.395  dP=+0.210
++ Max displacements (mm) for each sub-brick:
 0.24(0.00) 0.18(0.10) 0.20(0.25) 0.26(0.13) 0.25(0.23) 0.25(0.14) 0.24(0.09) 0.15(0.27) 0.33(0.29) 0.13(0.26) 0.18(0.14) 0.14(0.06) 0.21(0.23) 0.38(0.23) 0.22(0.19) 0.00(0.22) 0.12(0.12) 0.53(0.49) 0.30(0.43) 0.20(0.15) 0.18(0.11) 0.18(0.10) 0.21(0.10) 0.30(0.35) 0.31(0.17) 0.27(0.11) 0.26(0.04) 0.36(0.17) 0.54(0.60) 0.56(0.37) 0.68(0.37) 0.53(0.25) 0.43(0.14) 0.38(0.10) 0.39(0.22) 0.47(0.46) 0.49(0.13) 0.35(0.21) 0.28(0.12) 0.27(0.08) 0.37(0.32) 0.42(0.16) 0.23(0.26) 0.21(0.14) 0.22(0.04) 0.63(0.56) 0.57(0.20) 0.32(0.27) 0.23(0.11) 0.28(0.08) 0.36(0.24) 0.44(0.19) 0.22(0.26) 0.19(0.10) 0.21(0.05) 0.41(0.27) 0.64(0.30) 0.34(0.33) 0.24(0.13) 0.21(0.12) 0.44(0.32) 0.55(0.32) 0.35(0.23) 0.31(0.13) 0.32(0.09) 0.50(0.21) 0.49(0.06) 0.35(0.20) 0.31(0.15) 0.61(0.34) 0.79(0.75) 0.78(0.07) 0.51(0.37) 0.43(0.08) 0.33(0.19) 0.36(0.28) 0.42(0.07) 0.41(0.13) 0.40(0.05) 0.57(0.26) 0.82(0.29) 0.59(0.30) 0.51(0.18) 0.51(0.08) 0.61(0.18) 0.95(0.51) 0.69(0.28) 0.61(0.14) 0.56(0.13) 0.86(0.41) 0.97(0.23) 0.67(0.38) 0.58(0.16) 0.64(0.12) 0.94(0.37) 0.78(0.17) 0.69(0.22) 0.53(0.18) 0.57(0.09) 0.70(0.20) 0.37(0.41) 0.31(0.23) 0.35(0.07) 0.40(0.13) 0.59(0.39) 0.53(0.09) 0.39(0.24) 0.34(0.15) 0.43(0.11) 1.15(0.97) 1.13(0.14) 0.84(0.35) 0.68(0.19) 0.60(0.08) 0.94(0.42) 0.90(0.12) 0.72(0.23) 0.65(0.11) 0.63(0.04) 1.09(0.49) 1.09(0.14) 0.74(0.44) 0.70(0.06) 0.77(0.13) 0.99(0.29) 0.94(0.08) 0.73(0.25) 0.56(0.20) 0.63(0.10) 0.90(0.31) 0.92(0.04) 0.76(0.19) 0.68(0.09) 0.53(0.19) 0.39(0.36) 0.50(0.19) 0.51(0.21) 0.48(0.07) 0.48(0.06) 0.53(0.11) 0.68(0.27) 0.52(0.20) 0.48(0.08) 0.43(0.08) 0.42(0.10) 0.62(0.25) 0.27(0.42) 0.41(0.36) 0.46(0.07) 0.40(0.20) 0.43(0.40) 0.57(0.22) 0.49(0.15) 0.48(0.06) 0.47(0.12) 0.38(0.16) 0.46(0.21) 0.44(0.10) 0.41(0.08) 0.46(0.15) 0.47(0.20) 0.69(0.23) 0.59(0.15) 0.50(0.15) 0.47(0.05) 0.59(0.19) 1.05(0.53) 1.05(0.05) 0.85(0.30) 0.73(0.15) 0.77(0.10) 1.11(0.39) 0.97(0.15) 0.76(0.27) 0.71(0.09) 0.92(0.31) 1.09(0.20) 0.99(0.18) 0.96(0.10) 0.85(0.13) 1.02(0.25) 1.17(0.18) 0.99(0.22) 0.90(0.16) 0.80(0.12) 0.68(0.20) 1.08(0.52) 1.08(0.07) 0.91(0.23) 0.69(0.26) 0.69(0.56) 0.79(0.64) 0.81(0.11) 0.52(0.46) 0.57(0.39) 0.56(0.14) 0.55(0.21) 0.53(0.42) 0.54(0.05) 0.47(0.19) 0.50(0.14) 0.52(0.12) 0.69(0.38) 0.70(0.08) 0.56(0.20) 0.53(0.14) 0.56(0.17) 0.78(0.53) 0.67(0.15) 0.45(0.26) 0.46(0.08) 0.63(0.27) 0.84(0.65) 0.88(0.22) 0.59(0.35) 0.54(0.16) 0.64(0.48) 0.58(0.50) 0.67(0.19) 0.61(0.13) 0.54(0.13) 0.59(0.22) 0.79(0.29) 0.48(0.35) 0.44(0.12) 0.54(0.38) 1.16(0.89) 1.19(0.19) 0.93(0.53) 0.71(0.31) 0.65(0.22) 0.62(0.07) 0.57(0.16) 0.66(0.23) 0.67(0.08) 0.60(0.22) 0.51(0.38) 0.50(0.04) 0.48(0.13) 0.50(0.06) 0.56(0.22) 0.75(0.27) 0.55(0.25) 0.53(0.23) 0.53(0.12) 0.68(0.23) 0.80(0.32) 0.56(0.27) 0.56(0.13) 0.63(0.09) 0.64(0.18) 0.59(0.23) 0.56(0.16) 0.56(0.31) 0.63(0.19) 0.90(0.64) 1.36(0.53) 0.96(0.49) 0.74(0.41) 0.78(0.10) 0.79(0.05) 0.77(0.16) 0.81(0.21) 0.63(0.25) 0.69(0.25) 0.77(0.16) 0.78(0.10) 1.03(0.36) 0.91(0.32) 0.59(0.37) 0.56(0.09) 0.85(0.49) 0.56(0.31) 0.65(0.24) 0.65(0.15) 0.66(0.16) 1.26(0.72) 1.16(0.15) 0.92(0.33) 0.54(0.55) 0.54(0.15) 0.57(0.09) 0.58(0.08) 0.61(0.08) 0.62(0.22) 0.61(0.24) 0.51(0.13) 0.58(0.21) 0.65(0.07) 0.59(0.10) 0.35(0.63) 0.33(0.25) 0.47(0.36) 0.56(0.12) 0.77(0.25) 0.72(0.13) 0.60(0.19) 0.70(0.21) 0.80(0.14) 0.85(0.09) 0.74(0.29) 0.62(0.16) 0.71(0.27) 0.83(0.13) 0.89(0.11) 0.79(0.19) 0.77(0.24) 0.84(0.15) 0.90(0.19) 0.92(0.09) 0.91(0.06) 0.83(0.22) 0.92(0.10) 0.95(0.13) 0.94(0.15) 1.02(0.11) 1.07(0.30) 1.12(0.20) 1.20(0.27) 1.78(0.67) 1.51(0.36) 1.16(0.44) 1.12(0.30) 1.87(0.89) 1.59(0.35) 1.68(0.16) 1.69(0.09) 1.68(0.20) 1.54(0.38) 1.40(0.21) 1.40(0.10) 1.52(0.16) 1.18(0.53) 1.02(0.29) 1.14(0.24) 1.35(0.34) 1.40(0.09) 1.51(0.14) 1.25(0.46) 1.22(0.33) 1.23(0.13) 1.27(0.21) 1.20(0.10) 1.25(0.10) 1.27(0.12) 1.05(0.43) 1.05(0.05) 1.11(0.20) 1.18(0.12) 1.04(0.16) 1.46(0.95) 1.81(0.56) 2.25(0.66) 2.24(0.18) 2.29(0.11) 2.06(0.38) 2.17(0.21) 1.67(0.54) 1.20(0.69) 1.08(0.32) 1.12(0.50) 1.04(0.12) 1.17(0.36) 1.28(0.20) 1.05(0.43) 0.79(0.31) 0.74(0.18) 0.80(0.29) 0.86(0.20) 0.90(0.11) 0.69(0.40) 0.69(0.03) 0.73(0.17) 0.77(0.09) 0.81(0.12) 0.66(0.36) 0.67(0.08) 0.78(0.25) 0.88(0.14) 0.90(0.11) 0.68(0.33) 0.70(0.11) 0.80(0.22) 0.86(0.10) 0.88(0.11) 0.76(0.30) 0.79(0.21) 0.85(0.17) 0.84(0.05) 0.94(0.11)
++ Max displacement in automask = 2.29 (mm) at sub-brick 354
++ Max delta displ  in automask = 0.97 (mm) at sub-brick 109
++ Wrote dataset to disk in ./rm.epi.volreg.r01+orig.BRIK
3dcalc -overwrite -a pb01.sub-TAG089.r01.despike+orig -expr 1 -prefix rm.epi.all1
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
[7m*+ WARNING:[0m input 'a' is not used in the expression
++ Output dataset ./rm.epi.all1+orig.BRIK
cat_matvec -ONELINE sub-TAG089_SurfVol_al_junk_mat.aff12.1D -I mat.r01.vr.aff12.1D
3dAllineate -base sub-TAG089_SurfVol_ns+orig -input pb01.sub-TAG089.r01.despike+orig -1Dmatrix_apply mat.r01.warp.aff12.1D -mast_dxyz 2.5 -prefix rm.epi.nomask.r01
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb01.sub-TAG089.r01.despike+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb01.sub-TAG089.r01.despike+orig.BRIK is 8.709736 degrees from plumb.
++ Source dataset: ./pb01.sub-TAG089.r01.despike+orig.HEAD
++ Base dataset:   ./sub-TAG089_SurfVol_ns+orig.HEAD
++ Loading datasets
++ master dataset for output = base
++ changing output grid spacing to 2.5000 mm
++ OpenMP thread count = 1
++ ========== Applying transformation to 390 sub-bricks ==========
volume 0..1..2..3..4..5..6..7..8..9..10..11..12..13..14..15..16..17..18..19..20..21..22..23..24..25..26..27..28..29..30..31..32..33..34..35..36..37..38..39..40..41..42..43..44..45..46..47..48..49..50..51..52..53..54..55..56..57..58..59..60..61..62..63..64..65..66..67..68..69..70..71..72..73..74..75..76..77..78..79..80..81..82..83..84..85..86..87..88..89..90..91..92..93..94..95..96..97..98..99..100..101..102..103..104..105..106..107..108..109..110..111..112..113..114..115..116..117..118..119..120..121..122..123..124..125..126..127..128..129..130..131..132..133..134..135..136..137..138..139..140..141..142..143..144..145..146..147..148..149..150..151..152..153..154..155..156..157..158..159..160..161..162..163..164..165..166..167..168..169..170..171..172..173..174..175..176..177..178..179..180..181..182..183..184..185..186..187..188..189..190..191..192..193..194..195..196..197..198..199..200..201..202..203..204..205..206..207..208..209..210..211..212..213..214..215..216..217..218..219..220..221..222..223..224..225..226..227..228..229..230..231..232..233..234..235..236..237..238..239..240..241..242..243..244..245..246..247..248..249..250..251..252..253..254..255..256..257..258..259..260..261..262..263..264..265..266..267..268..269..270..271..272..273..274..275..276..277..278..279..280..281..282..283..284..285..286..287..288..289..290..291..292..293..294..295..296..297..298..299..300..301..302..303..304..305..306..307..308..309..310..311..312..313..314..315..316..317..318..319..320..321..322..323..324..325..326..327..328..329..330..331..332..333..334..335..336..337..338..339..340..341..342..343..344..345..346..347..348..349..350..351..352..353..354..355..356..357..358..359..360..361..362..363..364..365..366..367..368..369..370..371..372..373..374..375..376..377..378..379..380..381..382..383..384..385..386..387..388..389
++ Output dataset ./rm.epi.nomask.r01+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 54.9
++ ###########################################################
3dAllineate -base sub-TAG089_SurfVol_ns+orig -input rm.epi.all1+orig -1Dmatrix_apply mat.r01.warp.aff12.1D -mast_dxyz 2.5 -final NN -quiet -prefix rm.epi.1.r01
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./rm.epi.all1+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./rm.epi.all1+orig.BRIK is 8.709736 degrees from plumb.
++ Output dataset ./rm.epi.1.r01+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 45.2
3dTstat -min -prefix rm.epi.min.r01 rm.epi.1.r01+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTstat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: KR Hammett & RW Cox
++ Output dataset ./rm.epi.min.r01+orig.BRIK
end
3dvolreg -verbose -zpad 1 -base vr_base_min_outlier+orig -1Dfile dfile.r02.1D -prefix rm.epi.volreg.r02 -Fourier -1Dmatrix_save mat.r02.vr.aff12.1D pb01.sub-TAG089.r02.despike+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dvolreg: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: RW Cox
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./vr_base_min_outlier+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./vr_base_min_outlier+orig.BRIK is 8.709736 degrees from plumb.
++ Reading in base dataset ./vr_base_min_outlier+orig.BRIK
++ Oblique dataset:./pb01.sub-TAG089.r02.despike+orig.BRIK is 8.709736 degrees from plumb.
++ Reading input dataset ./pb01.sub-TAG089.r02.despike+orig.BRIK
++ Edging: x=4 y=4 z=3
++ Creating mask for -maxdisp
 + Automask has 84916 voxels
 + 12490 voxels left in -maxdisp mask after erosion
++ Initializing alignment base
++ Starting final pass on 390 sub-bricks: 0..1..2..3..4..5..6..7..8..9..10..11..12..13..14..15..16..17..18..19..20..21..22..23..24..25..26..27..28..29..30..31..32..33..34..35..36..37..38..39..40..41..42..43..44..45..46..47..48..49..50..51..52..53..54..55..56..57..58..59..60..61..62..63..64..65..66..67..68..69..70..71..72..73..74..75..76..77..78..79..80..81..82..83..84..85..86..87..88..89..90..91..92..93..94..95..96..97..98..99..100..101..102..103..104..105..106..107..108..109..110..111..112..113..114..115..116..117..118..119..120..121..122..123..124..125..126..127..128..129..130..131..132..133..134..135..136..137..138..139..140..141..142..143..144..145..146..147..148..149..150..151..152..153..154..155..156..157..158..159..160..161..162..163..164..165..166..167..168..169..170..171..172..173..174..175..176..177..178..179..180..181..182..183..184..185..186..187..188..189..190..191..192..193..194..195..196..197..198..199..200..201..202..203..204..205..206..207..208..209..210..211..212..213..214..215..216..217..218..219..220..221..222..223..224..225..226..227..228..229..230..231..232..233..234..235..236..237..238..239..240..241..242..243..244..245..246..247..248..249..250..251..252..253..254..255..256..257..258..259..260..261..262..263..264..265..266..267..268..269..270..271..272..273..274..275..276..277..278..279..280..281..282..283..284..285..286..287..288..289..290..291..292..293..294..295..296..297..298..299..300..301..302..303..304..305..306..307..308..309..310..311..312..313..314..315..316..317..318..319..320..321..322..323..324..325..326..327..328..329..330..331..332..333..334..335..336..337..338..339..340..341..342..343..344..345..346..347..348..349..350..351..352..353..354..355..356..357..358..359..360..361..362..363..364..365..366..367..368..369..370..371..372..373..374..375..376..377..378..379..380..381..382..383..384..385..386..387..388..389..
++ CPU time for realignment=0 s  [=0 s/sub-brick]
++ Min : roll=-0.829  pitch=+0.813  yaw=-0.358  dS=-0.276  dL=+0.160  dP=-1.999
++ Mean: roll=-0.115  pitch=+4.139  yaw=+0.980  dS=+1.349  dL=+0.990  dP=-0.591
++ Max : roll=+1.277  pitch=+9.313  yaw=+1.915  dS=+2.346  dL=+3.349  dP=+0.057
++ Max displacements (mm) for each sub-brick:
 3.79(0.00) 3.80(0.37) 4.40(0.73) 4.19(0.37) 4.04(0.38) 4.22(0.30) 4.05(0.39) 3.97(0.18) 3.97(0.43) 3.79(0.27) 3.86(0.12) 4.06(0.32) 3.84(0.45) 3.88(0.11) 3.83(0.18) 3.78(0.10) 3.79(0.12) 3.91(0.23) 3.87(0.24) 3.92(0.33) 3.74(0.35) 3.97(0.62) 3.98(0.29) 3.93(1.30) 4.07(2.68) 4.61(0.72) 3.79(1.11) 3.52(1.11) 3.75(0.84) 4.64(1.83) 4.42(0.40) 4.49(0.21) 4.68(0.28) 5.76(1.41) 5.30(0.93) 5.01(0.57) 4.82(0.34) 4.49(0.35) 4.23(0.32) 4.00(0.66) 3.93(0.50) 3.84(0.13) 3.73(0.14) 3.77(0.18) 3.81(0.13) 3.84(0.60) 3.84(0.15) 3.80(0.18) 3.75(0.12) 3.76(0.12) 3.92(0.53) 3.76(0.30) 3.64(0.19) 3.61(0.06) 3.65(0.09) 3.97(0.42) 4.04(0.19) 3.91(0.17) 3.93(0.19) 3.91(0.10) 3.75(0.27) 3.79(0.36) 3.78(0.18) 3.74(0.21) 3.90(0.20) 3.89(0.19) 3.94(0.25) 3.97(0.22) 3.92(0.18) 3.90(0.17) 3.92(0.08) 4.61(0.71) 4.76(0.27) 4.42(0.36) 4.31(0.15) 4.19(0.15) 4.19(0.07) 4.14(0.47) 3.86(0.98) 3.98(1.51) 4.12(0.41) 4.85(0.88) 4.62(0.73) 4.39(0.44) 4.15(0.31) 4.05(0.15) 4.03(0.08) 4.09(0.21) 4.05(0.08) 3.96(0.12) 4.00(0.09) 3.91(0.22) 3.77(0.40) 3.65(0.16) 3.67(0.37) 3.76(0.17) 4.04(0.35) 3.91(0.39) 3.71(0.32) 3.74(0.24) 3.76(0.15) 3.81(0.18) 4.02(0.28) 3.95(0.11) 4.03(0.11) 4.04(0.13) 4.21(0.18) 4.33(0.23) 4.28(0.18) 4.21(0.27) 3.89(0.44) 3.87(0.16) 4.30(0.49) 4.01(0.47) 4.06(0.19) 4.16(0.13) 4.23(0.22) 4.68(0.50) 4.78(0.22) 4.58(0.20) 4.55(0.09) 4.53(0.16) 4.85(0.36) 4.92(0.41) 4.90(0.38) 4.83(0.39) 5.08(0.30) 5.00(0.32) 5.59(1.19) 5.73(0.70) 5.56(0.46) 5.25(0.32) 5.25(0.24) 5.27(0.12) 5.37(0.25) 5.31(0.27) 5.18(0.23) 5.06(0.14) 5.01(0.09) 4.64(0.47) 4.72(0.30) 4.58(0.35) 4.95(0.50) 4.99(0.12) 5.04(0.17) 5.82(0.80) 5.52(0.77) 5.38(0.19) 5.32(0.32) 5.26(0.09) 5.21(0.20) 5.14(0.33) 5.13(0.12) 5.15(0.18) 5.25(0.12) 5.25(0.32) 5.19(0.48) 5.32(0.13) 5.30(0.14) 5.26(0.07) 5.25(0.06) 5.26(0.20) 5.12(0.58) 4.99(0.39) 5.15(0.32) 5.20(0.25) 5.18(0.36) 5.03(0.43) 4.97(0.57) 5.00(0.08) 5.01(0.27) 5.14(0.54) 5.40(1.74) 6.11(0.99) 6.25(1.50) 5.54(0.98) 4.70(1.41) 4.78(0.44) 5.31(1.18) 6.33(1.67) 6.53(0.84) 6.11(0.68) 5.77(0.83) 5.48(0.75) 5.47(0.56) 5.45(0.09) 5.28(0.24) 4.75(0.85) 4.47(0.59) 4.34(0.41) 4.44(0.16) 4.39(0.29) 4.42(0.23) 4.51(0.23) 4.69(0.27) 5.49(0.81) 5.69(0.64) 6.13(0.53) 5.72(0.41) 5.30(0.47) 5.12(0.35) 6.38(1.80) 7.93(2.10) 9.94(2.34) 9.96(0.37) 10.15(0.31) 6.90(3.32) 8.03(1.25) 8.51(1.00) 8.54(0.41) 8.43(0.28) 8.98(0.61) 9.26(0.35) 9.26(0.28) 9.13(0.55) 9.16(0.12) 9.20(0.08) 9.20(0.06) 9.15(0.13) 10.10(0.97) 10.67(0.67) 9.67(1.04) 9.54(0.61) 10.63(1.23) 11.72(1.42) 12.25(0.67) 11.83(0.42) 11.86(0.17) 12.20(0.43) 12.24(0.06) 12.16(0.13) 11.98(0.23) 12.01(0.11) 12.07(0.07) 12.03(0.05) 12.03(0.09) 12.02(0.11) 12.06(0.17) 12.14(0.13) 12.03(0.14) 11.83(0.32) 12.04(0.33) 11.83(0.21) 11.70(0.49) 12.12(0.53) 11.99(0.43) 11.64(0.52) 11.65(0.11) 11.76(0.20) 11.87(0.22) 11.94(0.10) 12.05(0.28) 12.24(0.21) 11.75(0.48) 11.73(0.13) 11.33(0.47) 11.62(0.38) 11.96(1.07) 12.11(0.56) 12.05(0.11) 11.87(0.21) 11.78(0.11) 11.82(0.30) 13.01(1.21) 13.63(0.72) 13.72(0.28) 14.14(0.48) 13.96(0.20) 13.89(0.10) 13.98(0.15) 13.79(0.25) 13.83(0.10) 13.06(0.79) 12.81(0.35) 12.25(1.43) 12.43(0.48) 12.43(0.21) 13.39(1.00) 15.25(1.90) 15.07(0.42) 15.06(0.23) 15.10(0.11) 13.22(1.92) 11.97(1.38) 11.31(0.83) 10.80(0.57) 11.03(1.01) 11.58(0.59) 11.38(0.46) 11.49(0.36) 12.43(0.95) 13.17(0.79) 13.26(0.17) 12.80(0.52) 12.43(0.44) 13.00(0.65) 12.87(0.38) 12.42(0.47) 12.33(0.24) 12.87(0.66) 13.00(0.79) 12.90(0.21) 12.85(0.67) 13.29(0.48) 13.36(0.13) 13.23(0.48) 12.88(0.38) 13.24(0.39) 13.03(0.36) 12.65(0.38) 12.73(0.24) 12.99(0.35) 13.29(0.32) 13.36(0.68) 13.18(0.24) 13.43(0.36) 12.97(0.57) 13.29(0.41) 13.20(0.41) 13.09(0.30) 12.68(0.41) 13.32(0.69) 13.58(0.29) 14.20(0.85) 14.37(0.79) 14.11(0.60) 14.40(0.59) 14.70(0.51) 14.77(1.03) 17.26(2.55) 17.68(0.51) 17.23(0.52) 16.97(0.26) 16.51(0.56) 13.95(2.60) 13.38(1.02) 13.79(0.60) 13.55(0.37) 13.08(0.54) 13.54(0.74) 14.01(0.54) 13.68(0.53) 13.78(0.39) 12.30(1.54) 11.72(0.59) 12.32(0.66) 12.32(0.36) 12.16(1.26) 12.58(1.27) 11.43(1.16) 10.24(3.39) 10.63(1.67) 10.51(0.80) 10.44(0.45) 10.51(0.22) 10.67(2.89) 10.62(1.27) 10.38(0.56) 10.25(0.31) 10.10(0.23) 10.20(0.27) 10.21(0.14) 10.24(0.09) 10.25(0.09) 10.27(0.06) 10.29(0.08) 10.34(0.13) 10.38(0.05) 10.42(0.11) 10.42(0.02) 10.46(0.08) 10.50(0.10) 10.88(0.52) 11.00(0.38) 11.53(0.55) 11.28(0.46) 11.15(0.35) 11.18(0.36) 11.20(0.38) 12.19(1.08) 13.72(1.62) 15.48(1.78) 17.35(1.87) 17.65(0.42) 16.95(0.80) 17.54(0.61) 14.50(3.09) 13.80(0.78) 13.51(0.37) 11.75(2.22)
++ Max displacement in automask = 17.68 (mm) at sub-brick 330
++ Max delta displ  in automask = 3.39 (mm) at sub-brick 350
++ Wrote dataset to disk in ./rm.epi.volreg.r02+orig.BRIK
3dcalc -overwrite -a pb01.sub-TAG089.r02.despike+orig -expr 1 -prefix rm.epi.all1
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
[7m*+ WARNING:[0m input 'a' is not used in the expression
++ Output dataset ./rm.epi.all1+orig.BRIK
cat_matvec -ONELINE sub-TAG089_SurfVol_al_junk_mat.aff12.1D -I mat.r02.vr.aff12.1D
3dAllineate -base sub-TAG089_SurfVol_ns+orig -input pb01.sub-TAG089.r02.despike+orig -1Dmatrix_apply mat.r02.warp.aff12.1D -mast_dxyz 2.5 -prefix rm.epi.nomask.r02
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./pb01.sub-TAG089.r02.despike+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./pb01.sub-TAG089.r02.despike+orig.BRIK is 8.709736 degrees from plumb.
++ Source dataset: ./pb01.sub-TAG089.r02.despike+orig.HEAD
++ Base dataset:   ./sub-TAG089_SurfVol_ns+orig.HEAD
++ Loading datasets
++ master dataset for output = base
++ changing output grid spacing to 2.5000 mm
++ OpenMP thread count = 1
++ ========== Applying transformation to 390 sub-bricks ==========
volume 0..1..2..3..4..5..6..7..8..9..10..11..12..13..14..15..16..17..18..19..20..21..22..23..24..25..26..27..28..29..30..31..32..33..34..35..36..37..38..39..40..41..42..43..44..45..46..47..48..49..50..51..52..53..54..55..56..57..58..59..60..61..62..63..64..65..66..67..68..69..70..71..72..73..74..75..76..77..78..79..80..81..82..83..84..85..86..87..88..89..90..91..92..93..94..95..96..97..98..99..100..101..102..103..104..105..106..107..108..109..110..111..112..113..114..115..116..117..118..119..120..121..122..123..124..125..126..127..128..129..130..131..132..133..134..135..136..137..138..139..140..141..142..143..144..145..146..147..148..149..150..151..152..153..154..155..156..157..158..159..160..161..162..163..164..165..166..167..168..169..170..171..172..173..174..175..176..177..178..179..180..181..182..183..184..185..186..187..188..189..190..191..192..193..194..195..196..197..198..199..200..201..202..203..204..205..206..207..208..209..210..211..212..213..214..215..216..217..218..219..220..221..222..223..224..225..226..227..228..229..230..231..232..233..234..235..236..237..238..239..240..241..242..243..244..245..246..247..248..249..250..251..252..253..254..255..256..257..258..259..260..261..262..263..264..265..266..267..268..269..270..271..272..273..274..275..276..277..278..279..280..281..282..283..284..285..286..287..288..289..290..291..292..293..294..295..296..297..298..299..300..301..302..303..304..305..306..307..308..309..310..311..312..313..314..315..316..317..318..319..320..321..322..323..324..325..326..327..328..329..330..331..332..333..334..335..336..337..338..339..340..341..342..343..344..345..346..347..348..349..350..351..352..353..354..355..356..357..358..359..360..361..362..363..364..365..366..367..368..369..370..371..372..373..374..375..376..377..378..379..380..381..382..383..384..385..386..387..388..389
++ Output dataset ./rm.epi.nomask.r02+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 54.8
++ ###########################################################
3dAllineate -base sub-TAG089_SurfVol_ns+orig -input rm.epi.all1+orig -1Dmatrix_apply mat.r02.warp.aff12.1D -mast_dxyz 2.5 -final NN -quiet -prefix rm.epi.1.r02
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./rm.epi.all1+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./rm.epi.all1+orig.BRIK is 8.709736 degrees from plumb.
++ Output dataset ./rm.epi.1.r02+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 45.0
3dTstat -min -prefix rm.epi.min.r02 rm.epi.1.r02+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTstat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: KR Hammett & RW Cox
++ Output dataset ./rm.epi.min.r02+orig.BRIK
end
cat dfile.r01.1D dfile.r02.1D
3dMean -datum short -prefix rm.epi.mean rm.epi.min.r01+orig.HEAD rm.epi.min.r02+orig.HEAD
++ 3dMean: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
[7m*+ WARNING:[0m +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[7m*+ WARNING:[0m rm.epi.mean+orig[0] scale to shorts mean misfit error = 9.3% -- * Caution
 + a) Numerical precision has been lost when truncating results
       from 32-bit floating point to 16-bit integers (shorts).
 + b) Consider writing datasets out in float format.
       In most AFNI programs, use the '-float' option.
 + c) This warning is a new message, but is an old issue
       that arises when storing results in an integer format.
 + d) Don't panic! These messages likely originate in peripheral
       or unimportant voxels. They mean that you must examine your output.
       "Assess the situation and keep a calm head about you,
        because it doesn't do anybody any good to panic."
++ ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
3dcalc -a rm.epi.mean+orig -expr step(a-0.999) -prefix mask_epi_extents
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Output dataset ./mask_epi_extents+orig.BRIK
foreach run ( 01 02 )
3dcalc -a rm.epi.nomask.r01+orig -b mask_epi_extents+orig -expr a*b -prefix pb02.sub-TAG089.r01.volreg
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Output dataset ./pb02.sub-TAG089.r01.volreg+orig.BRIK
end
3dcalc -a rm.epi.nomask.r02+orig -b mask_epi_extents+orig -expr a*b -prefix pb02.sub-TAG089.r02.volreg
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Output dataset ./pb02.sub-TAG089.r02.volreg+orig.BRIK
end
cat_matvec -ONELINE sub-TAG089_SurfVol_al_junk_mat.aff12.1D -I
3dAllineate -base sub-TAG089_SurfVol_ns+orig -input vr_base_min_outlier+orig -1Dmatrix_apply mat.basewarp.aff12.1D -mast_dxyz 2.5 -prefix final_epi_vr_base_min_outlier
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
[7m*+ WARNING:[0m   If you are performing spatial transformations on an oblique dset, 
  such as ./vr_base_min_outlier+orig.BRIK,
  or viewing/combining it with volumes of differing obliquity,
  you should consider running: 
     3dWarp -deoblique 
  on this and  other oblique datasets in the same session.
 See 3dWarp -help for details.
++ Oblique dataset:./vr_base_min_outlier+orig.BRIK is 8.709736 degrees from plumb.
++ Source dataset: ./vr_base_min_outlier+orig.HEAD
++ Base dataset:   ./sub-TAG089_SurfVol_ns+orig.HEAD
++ Loading datasets
++ master dataset for output = base
++ changing output grid spacing to 2.5000 mm
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ Output dataset ./final_epi_vr_base_min_outlier+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 0.4
++ ###########################################################
3dcopy sub-TAG089_SurfVol_ns+orig anat_final.sub-TAG089
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dcopy: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
tee out.allcostX.txt
3dAllineate -base final_epi_vr_base_min_outlier+orig -allcostX -input anat_final.sub-TAG089+orig
3dmask_tool -input copy_af_FSvent+orig -dilate_input -1 -prefix copy_af_FSvent_erode
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ no -frac option: defaulting to -union
++ processing 1 input datasets...
++ padding all datasets by 0 (for dilations)
++ frac 0 over 1 volumes gives min count 0
++ voxel limits: 0 clipped, 2728 survived, 16774488 were zero
++ writing result copy_af_FSvent_erode...
++ Output dataset ./copy_af_FSvent_erode+orig.BRIK
3dmask_tool -input copy_af_FSWe+orig -dilate_input -1 -prefix copy_af_FSWe_erode
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ no -frac option: defaulting to -union
++ processing 1 input datasets...
++ padding all datasets by 0 (for dilations)
++ frac 0 over 1 volumes gives min count 0
++ voxel limits: 0 clipped, 214005 survived, 16563211 were zero
++ writing result copy_af_FSWe_erode...
++ Output dataset ./copy_af_FSWe_erode+orig.BRIK
3dAllineate -source copy_af_aeseg+orig -master pb02.sub-TAG089.r01.volreg+orig -final NN -1Dparam_apply 1D: 12@0' -prefix follow_ROI_aeseg
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
++ Source dataset: ./copy_af_aeseg+orig.HEAD
++ Base dataset:   (not given)
++ Loading datasets
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ Output dataset ./follow_ROI_aeseg+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 1.0
++ ###########################################################
3dAllineate -source copy_af_FSvent_erode+orig -master pb02.sub-TAG089.r01.volreg+orig -final NN -1Dparam_apply 1D: 12@0' -prefix follow_ROI_FSvent
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
++ Source dataset: ./copy_af_FSvent_erode+orig.HEAD
++ Base dataset:   (not given)
++ Loading datasets
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ Output dataset ./follow_ROI_FSvent+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 0.7
++ ###########################################################
3dAllineate -source copy_af_FSWe_erode+orig -master pb02.sub-TAG089.r01.volreg+orig -final NN -1Dparam_apply 1D: 12@0' -prefix follow_ROI_FSWe
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAllineate: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Zhark the Registrator
++ Source dataset: ./copy_af_FSWe_erode+orig.HEAD
++ Base dataset:   (not given)
++ Loading datasets
++ OpenMP thread count = 1
++ ========== Applying transformation to 1 sub-bricks ==========
++ Output dataset ./follow_ROI_FSWe+orig.BRIK
++ 3dAllineate: total CPU time = 0.0 sec  Elapsed = 0.6
++ ###########################################################
foreach run ( 01 02 )
3dmerge -1blur_fwhm 2 -doall -prefix pb03.sub-TAG089.r01.blur pb02.sub-TAG089.r01.volreg+orig
++ 3dmerge: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ default -1dindex = 0
++ default -1tindex = 1
-- Wrote edited dataset: ./pb03.sub-TAG089.r01.blur+orig.BRIK
end
3dmerge -1blur_fwhm 2 -doall -prefix pb03.sub-TAG089.r02.blur pb02.sub-TAG089.r02.volreg+orig
++ 3dmerge: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ default -1dindex = 0
++ default -1tindex = 1
-- Wrote edited dataset: ./pb03.sub-TAG089.r02.blur+orig.BRIK
end
foreach run ( 01 02 )
3dAutomask -prefix rm.mask_r01 pb03.sub-TAG089.r01.blur+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAutomask: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Emperor Zhark
++ Loading dataset pb03.sub-TAG089.r01.blur+orig
++ Forming automask
 + Fixed clip level = 2056.698242
 + Used gradual clip level = 1910.476318 .. 2145.421143
 + Number voxels above clip level = 74743
 + Clustering voxels ...
 + Largest cluster has 72841 voxels
 + Clustering voxels ...
 + Largest cluster has 72547 voxels
 + Filled   371 voxels in small holes; now have 72918 voxels
 + Filled  1219 voxels in large holes; now have 74137 voxels
 + Clustering voxels ...
 + Largest cluster has 74136 voxels
 + Clustering non-brain voxels ...
 + Clustering voxels ...
 + Largest cluster has 987072 voxels
 + Mask now has 74136 voxels
++ 74136 voxels in the mask [out of 1061208: 6.99%]
++ first  27 x-planes are zero [from R]
++ last   25 x-planes are zero [from L]
++ first  17 y-planes are zero [from S]
++ last   33 y-planes are zero [from I]
++ first  23 z-planes are zero [from P]
++ last   13 z-planes are zero [from A]
++ Output dataset ./rm.mask_r01+orig.BRIK
++ CPU time = 0.000000 sec
end
3dAutomask -prefix rm.mask_r02 pb03.sub-TAG089.r02.blur+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dAutomask: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Emperor Zhark
++ Loading dataset pb03.sub-TAG089.r02.blur+orig
++ Forming automask
 + Fixed clip level = 2036.801270
 + Used gradual clip level = 1888.694946 .. 2110.848633
 + Number voxels above clip level = 75005
 + Clustering voxels ...
 + Largest cluster has 73562 voxels
 + Clustering voxels ...
 + Largest cluster has 73304 voxels
 + Filled   347 voxels in small holes; now have 73651 voxels
 + Filled  1154 voxels in large holes; now have 74805 voxels
 + Clustering voxels ...
 + Largest cluster has 74803 voxels
 + Clustering non-brain voxels ...
 + Clustering voxels ...
 + Largest cluster has 986405 voxels
 + Mask now has 74803 voxels
++ 74803 voxels in the mask [out of 1061208: 7.05%]
++ first  27 x-planes are zero [from R]
++ last   25 x-planes are zero [from L]
++ first  17 y-planes are zero [from S]
++ last   33 y-planes are zero [from I]
++ first  23 z-planes are zero [from P]
++ last   13 z-planes are zero [from A]
++ Output dataset ./rm.mask_r02+orig.BRIK
++ CPU time = 0.000000 sec
end
3dmask_tool -inputs rm.mask_r01+orig.HEAD rm.mask_r02+orig.HEAD -union -prefix full_mask.sub-TAG089
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ processing 2 input datasets...
++ padding all datasets by 0 (for dilations)
++ frac 0 over 2 volumes gives min count 0
++ voxel limits: 0 clipped, 75221 survived, 985987 were zero
++ writing result full_mask.sub-TAG089...
++ Output dataset ./full_mask.sub-TAG089+orig.BRIK
3dresample -master full_mask.sub-TAG089+orig -input sub-TAG089_SurfVol_ns+orig -prefix rm.resam.anat
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
3dmask_tool -dilate_input 5 -5 -fill_holes -input rm.resam.anat+orig -prefix mask_anat.sub-TAG089
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ no -frac option: defaulting to -union
++ processing 1 input datasets...
++ padding all datasets by 5 (for dilations)
++ frac 0 over 1 volumes gives min count 0
++ voxel limits: 0 clipped, 73956 survived, 987252 were zero
++ filled 0 holes (0 voxels)
++ writing result mask_anat.sub-TAG089...
++ Output dataset ./mask_anat.sub-TAG089+orig.BRIK
3dmask_tool -input full_mask.sub-TAG089+orig mask_anat.sub-TAG089+orig -inter -prefix mask_epi_anat.sub-TAG089
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ processing 2 input datasets...
++ padding all datasets by 0 (for dilations)
++ frac 1 over 2 volumes gives min count 2
++ voxel limits: 11489 clipped, 68844 survived, 980875 were zero
++ writing result mask_epi_anat.sub-TAG089...
++ Output dataset ./mask_epi_anat.sub-TAG089+orig.BRIK
tee out.mask_ae_overlap.txt
3dABoverlap -no_automask full_mask.sub-TAG089+orig mask_anat.sub-TAG089+orig
tee out.mask_ae_dice.txt
3ddot -dodice full_mask.sub-TAG089+orig mask_anat.sub-TAG089+orig
foreach run ( 01 02 )
3dTstat -prefix rm.mean_r01 pb03.sub-TAG089.r01.blur+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTstat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: KR Hammett & RW Cox
++ Output dataset ./rm.mean_r01+orig.BRIK
3dcalc -a pb03.sub-TAG089.r01.blur+orig -b rm.mean_r01+orig -c full_mask.sub-TAG089+orig -expr c * min(200, a/b*100)*step(a)*step(b) -prefix pb04.sub-TAG089.r01.scale
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Output dataset ./pb04.sub-TAG089.r01.scale+orig.BRIK
end
3dTstat -prefix rm.mean_r02 pb03.sub-TAG089.r02.blur+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTstat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: KR Hammett & RW Cox
++ Output dataset ./rm.mean_r02+orig.BRIK
3dcalc -a pb03.sub-TAG089.r02.blur+orig -b rm.mean_r02+orig -c full_mask.sub-TAG089+orig -expr c * min(200, a/b*100)*step(a)*step(b) -prefix pb04.sub-TAG089.r02.scale
++ 3dcalc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: A cast of thousands
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Output dataset ./pb04.sub-TAG089.r02.scale+orig.BRIK
end
1d_tool.py -infile dfile_rall.1D -set_nruns 2 -demean -write motion_demean.1D
1d_tool.py -infile dfile_rall.1D -set_nruns 2 -derivative -demean -write motion_deriv.1D
1d_tool.py -infile dfile_rall.1D -set_nruns 2 -show_censor_count -censor_prev_TR -censor_motion 0.2 motion_sub-TAG089
1deval -a motion_sub-TAG089_censor.1D -b outcount_sub-TAG089_censor.1D -expr a*b
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
foreach index ( `count -digits 1 1 $#runs` )
count -digits 1 1 2
set nt = 390
set run = 01
1dBport -nodata 390 0.78 -band 0.009 0.2 -invert -nozero
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Block length: 390
 + Frequency indexes: blocklen=390 :: 1 2 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195
1d_tool.py -infile rm.bpass.1D -pad_into_many_runs 01 2 -set_run_lengths 390 390 -write bpass.r01.1D
end
set nt = 390
set run = 02
1dBport -nodata 390 0.78 -band 0.009 0.2 -invert -nozero
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ Block length: 390
 + Frequency indexes: blocklen=390 :: 1 2 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195
1d_tool.py -infile rm.bpass.1D -pad_into_many_runs 02 2 -set_run_lengths 390 390 -write bpass.r02.1D
end
1dcat bpass.r01.1D bpass.r02.1D
set ktrs = `1d_tool.py -infile censor_${subj}_combined_2.1D                
                       -show_trs_uncensored encoded`
1d_tool.py -infile censor_sub-TAG089_combined_2.1D -show_trs_uncensored encoded
foreach run ( 01 02 )
1d_tool.py -set_run_lengths 390 390 -select_runs 01 -infile censor_sub-TAG089_combined_2.1D -write rm.censor.r01.1D
3dTproject -polort 3 -prefix rm.det_pcin_r01 -censor rm.censor.r01.1D -cenmode KILL -input pb02.sub-TAG089.r01.volreg+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTproject: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Cox the Algebraic (Linear)
++ input time points = 390 ; censored = 140 ; remaining = 250
++ Setting up regressors
++ 1 Blocks * 4 polynomials -- 4 polort regressors
++ 250 retained time points MINUS 4 regressors ==> 246 D.O.F. left
++ no -mask option ==> processing all 1061208 voxels in dataset
++ Compute pseudo-inverse of fixed orts
++ Loading dataset
[7m*+ WARNING:[0m 3dTproject input data :: 668185 vectors are constant
++ Starting project-orization
++ Convert results to output dataset
++ Output dataset ./rm.det_pcin_r01+orig.BRIK
++ ===== clock time = 1h 43m 49s 664ms
end
1d_tool.py -set_run_lengths 390 390 -select_runs 02 -infile censor_sub-TAG089_combined_2.1D -write rm.censor.r02.1D
3dTproject -polort 3 -prefix rm.det_pcin_r02 -censor rm.censor.r02.1D -cenmode KILL -input pb02.sub-TAG089.r02.volreg+orig
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dTproject: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: Cox the Algebraic (Linear)
++ input time points = 390 ; censored = 275 ; remaining = 115
++ Setting up regressors
++ 1 Blocks * 4 polynomials -- 4 polort regressors
++ 115 retained time points MINUS 4 regressors ==> 111 D.O.F. left
++ no -mask option ==> processing all 1061208 voxels in dataset
++ Compute pseudo-inverse of fixed orts
++ Loading dataset
[7m*+ WARNING:[0m 3dTproject input data :: 668185 vectors are constant
++ Starting project-orization
++ Convert results to output dataset
++ Output dataset ./rm.det_pcin_r02+orig.BRIK
++ ===== clock time = 2h 15m 11s 699ms
end
3dTcat -prefix rm.det_pcin_rall rm.det_pcin_r01+orig.HEAD rm.det_pcin_r02+orig.HEAD
++ 3dTcat: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ elapsed time = 2.5 s
3dpc -mask follow_ROI_FSvent+orig -pcsave 3 -prefix rm.ROIPC.FSvent rm.det_pcin_rall+orig
++ 3dpc: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
1d_tool.py -censor_fill_parent censor_sub-TAG089_combined_2.1D -infile rm.ROIPC.FSvent_vec.1D -write ROIPC.FSvent.1D
3dDeconvolve -input pb04.sub-TAG089.r01.scale+orig.HEAD pb04.sub-TAG089.r02.scale+orig.HEAD -mask full_mask.sub-TAG089+orig -censor censor_sub-TAG089_combined_2.1D -ortvec bandpass_rall.1D bandpass -ortvec ROIPC.FSvent.1D ROIPC.FSvent -polort 3 -num_stimts 12 -stim_file 1 motion_demean.1D[0] -stim_base 1 -stim_label 1 roll_01 -stim_file 2 motion_demean.1D[1] -stim_base 2 -stim_label 2 pitch_01 -stim_file 3 motion_demean.1D[2] -stim_base 3 -stim_label 3 yaw_01 -stim_file 4 motion_demean.1D[3] -stim_base 4 -stim_label 4 dS_01 -stim_file 5 motion_demean.1D[4] -stim_base 5 -stim_label 5 dL_01 -stim_file 6 motion_demean.1D[5] -stim_base 6 -stim_label 6 dP_01 -stim_file 7 motion_deriv.1D[0] -stim_base 7 -stim_label 7 roll_02 -stim_file 8 motion_deriv.1D[1] -stim_base 8 -stim_label 8 pitch_02 -stim_file 9 motion_deriv.1D[2] -stim_base 9 -stim_label 9 yaw_02 -stim_file 10 motion_deriv.1D[3] -stim_base 10 -stim_label 10 dS_02 -stim_file 11 motion_deriv.1D[4] -stim_base 11 -stim_label 11 dL_02 -stim_file 12 motion_deriv.1D[5] -stim_base 12 -stim_label 12 dP_02 -fout -tout -x1D X.xmat.1D -xjpeg X.jpg -x1D_uncensored X.nocensor.xmat.1D -fitts fitts.sub-TAG089 -errts errts.sub-TAG089 -x1D_stop -bucket stats.sub-TAG089
++ WARNING: file /home/jpfeifer/.afni.log is now 414384078 (414 million [mega]) bytes long!
++ 3dDeconvolve extending num_stimts from 12 to 557 due to -ortvec
++ 3dDeconvolve: AFNI version=AFNI_18.2.04 (Jul  6 2018) [64-bit]
++ Authored by: B. Douglas Ward, et al.
++ Auto-catenated input datasets treated as multiple imaging runs
++ Auto-catenated datasets start at:  0 390
++ Skipping check for initial transients
++ Input polort=3; Longest run=304.2 s; Recommended minimum polort=3 ++ OK ++
++ Number of time points: 780 (before censor) ; 365 (after)
 + Number of parameters:  565 [565 baseline ; 0 signal]
[7m** ERROR:[0m  *** Censoring has made regression impossible :( ***
[7m** FATAL ERROR:[0m 3dDeconvolve dies: Insufficient data (365) for estimating 565 parameters
** Program compile date = Jul  6 2018
