#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################


###################################################################
# Р Ћ 2017
###################################################################
<< CONFIG_UI

 config_ui provides a minimal user interface for multimodal
 pipeline configuration. This is the single-modal configuration
 script for functional activation processing.

CONFIG_UI
###################################################################
declare  -A task
source   ${XCPEDIR}/core/constants
source   ${XCPEDIR}/core/functions/library.sh
source   ${XCPEDIR}/core/functions/cluster_submit
source   ${XCPEDIR}/core/global

source   ${XCPEDIR}/core/config/common.cfg
source   ${XCPEDIR}/core/config/space.cfg










###################################################################
# On script open
###################################################################
open() {

config_common
string_setup
task[name]="task"
task[fsf]="read_from_cohort"
task[space]="OASIS"
echo -e "${TEXT_RETURN}"

}










###################################################################
# On script close
###################################################################
close() {

echo -e "${TEXT_HEAD}${TEXT_CLOSE}${TEXT_TAIL}"

}










###################################################################
# Main menu
###################################################################
refresh_menu() {
   options=(
      
      [1]="Task name                         ${task[name]}"
      [2]="FEAT design file (.fsf)           ${task[fsf]}"
      [3]="Standard space                    ${task[space]}"
      [4]="Finalise pipeline"
      
   )
}
menu() {

   local REPLY
   local options
   
   local response=(
      
      [1]="${TEXT_HEAD}${TEXT_SELECT_NAME}${TEXT_TAIL}"
      [2]="${TEXT_HEAD}${TEXT_SELECT_FSF}${TEXT_TAIL}"
      [3]="${TEXT_HEAD}${TEXT_SELECT_SPACE}${TEXT_TAIL}"
      [4]=""
      [0]="${TEXT_RETURN}"
     [99]="Exiting"
      
   )
   
   local cmd=(
   
      [1]="menu_name"
      [2]="menu_fsf"
      [3]="menu_space task[space]"
      [4]="task_design_build"
     [99]="exit"
   
   )
   
   while true
   
   do refresh_menu
   select option in "${options[@]}" "Exit without saving"
   
   do case $REPLY in
   
   1 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; break;;
   2 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; break;;
   3 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   4 ) echo -e "${response[REPLY]}"; eval ${cmd[REPLY]}; return;;
   5 ) echo -e "${response[99]}";    eval ${cmd[99]};;
   * ) echo -e "${response[0]}";     eval ${cmd[0]};;
   
   esac; done; done

}










###################################################################
# Naming the task
###################################################################
refresh_menu_name() {
   string_setup
   response=(
      [0]="${TEXT_HEAD}${TEXT_INFO_NAME}${TEXT_TAIL}${TEXT_HEAD}${TEXT_SELECT_NAME}${TEXT_TAIL}"
      [1]="${TEXT_HEAD}${TEXT_SELECT_NAME_NEW}${TEXT_TAIL}${TEXT_RETURN}"
      [2]="${TEXT_HEAD}${TEXT_SELECT_NAME_DEFAULT}${TEXT_TAIL}${TEXT_RETURN}"
   )
}
menu_name() {

   local REPLY
   local response
   refresh_menu_name
   
   while true
      do
      read -p "" -e -i ${task[name]} REPLY
      if [[ -n ${REPLY} ]]
         then
         task[name]=${REPLY}
         refresh_menu_name
         echo -e "${response[1]}"
         return
      elif [[ -z ${REPLY} ]]
         then
         task[name]='task'
         refresh_menu_name
         echo -e "${response[2]}"
         return
      else
         echo -e "${response[0]}"
      fi
   done

}










###################################################################
# FSF selection
###################################################################
refresh_menu_fsf() {
   string_setup
   response=(
      [0]="${TEXT_HEAD}${TEXT_INFO_FSF}${TEXT_TAIL}${TEXT_HEAD}${TEXT_SELECT_FSF}${TEXT_TAIL}"
      [1]="${TEXT_HEAD}${TEXT_SELECT_FSF_FILE}${TEXT_TAIL}${TEXT_RETURN}"
      [2]="${TEXT_HEAD}${TEXT_SELECT_FSF_COHORT}${TEXT_TAIL}${TEXT_RETURN}"
   )
}
menu_fsf() {

   local REPLY
   local response
   refresh_menu_fsf
   
   while true
      do
      read -p "" -e -i ${task[fsf]} REPLY
      if [[ -s ${REPLY} ]]
         then
         task[fsf]=${REPLY}
         refresh_menu_fsf
         echo -e "${response[1]}"
         return
      elif [[ ${REPLY} == Cohort ]] \
      ||   [[ ${REPLY} == cohort ]] \
      ||   [[ ${REPLY} == C      ]] \
      ||   [[ ${REPLY} == c      ]] \
      ||   [[ ${REPLY} == 0      ]]
         then
         task[fsf]='read_from_cohort'
         refresh_menu_fsf
         echo -e "${response[2]}"
         return
      else
         echo -e "${response[0]}"
      fi
   done

}










###################################################################
# Build the design file.
###################################################################
task_design_build() {

   local design=${XCPEDIR}/designs/task.dsn
   local design_new
   local task_design
   local space
   local l
   local line
   local exp
   local REPLY
   local response
   
   ################################################################
   # Translate variables: task[name]
   ################################################################
   [[ ${task[name]} == 'task' ]] && task[name]=''  \
                                 || task[name]='-'${task[name]}
   local design_new=task${task[name]}_$(date +%Y%m%d%H%M).dsn
   
   ################################################################
   # Translate variables: task[fsf]
   ################################################################
   [[ ${task[fsf]} == 'read_from_cohort' ]] && task[fsf]='${fsf[sub]}'
   
   ################################################################
   # Translate variables: task[space]
   ################################################################
   translate_space task[space]

   ################################################################
   # Rebuild the design with the correct variables.
   ################################################################
   mapfile task_design < ${design}

   for l in ${!task_design[@]}
      do
      line="${task_design[l]}"
      [[ -z $(echo ${line}) ]]   && continue

      chk_NAM=( "${line}"           '^sequence='            )
      chk_FSF=( "${line}"           '^task_design\['        )
      chk_SPC=( "${line}"           '^standard='            )
      
      contains "${chk_NAM[@]}"                              \
               && exp=$(strslice ${task_design[l]} 1 =)     \
               && task_design[l]="${exp}=task${task[name]}\n"\
               && continue
      contains "${chk_FSF[@]}"                              \
               && exp=$(strslice ${task_design[l]} 1 =)     \
               && task_design[l]="${exp}=${task[fsf]}\n"    \
               && continue
      contains "${chk_SPC[@]}"                              \
               && exp=$(strslice ${task_design[l]} 1 =)     \
               && task_design[l]="${exp}=${task[space]}\n"  \
               && continue

   done

   ################################################################
   # Write the design file.
   ################################################################
   response=(
   
      [0]="${TEXT_HEAD}${TEXT_SELECT_DESIGN}${TEXT_TAIL}"
   
   )
   while true
      do echo    -e   "${response[0]}"
      read -p "" -e -i ${design_new} REPLY
      touch    ${REPLY} 2>/dev/null
      if [[ -f ${REPLY} ]]
         then
         design_new=$(abspath ${REPLY})
         config_common
         response=(
         
            [1]="${TEXT_HEAD}${TEXT_SELECT_DESIGN_FILE}${TEXT_TAIL}"
         
         )
         echo -e "${response[1]}"
         break
      fi
   done
   printf      '%b' "${task_design[@]}"           >  ${design_new}
   
   return

}









###################################################################
# Define text
# string_response and string_info are NOT used at this time.
###################################################################
string_setup() {

   string_setup_space

   TEXT_SELECT_NAME=\
"Specify the name of the task to be analysed."

   TEXT_SELECT_NAME_NEW=\
"${CYA}Task: ${task[name]}${RCL}"

   TEXT_SELECT_NAME_DEFAULT=\
"${CYA}Invalid name. Defaulting to ${task[name]}.${RCL}"

   TEXT_SELECT_FSF=\
"Specify the FEAT design file for functional activation analysis."

   TEXT_SELECT_FSF_FILE=\
"${CYA}FEAT design loaded: ${task[fsf]}${RCL}"

   TEXT_SELECT_FSF_COHORT=\
"${CYA}FEAT design will be loaded from cohort file.${RCL}"

   TEXT_INFO_MAIN=\
"   Modality: ${CYA}functional activation (task)${RCL}.
   Select a menu item by entering the associated numeral, or 
   finalise your pipeline."
   
   TEXT_INFO_NAME=\
"Specify the name of the task to be analysed.

If no value is entered, the pipeline will default to the name 
'task'."
   
   TEXT_INFO_FSF=\
"Enter a path to a FEAT design (.fsf) file. To use a subject-
specific design specified in the cohort file, enter '0' or 
'Cohort'.

${CYA}FUNCTIONAL ACTIVATION ANALYSIS${LGR}
The pipeline's functional activation analysis system uses FSL's
FMRI Expert Analysis Tool (FEAT) to process functional activation
data and to model responses to any controlled task stimuli. The
pipeline will automatically copy the provided template design file
and fill in the appropriate information for each subject that is to
be processed.${RCL}"

   TEXT_CLOSE="Design configuration complete: ${CYA}functional activation (task)${RCL}"
   
   TEXT_RETURN="${TEXT_HEAD}${TEXT_INFO_MAIN}${TEXT_TAIL}"
}










###################################################################
# Execute
###################################################################
main() {
   open
   menu
   close
}

main
