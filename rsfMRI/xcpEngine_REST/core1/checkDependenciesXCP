#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################


###################################################################
# Check and log all XCP Engine dependencies
###################################################################





###################################################################
# Verify that all dependencies are installed.
# Obtain version information for all dependencies.
###################################################################
dc_FAIL=0
ec_FAIL=0
echo "
Checking general dependencies
····································································"

###################################################################
# AFNI
###################################################################
ver_AFNI=( $(${AFNI_PATH}/afni -ver 2>/dev/null) )
if [[ -z ${ver_AFNI} ]]
   then
   echo \
   "· [Warning: AFNI version unknown]"
   ver_AFNI=unknown
else
   ver_AFNI=$(matching ^AFNI ${ver_AFNI[@]})
   echo "· Version AFNI           ${ver_AFNI}"
fi

###################################################################
# ANTs
###################################################################
ver_ANTS=( $(${ANTSPATH}/antsRegistration --version 2>/dev/null) )
if [[ -z ${ver_ANTS} ]]
   then
   echo \
   "· [Warning: ANTs version unknown]"
   ver_ANTS=unknown
else
   ver_ANTS=$(matching '[0-9]\.[0-9]' ${ver_ANTS[@]})
   echo "· Version ANTs           ${ver_ANTS}"
fi

###################################################################
# FSL
###################################################################
ver_FSL=$(command -v ${FSLDIR}/bin/fsl 2>/dev/null)
if [[ -z ${ver_FSL} ]]
   then
   echo \
   "· [Warning: FSL version unknown]"
   ver_FSL=unknown
else 
   ver_FSL=$(matching '[0-9]\.[0-9]' ${ver_FSL//\// })
   echo "· Version FSL            ${ver_FSL}"
fi

###################################################################
# C3D
###################################################################
ver_C3D=( $(${C3D_PATH}/c3d -version 2>/dev/null) )
if [[ -z ${ver_C3D} ]]
   then
   echo \
   "· [Warning: Convert3D version unknown]"
   ver_C3D=unknown
else
   ver_C3D=$(matching '[0-9]\.[0-9]' ${ver_C3D[@]})
   echo "· Version C3D            ${ver_C3D}"
fi

###################################################################
# JQ
###################################################################
if [[ $(arch) == x86_64 ]]
   then
   export JQ_PATH=${XCPEDIR}/thirdparty/jq/jq-linux64
else
   export JQ_PATH=${XCPEDIR}/thirdparty/jq/jq-linux32
fi
ver_JQ="$(${JQ_PATH} --version)"
echo "· Version JQ             ${ver_JQ}"

###################################################################
# XCP
###################################################################
ver_XCP=$(cat ${XCPEDIR}/core/VERSION \
   2>/dev/null)
echo "· Version XCP Engine     ${ver_XCP}"

###################################################################
# R
###################################################################
ver_R=( $(R --version 2>/dev/null) )
if [[ -z ${ver_R} ]]
   then
   echo \
   "[Warning: R version unknown]"
   ver_R=unknown
else
   ver_R=$(matching '[0-9]\.[0-9]' ${ver_R[@]})
   echo "· R version              ${ver_R}"
fi

###################################################################
# Rscript
###################################################################
ver_RSCRIPT=( $(Rscript --version 2>&1 >/dev/null) )
if [[ -z ${ver_RSCRIPT} ]]
   then
   echo \
   "[Warning: Rscript version unknown]"
   ver_RSCRIPT=unknown
else
   ver_RSCRIPT=$(matching '[0-9]\.[0-9]' ${ver_RSCRIPT[@]})
   echo "· R scripting front-end  ${ver_RSCRIPT}"
fi

###################################################################
# SGE
###################################################################
if [[ ${mode} == c ]] && [[ -z $(command -v qsub 2>/dev/null) ]]
   then
   echo \
   "
   [::Dependencies check failed: grid engine]
   [::Please install a grid engine or use serial execution]
   "
   dc_FAIL=1
fi

###################################################################
# R packages
###################################################################
RpackageChk=( $(${XCPEDIR}/core/checkRpackageDependencies.R) )
[[ -z ${RpackageChk[@]} ]]  && dc_FAIL=1
echo "· · RNifti version       ${RpackageChk[0]}"
echo "· · optparse version     ${RpackageChk[1]}"
echo "· · pracma version       ${RpackageChk[2]}"
echo "· · signal version       ${RpackageChk[3]}"

(( ${dc_FAIL} == 1 )) && echo "[Aborting]" && echo "" && exit 1
echo "····································································
All general dependencies are present."





###################################################################
# Ensure environment variables are defined
###################################################################
echo "
Checking environment"

###################################################################
# FSL
###################################################################
if [[ -z ${FSLDIR} ]]
   then
   echo \
   "
   [::Environment check failed: FSLDIR not set]
   [::Please install FSL and ensure that it is in your environment]
   "
   ec_FAIL=1
fi

###################################################################
# ANTs
###################################################################
if [[ -z ${ANTSPATH} ]]
   then
   echo \
   "
   [::Environment check failed: ANTSPATH not set]
   [::Please install ANTs and ensure that it is in your environment]
   "
   ec_FAIL=1
fi

###################################################################
# AFNI
###################################################################
if [[ -z ${AFNI_PATH} ]]
   then
   echo \
   "
   [::Environment check failed: AFNI_PATH not set]
   [::Please install AFNI and ensure that it is in your environment]
   "
   ec_FAIL=1
fi

###################################################################
# C3D
###################################################################
if [[ -z ${C3D_PATH} ]]
   then
   echo \
   "
   [::Environment check failed: C3D_PATH not set]
   [::Please install C3D and ensure that it is in your environment]
   "
   ec_FAIL=1
fi

(( ${ec_FAIL} == 1 )) && echo "[Aborting]" && echo "" && exit 2
echo "All environmental variables are defined."





###################################################################
# Finally, ensure that any module-specific prerequisites are
# installed. (This will probably be executed only from within
# the XCP Engine.)
###################################################################
echo "
Checking module-specific dependencies
"
for module in "${modules[@]}"
   do
   reqpath=${XCPEDIR}/modules/${module}/${module}.req
   if [[ -e ${reqpath} ]]
      then
      source ${reqpath}
   fi
done
