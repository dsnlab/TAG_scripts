#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################

###################################################################
# SPECIFIC MODULE HEADER
# This module localises inputs to the XCP engine
###################################################################
mod_name='XCP ENGINE LOCALISER'
mod_name_short=localiser
mod_head=${XCPEDIR}/core/CONSOLE_MODULE_RC
cxt=0

###################################################################
# GENERAL MODULE HEADER
###################################################################
source ${XCPEDIR}/core/constants
source ${XCPEDIR}/core/functions/library.sh
source ${XCPEDIR}/core/parseArgsLocaliser

###################################################################
# Localise design file
###################################################################
routine                       @1    Localising subject metadata...

###################################################################
# Parse subject
###################################################################
subroutine                    @1.1  [Parsing subject identifiers]
   source ${XCPEDIR}/core/assignDirect

###################################################################
# Create output directory
###################################################################
subroutine                    @1.1a [Creating output directory]
   subroutine                 @1.1b [${out[sub]}]
   outdir=${out[sub]}
   mkdir -p $outdir

###################################################################
# Write path to spaces index
###################################################################
subroutine                    @1.2  [Initialising space mapping]
   output                     spaces      ${prefix[sub]}_spaces.json
   rm -f                                  ${spaces[cxt]}
   echo '{}'                           >> ${spaces[cxt]}

###################################################################
# Write path to derivative image index
###################################################################
subroutine                    @1.3  [Initialising derivative maps]
   output                     aux_imgs    ${prefix[sub]}_derivatives.json
   rm -f                                  ${aux_imgs[cxt]}
   echo '{}'                           >> ${aux_imgs[cxt]}

###################################################################
# Write path to network index
###################################################################
subroutine                    @1.4  [Initialising atlas system]
   mkdir -p                               ${out[sub]}/${prefix[sub]}_atlas
   output                     atlas       ${prefix[sub]}_atlas/${prefix[sub]}_atlas.json
   rm -f                                  ${atlas[cxt]}
   echo '{}'                           >> ${atlas[cxt]}

###################################################################
# Launch ingress
###################################################################
subroutine                    @1.5  Ingress
   for var in "${cohort_vars[@]}"
      do
      [[ ! -s ${XCPEDIR}/core/ingress/${var//\[$sub\]}.ing ]] && continue
      source  ${XCPEDIR}/core/Ingress.sh
   done
   source                                 ${XCPEDIR}/core/initSpace

###################################################################
# Write path to audit file, and write information
# to the audit file
###################################################################
subroutine                    @1.5  [Priming analytic audit]
   audit[sub]=${out[sub]}/${prefix[sub]}_logs/${prefix[sub]}_audit.csv
   rm -f ${audit[sub]}

   ################################################################
   # Prepare the audit header, which will contain information
   # about the processing status of the current subject
   ################################################################
   id_vars=$(echo    ${!subject[@]})
   id_vars=$(echo    id${id_vars// /,id})
   audit_var=${id_vars},localiser,${pipeline}

   ################################################################
   # Write the contents of the audit file.
   ################################################################
   num_mods=$(( $(ninstances , ${pipeline}) + 2 ))
   audit_val=${ids[sub]}$(printf ',0%.0s' $(seq 1 ${num_mods}))
   echo "${audit_var}"                          >> ${audit[sub]}
   echo "${audit_val}"                          >> ${audit[sub]}

###################################################################
# Write path to index of quality variables
###################################################################
subroutine                    @1.6  [Priming quality assessment]
   quality=${out[sub]}/${prefix[sub]}_quality.csv
   rm -f ${quality}
   echo "${id_vars}"                            >> ${quality}
   echo "${ids[sub]}"                           >> ${quality}
routine_end


###################################################################
# Localise the image.
# * Ensure that all images are present
# * If necessary, convert it to NIFTI_GZ format.
# * If necessary, convert it to RPI orientation.
###################################################################
routine                       @2    Localising image
subroutine                    @2.1  [Verifying that images are present]
if ! is_image ${img[sub]}
   then
   abort_stream "The primary analyte is not a valid image: ${img[sub]}"
else 
 img1=${img[sub]}
fi
subroutine                    @2.2  [Conforming and localising images]
source ${XCPEDIR}/core/imgLocalise
routine_end

routine                       @3    Localising design
###################################################################
# Write local design file
###################################################################
subroutine                    @3.1  [Writing localised design]
   source ${XCPEDIR}/core/defineDesign
   rm -f  ${design[sub]}
   printx ${design}                             >> ${design[sub]}

###################################################################
# Evaluate subject-specific variables
###################################################################
subroutine                    @3.2  [Evaluating subject variables]
   cat    ${XCPEDIR}/core/DESIGN_VARHEAD_OUTPUT >> ${design[sub]}
   printx ${XCPEDIR}/core/DESIGN_MODULE_OUTPUT  >> ${design[sub]}
   set_space                                       ${space[sub]}
   write_config                                    structural
   write_output                                    spaces
   write_output                                    aux_imgs
   write_output                                    atlas
   echo   "audit[$sub]=${audit[sub]}"           >> ${design[sub]}
   echo   "quality[$sub]=${quality}"            >> ${design[sub]}
   echo   "out_super=$out_super"                >> ${design[sub]}
   echo   "sub=$sub"                            >> ${design[sub]}
   echo   "design[$sub]=${design[sub]}"         >> ${design[sub]}
   echo   "prefix[$sub]=${prefix[sub]}"         >> ${design[sub]}
   echo   "out[$sub]=${out[sub]}"               >> ${design[sub]}
   echo   "ids[$sub]=${ids[sub]}"               >> ${design[sub]}
   [[ -n  ${scratch} ]] \
   && echo "scratch=${scratch}"                 >> ${design[sub]}
   for v in "${cohort_vars[@]}"
      do
      echo "${v}=${!v}"                         >> ${design[sub]}
   done
   for i in "${!subject[@]}"
      do
      echo "subject[$i]=${subject[i]}"          >> ${design[sub]}
   done
   for a in "${asgt[@]}"
      do
      echo "${a}"                               >> ${design[sub]}
   done
   [[ ${sequence}  == native ]] \
   && echo  "sequence=native"                   >> ${design[sub]}
   [[ ${normalise} == 1      ]] \
   && echo "template=${template}"               >> ${design[sub]} \
   && echo "standard=${standard[0]}"            >> ${design[sub]}
   echo    "img1[$sub]=${img[sub]}"   >> ${design[sub]}
routine_end

###################################################################
# Enter audit information for the current subject
###################################################################
source ${XCPEDIR}/core/auditComplete

echo "

Localiser complete"
