#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################
tag=${signpost}

###################################################################
# Generate the space metadata file for the current analysis.
# Up to three spaces must be configured:
# (1) Native space:     the coordinate space of the analyte
# (2) Standard space:   a common space for group comparisons
# (3) Anatomical space: the maximal-resolution space available for
#                       the current subject
###################################################################

###################################################################
# (1) NATIVE SPACE.
#     For this one, we only need to decide what to call the space,
#     since no metadata exist for it until processing.
###################################################################
[[ -z ${sequence} ]]       && sequence=native
[[ -z ${space[sub]} ]]     && space[$sub]=${prefix[sub]}_${sequence}
subroutine                       ${tag}.1    [Native space: ${space[sub]}]

###################################################################
# (2) STANDARD SPACE.
#     Standard space attempts to match an appropriate definition
#     stored in the `space` subdirectory of the processing system.
#     If no definition is found, then it is assumed that the user
#     does not intend to standardise. If the assignment to standard
#     in the design file includes the '_via_' tag, then multiple
#     spaces are loaded and the first is assigned to standard.
###################################################################
standard=( ${standard//_via_/ } )
for i in "${!standard[@]}"
   do
   std=${standard[i]//\%*/}
   space_standard=$(abspath ${BRAINSPACE}/${std}/${std}_space.json)
   if (( i == 0 )) && [[ -s ${space_standard} ]]
      then
      subroutine                 ${tag}.2a   [Standard space: ${std}]
      import_metadata  ${space_standard} to  ${spaces[cxt]}
      template=$(abspath         $(space_get ${standard[i]} Map))
      normalise=1
   elif (( i == 0 ))
      then
      subroutine                 ${tag}.2b   [No standard space]
   elif [[ -s ${space_standard} ]]
      then
      subroutine                 ${tag}.2c   [Loading space: ${std}]
      import_metadata  ${space_standard} to  ${spaces[cxt]}
   else
      subroutine                 ${tag}.2d   [Space not found: ${std}]
   fi
done
standard=${standard[0]}
str_targ=${standard[i]}
str_temp=$(abspath               $(space_get ${standard[i]} Map))

###################################################################
# (3) ANATOMICAL SPACE.
#     This one is more complicated, since there isn't necessarily
#     an existing metadata file for the anatomical space
#     definition. The work of assembling a metadata file is
#     delegated to a utility script if necessary.
###################################################################
configure         structural        ${prefix[sub]}_anatomical
###################################################################
#     Case 1: Template and transforms are provided. In this
#             case, the anatomical map should be added to the
#             design to support coregistration.
###################################################################
[[ -z ${xfms}  ]] &&  xfms="  ${xfm_rigid[sub]}
                              ${xfm_affine[sub]}
                              ${xfm_warp[sub]}
                              ${xfm_resample[sub]}"
[[ -z ${ixfms} ]] && ixfms="  ${ixfm_resample[sub]}
                              ${ixfm_warp[sub]}
                              ${ixfm_affine[sub]}
                              ${ixfm_rigid[sub]}"
if [[ -n ${xfms} ]]
   then
   subroutine                 ${tag}.3a   [Anatomical space: ${structural[cxt]//\%*/}]
   xfms=$( echo ${xfms})
   ixfms=$(echo ${ixfms})
   xfms=${xfms// /,}
   ixfms=${ixfms// /,}

   is_image ${struct_head[sub]} && hd=',MapHead='${struct_head[sub]}
   ${XCPEDIR}/utils/spaceMetadata            \
      -o ${spaces[cxt]}                         \
      -f ${str_targ}:${str_temp}                \
      -m ${structural[cxt]}:${struct[sub]}${hd} \
      -x ${xfms}                                \
      -i ${ixfms}                               \
      -s ${spaces[cxt]}
###################################################################
#     Case 3: Nothing is provided. This might be the case for
#     structural analyses, for instance. Or, the anatomical space
#     has already been imported via ingress.
###################################################################
else
   subroutine                 ${tag}.3b
fi

###################################################################
# (4) Load coregistration if precomputed.
# Currently, there's no sense in implementing this, since we're
# not obtaining any appropriate reference images in native space.
###################################################################
<<COREG
if [[ -n ${seq2struct[sub]} ]]
   then
   subroutine                 ${tag}.4    Loading coregistration
   transform_set     ${spaces[cxt]}             \
                     itk:${seq2struct[sub]}     \
                     ${prefix[sub]}_${sequence} ${structural[sub]}
   if [[ -z ${struct2seq[sub]} ]]
      then
      exec_ants   antsApplyTransforms -e 3 -d 3 \
                  # reference image required
   fi
   transform_set     ${spaces[cxt]}             \
                     itk:${struct2seq[sub]}     \
                     ${structural[sub]} ${prefix[sub]}_${sequence}
fi
COREG
