#!/usr/bin/env bash

###################################################################
#  ✡✡ ✡✡✡✡ ✡✡✡✡✡✡✡✡✡ ✡✡✡✡✡✡✡✡✡✡✡✡✡ ✡✡✡✡✡✡✡✡✡✡✡✡✡ ✡✡✡✡✡✡✡✡ ✡✡✡✡ ✡✡ #
###################################################################

###################################################################
# Wrapper to perform group level quality assurance 
###################################################################

###################################################################
# Usage function
###################################################################
Usage(){
  echo ""; echo ""; echo ""
  echo "Usage: `basename $0` -d </path/to/design/file.dsn> -S #_std_deviations"
  echo ""
  echo "Compulsory arguments:"
  echo "  -d: Design file"
  echo "  -S # of standard deviations to apply a cut off"
  echo "Optinal Arguments:"
  echo "  -m: Column name to apply manual cutt off to"
  echo "  -M: Manual cut off value"
  echo "  -E: Binary array indicating whther the cutoff should be applied to greater or less then the value supplied"
  echo "      A 1 indicates Greater then"
  echo "      A 0 indicates Less then"
  echo ""
  echo "Example Call with Optional Arguments:"
  echo '${XCPEDIR}/qualityWrapper -d </path/to/your/design/file.dsn> -S 3 -m "temporalSignalNoiseRatio relMeanRMSmotion"  -M "30 0.5"  -E "0 1"'

  exit 2
}

###################################################################
# Parse arguments
###################################################################
while getopts "d:S:m:M:E:h" OPTION ; do
  case ${OPTION} in
    d)
      dsnFile=${OPTARG}
      ;;
    S)
      flagValue=${OPTARG}
      ;;
    m)
      manualValues=${OPTARG}
      ;;
    M)
      manualCutOffs=${OPTARG}
      ;;
    E)
      flipIndex=${OPTARG}
      ;;
    h)
      Usage
      ;;
    *)
      Usage
      ;;
    esac
done

###################################################################
# Ensure that all compulsory arguments have been defined
###################################################################
[[ -z ${dsnFile} ]] && Usage
[[ -z ${flagValue} ]] && Usage

###################################################################
# Source the design file and find the output of interest
###################################################################
source ${dsnFile}

###################################################################
# Now turn the manual variables into arrays 
###################################################################
manualValues=(${manualValues})
manualCutOffs=(${manualCutOffs})
flipIndex=(${flipIndex})
###################################################################
# Now create the quality output file to work with
###################################################################
x="${design}"
y="${x/\/*\//}"
filePrefix=`echo ${y/.*/}`
fileOutput=`echo ${filePrefix}_groupLevelQuality.csv`
if [ ! -f ${fileOutput} ] ; then 
  ${XCPEDIR}/utils/combineOutput -p ${out_super} -f "_quality.csv" -o ${fileOutput} ; 
fi

###################################################################
# Now call the R script to find outliers
###################################################################

## First deal with any manual values
flagValueOutput=`echo ${filePrefix}_groupLevelFlagStatus.csv`
count=`echo "${#manualValues[@]}-1" | bc`
randValue=${RANDOM}
manualCsv=${TMP}/manualValues${randValue}.csv
echo "colName, cutOffValue, flipIndex" > ${manualCsv}
for index in `seq 0 ${count}` ; do 
  echo ${manualValues[${index}]},${manualCutOffs[${index}]},${flipIndex[${index}]} >> ${manualCsv} ;
done

${XCPEDIR}/utils/identifyOutliers.R -f ${out_super}/${fileOutput} \
               -S ${flagValue} -o ${out_super}/${flagValueOutput} \
               -m ${manualCsv}

rm -f ${manualCsv}
