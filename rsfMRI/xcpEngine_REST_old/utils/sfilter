#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################

###################################################################
# Generalised function for spatially filtering 4D BOLD timeseries
# data
###################################################################

###################################################################
# Constants
###################################################################
source ${XCPEDIR}/core/constants
source ${XCPEDIR}/core/functions/library.sh

###################################################################
# Usage function
###################################################################
Usage(){
cat << endstream
___________________________________________________________________


Usage: sfilter -i <input> -o <output> <options>

Compulsory arguments:
 -i : Input timeseries
      The 4D timeseries to which the spatial filter is to
      be applied.

 -o : Output timeseries
      The path to the file where the filtered timeseries
      will be written.

Optional arguments:
 -s : Spatial filter mode [default gaussian]
      Input can either be 'gaussian', 'uniform', or 'susan'.
       * Gaussian smoothing [default] applies the same
         Gaussian smoothing kernel across the entire volume.
       * SUSAN-based smoothing restricts mixing of signals
         from disparate tissue classes (Smith and Brady, 
         1997).
       * Uniform smoothing applies smoothing to all voxels
         until the smoothness computed at every voxel
         attains the target value.
       * Uniform smoothing may be used as a compensatory
         mechanism to reduce the effects of subject motion
         on the final processed image (Scheinost et al.,
         2014).

 -k : Spatial smoothing kernel [default 4]
      The FWHM of the smoothing kernel, in mm

 -m : Mask
      Smoothing is computed only within the specified
      binary mask.

 -u : USAN or MASTER
       * This option is required only for SUSAN-based
         smoothing. SUSAN uses the USAN to identify
         boundaries across which smoothing should be limited.
         For functional image processing, this is often an
         example volume extracted from the BOLD timeseries.
       * If this option is specified for UNIFORM smoothing,
         then smoothing is applied to the MASTER until it is
         uniformly smooth. The smoothing regime computed for
         the MASTER is then applied to the input dataset.

 -h : Hard segmentation USAN
      Set this flag if the USAN that you are providing is 
      a hard segmentation of the image and you wish to 
      disallow smoothing between parcels.

 -t : Trace
      If this flag is set, then any commands called by the
      sfilter routine will be explicitly printed to the
      console or log.


endstream
}

###################################################################
# Define defaults
###################################################################
filter=gaussian
kernel=4
hardseg=0
###################################################################
# Parse arguments
###################################################################
while getopts "i:o:s:k:m:u:th" OPTION
   do
   case $OPTION in
   i)
      image=${OPTARG}
      ! is_image ${image} && Usage && exit
      ;;
   o)
      out=${OPTARG}
      ;;
   s)
      filter=${OPTARG}
      if [[ ${filter} != gaussian ]] \
      && [[ ${filter} != susan ]] \
      && [[ ${filter} != uniform ]]
         then
         echo "Unrecognised filter mode: ${filter}."
         Usage
         exit
      fi
      ;;
   k)
      kernel=${OPTARG}
      ! is+numeric ${kernel} && Usage && exit
      ;;
   m)
      mask=${OPTARG}
      ! is_image ${mask} && Usage && exit
      ;;
   u)
      usan=${OPTARG}
      ! is_image ${usan} && Usage && exit
      ;;
   h)
      hardseg=1
      ;;
   t)
      set -x
      ;;
   *)
      echo "Option not recognised: ${OPTARG}"
      Usage
      exit
   esac
done
###################################################################
# Ensure that all compulsory arguments have been defined
###################################################################
[[ -z ${image} ]]  && Usage && exit
[[ -z ${out} ]]    && Usage && exit
[[ -z ${filter} ]] && Usage && exit
[[ -z ${kernel} ]] && Usage && exit

case ${filter} in
gaussian)
   subroutine     @u.1
   ################################################################
   # Convert filter kernel from mm to sigma
   ################################################################
   kernel=$(arithmetic ${kernel}/${SIGMA})
   ################################################################
   # Add a mask argument, if a mask has been specified
   ################################################################
   [[ ! -z ${mask} ]] && mask="-mas ${mask}"
   exec_fsl \
      fslmaths ${image} \
      -s ${kernel} \
      ${mask} \
      ${out}
   ;;
uniform)
   subroutine     @u.2
   rm -rf ${out}
   ################################################################
   # * If a mask has been specified, then use it for smoothing.
   # * Otherwise, automatically generate a mask using AFNI's
   #   3dAutomask tool. This may not perform as well on demeaned
   #   or detrended data.
   # * If a master dataset has been specified, then use it for
   #   smoothing.
   ################################################################
   [[ -n ${mask} ]] && mask="-mask ${mask}"
   [[ -z ${mask} ]] && mask="-automask"
   [[ -n ${usan} ]] && master="-blurmaster ${usan}"
   ################################################################
   # Use AFNI's 3dBlurToFWHM to obtain the smoothed image.
   ################################################################
   exec_afni \
      3dBlurToFWHM -quiet \
      -input ${image} \
      -prefix ${out} \
      -FWHM ${kernel} \
      -detrend \
      -temper \
      ${mask} \
      ${master} 2>/dev/null
   ;;
susan)
   subroutine     @u.3
   ################################################################
   # Convert filter kernel from mm to sigma
   ################################################################
   kernel=$(arithmetic ${kernel}/${SIGMA})
   ################################################################
   # Use 75 percent of the median as the SUSAN brightness threshold
   ################################################################
   perc50=$(exec_fsl \
      fslstats ${usan} \
      -k ${mask} \
      -p 50)
   bt=$(arithmetic ${perc50}\*3/4)
   [[ ${hardseg} == 1 ]] && bt=0.01
   exec_fsl \
      susan \
      ${image} \
      ${bt} \
      ${kernel} \
      3 1 1 \
      ${usan} \
      ${bt} \
      ${out}
   [[ -n ${mask} ]] && exec_fsl \
      fslmaths \
      ${out} \
      -mul ${mask} \
      ${out}
   is_image          ${out}_usan_size.nii.gz \
   && exec_sys rm -f ${out}_usan_size.nii.gz
   ;;
esac
