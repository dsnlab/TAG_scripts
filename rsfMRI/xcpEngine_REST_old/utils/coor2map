#!/usr/bin/env bash

###################################################################
#  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  ☭  #
###################################################################

###################################################################
# Function for converting a seed library into a network
###################################################################

###################################################################
# Constants
# "orientation" is the orientation enforced by AFNI's 3dcalc
###################################################################
source ${XCPEDIR}/core/constants
source ${XCPEDIR}/core/functions/library.sh

###################################################################
# Usage function
###################################################################
Usage(){
cat << endstream
___________________________________________________________________


Usage: coor2map -i <input> -o <output> <options>

`basename $0` receives an octothorpe-delimited seed index
  as input and creates a network map image as an output.

Compulsory arguments:
 -i : Input seed library
      An octothorpe/hash- (#) delimited list of seed names,
      non-overlapping coordinates, and potentially radii.

 -o : Output network"
      The path to the file where the output network will
      be written.

Optional arguments:
 -r : Override radius. If this argument is passed to the
      conversion script, then this radius will take the place
      of any voxel radii defined in the seed library.

 -t : Template image [default MNI 2mm]
      The path to an image file that defines the coordinate
      space used in the seed library.

 -x : Trace
      If this flag is set, then any commands called by the
      coor2map routine will be explicitly printed to the
      console or log.

 -m : mm coordinates
      If this flag is toggled, then input coordinates will be
      treated as mm coordinates rather than voxel coordinates, and
      the image qform and sform will be used to convert them to
      voxel coordinates for seed generation.
      

endstream
}

###################################################################
# Define defaults
###################################################################
mm=0
radius_default=5
template=${FSLDIR}/data/standard/MNI152_T1_2mm_brain
###################################################################
# Parse arguments
###################################################################
while getopts "i:o:t:r:mx" OPTION
   do
   case $OPTION in
   i)
      sclib=${OPTARG}
      ;;
   o)
      out=${OPTARG}
      ;;
   t)
      template=${OPTARG}
      ! is_image ${template} && Usage && exit
      imgpath=${template}
      ;;
   r)
      radius=${OPTARG}
      ! is+numeric ${radius} && Usage && exit
      ;;
   m)
      mm=1
      ;;
   x)
      set -x
      ;;
   *)
      echo "Option not recognised: ${OPTARG}"
      Usage
      exit
   esac
done
shift $((OPTIND-1))
###################################################################
# Ensure that all compulsory arguments have been defined
###################################################################
subroutine                    @u.1
[[ -z ${sclib} ]]    && Usage && exit
[[ -z ${out} ]]      && Usage && exit
[[ -z ${template} ]] && Usage && exit





###################################################################
# Determine the orientation of the coordinate template.
# Despite what it might say in the documentation, AFNI's 3dcalc
# strictly *enforces* LAI orientation.
#
# This is no longer necessary, as this function now operates
# directly in voxel space.
###################################################################
subroutine                    @u.2
x_sign='-'
y_sign='-'
z_sign='-'





###################################################################
# Obtain conversion factors for radii: mm to vox
###################################################################
subroutine                    @u.3
res[0]=$(exec_fsl fslval $template pixdim1)
res[1]=$(exec_fsl fslval $template pixdim2)
res[2]=$(exec_fsl fslval $template pixdim3)





atlas=($(grep -i '^#' ${sclib}) )

nodeidx=1
mapidx=0
for node in ${atlas[@]}
   do
   ################################################################
   # Parse node information
   # node[0] : name
   # node[1] : coordinates
   # node[2] : radius
   ################################################################
   subroutine                 @u.4
   node=( ${node//#/ } )

   ################################################################
   # Determine radius: Order of precedence is:
   #  (1) User input
   #  (2) sclib file
   #  (3) default value
   ################################################################
   if [[ -z ${radius} ]]
      then
      subroutine              @u.5
      radius=${node[2]}
   fi
   if [[ -z ${radius} ]]
      then
      subroutine              @u.6
      radius=${radius_default}
   fi
   
   ################################################################
   # Scale radius to the coordinate space
   ################################################################
   subroutine                 @u.7
   rad[0]=$(arithmetic ${radius}/${res[0]})
   rad[1]=$(arithmetic ${radius}/${res[1]})
   rad[2]=$(arithmetic ${radius}/${res[2]})
   radsq[0]=$(arithmetic ${rad[0]}^2)
   radsq[1]=$(arithmetic ${rad[1]}^2)
   radsq[2]=$(arithmetic ${rad[2]}^2)

   ################################################################
   # Add ROI to network
   # Any previous, overlapping ROIs will be overwritten; only a
   # hard parcellation is supported
   ################################################################
   subroutine                 @u.8
   coor=(${node[1]//,/ })
   if (( mm == 1 ))
      then
      subroutine              @u.9
      coor=( $(echo "${coor[@]}"|exec_fsl std2imgcoord -img ${template} -std ${template} -vox) )
   fi
   
   ################################################################
   # Generate a solid ellipsoid (a sphere in true physical space)
   #  * Note that each additional node wraps the expression from
   #    all previous nodes in a multiplier that zeroes the values
   #    inside the new node before the new node is added. This
   #    will result in a much slower module, but is necessary to
   #    ensure that there is no overlap.
   ################################################################
   subroutine                 @u.10
   nodeexpr="step(1-(i-${coor[0]})*(i-${coor[0]})/${radsq[0]}-(j-${coor[1]})*(j-${coor[1]})/${radsq[1]}-(k-${coor[2]})*(k-${coor[2]})/${radsq[2]})"
   if [[ -z ${netexpr} ]]
      then
      subroutine              @u.10.1
      netexpr=${nodeexpr}
   else
      subroutine              @u.10.2
      netexpr="(-1*${nodeexpr}+1)*(${netexpr})+${nodeidx}*${nodeexpr}"
   fi
   
   ################################################################
   # If expressions get too long, 3dcalc does not like the input,
   # so networks with a large number of nodes (e.g. Power 264)
   # will need to be split into 35-node subnetworks, then
   # aggregated in the final step
   ################################################################
   if (( $(( ${nodeidx} % 10 )) == 0 ))
      then
      subroutine              @u.11
      cmd[mapidx]="exec_afni 3dcalc -overwrite -a ${imgpath} -expr '${netexpr}' -prefix ${out}"
      imgpath=${out}
      netexpr=a
      (( mapidx++ ))
   fi
   
   (( nodeidx++ ))
   
done

###################################################################
# Collate all subnetwork maps
###################################################################
subroutine                    @u.12
ctemp=$(date +%N)coor2map
[[ -n ${TMPDIR} ]] && ctemp=${TMPDIR}/${ctemp}
cmd[mapidx]="exec_afni 3dcalc -overwrite -a ${imgpath} -expr '${netexpr}' -prefix ${out}"
for c in "${cmd[@]}"
   do
   echo ${c} >> ${ctemp}
done
exec_sys chmod +x ${ctemp}
source ${ctemp}
exec_sys rm -f ${ctemp}
